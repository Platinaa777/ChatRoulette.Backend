{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar EventEmitter = require('events').EventEmitter;\nvar DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS = require('../../util/constants').DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS;\n/**\n * VideoProcessorEventObserver listens to {@link VideoProcessor} related events\n * and re-emits them as a generic event with some additional information.\n * @extends EventEmitter\n * @emits VideoProcessorEventObserver#event\n */\nvar VideoProcessorEventObserver = /** @class */function (_super) {\n  __extends(VideoProcessorEventObserver, _super);\n  /**\n   * Constructor.\n   * @param {Log} log\n   */\n  function VideoProcessorEventObserver(log) {\n    var _this = _super.call(this) || this;\n    Object.defineProperties(_this, {\n      _lastStatsSaveTime: {\n        value: null,\n        writable: true\n      },\n      _lastStatsPublishTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _processorInfo: {\n        value: null,\n        writable: true\n      },\n      _stats: {\n        value: null,\n        writable: true\n      }\n    });\n    _this.on('add', function (info) {\n      _this._lastStatsSaveTime = Date.now();\n      _this._lastStatsPublishTime = Date.now();\n      _this._processorInfo = info;\n      _this._stats = [];\n      _this._reemitEvent('add', _this._getEventData());\n    });\n    _this.on('remove', function () {\n      var data = _this._getEventData();\n      _this._lastStatsSaveTime = null;\n      _this._lastStatsPublishTime = null;\n      _this._processorInfo = null;\n      _this._stats = null;\n      _this._reemitEvent('remove', data);\n    });\n    _this.on('start', function () {\n      _this._reemitEvent('start', _this._getEventData());\n    });\n    _this.on('stop', function (message) {\n      _this._reemitEvent('stop', Object.assign({\n        message: message\n      }, _this._getEventData()));\n    });\n    _this.on('stats', function () {\n      return _this._maybeEmitStats();\n    });\n    return _this;\n  }\n  /**\n   * @private\n   */\n  VideoProcessorEventObserver.prototype._getEventData = function () {\n    if (!this._processorInfo) {\n      return {};\n    }\n    var _a = this._processorInfo,\n      processor = _a.processor,\n      captureHeight = _a.captureHeight,\n      captureWidth = _a.captureWidth,\n      inputFrameRate = _a.inputFrameRate,\n      isRemoteVideoTrack = _a.isRemoteVideoTrack,\n      inputFrameBufferType = _a.inputFrameBufferType,\n      outputFrameBufferContextType = _a.outputFrameBufferContextType;\n    var data = {\n      captureHeight: captureHeight,\n      captureWidth: captureWidth,\n      inputFrameRate: inputFrameRate,\n      isRemoteVideoTrack: isRemoteVideoTrack,\n      inputFrameBufferType: inputFrameBufferType,\n      outputFrameBufferContextType: outputFrameBufferContextType\n    };\n    data.name = processor._name || 'VideoProcessor';\n    ['assetsPath', 'blurFilterRadius', 'debounce', 'fitType', 'isSimdEnabled', 'maskBlurRadius', 'pipeline', 'version'].forEach(function (prop) {\n      var val = processor[\"_\" + prop];\n      if (typeof val !== 'undefined') {\n        data[prop] = val;\n      }\n    });\n    Object.keys(data).forEach(function (prop) {\n      var val = data[prop];\n      if (typeof val === 'boolean') {\n        data[prop] = val ? 'true' : 'false';\n      }\n    });\n    return data;\n  };\n  /**\n   * Save stats every second. If a specific time interval has elapsed,\n   * the stats event will be emitted\n   * @private\n   */\n  VideoProcessorEventObserver.prototype._maybeEmitStats = function () {\n    if (!this._stats || !this._processorInfo) {\n      return;\n    }\n    var benchmark = this._processorInfo.processor._benchmark;\n    if (!benchmark) {\n      return;\n    }\n    var now = Date.now();\n    if (now - this._lastStatsSaveTime < 1000) {\n      return;\n    }\n    var entry = {\n      outputFrameRate: benchmark.getRate('totalProcessingDelay')\n    };\n    ['captureFrameDelay', 'imageCompositionDelay', 'inputImageResizeDelay', 'processFrameDelay', 'segmentationDelay'].forEach(function (name) {\n      entry[name] = benchmark.getAverageDelay(name);\n    });\n    this._lastStatsSaveTime = now;\n    this._stats.push(entry);\n    if (now - this._lastStatsPublishTime < DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS) {\n      return;\n    }\n    this._lastStatsPublishTime = now;\n    var stats = this._stats.splice(0);\n    var averages = stats.reduce(function (averages, current, n) {\n      Object.keys(entry).forEach(function (name) {\n        if (!averages[name]) {\n          averages[name] = 0;\n        }\n        averages[name] = (averages[name] * n + current[name]) / (n + 1);\n      });\n      return averages;\n    }, {});\n    Object.keys(averages).forEach(function (name) {\n      averages[name] = parseFloat(averages[name].toFixed(2));\n    });\n    this._reemitEvent('stats', Object.assign({}, averages, this._getEventData()));\n  };\n  /**\n   * @private\n   */\n  VideoProcessorEventObserver.prototype._reemitEvent = function (name, data) {\n    this._log.debug(\"VideoProcessor:\" + name, data);\n    this.emit('event', {\n      name: name,\n      data: data\n    });\n  };\n  return VideoProcessorEventObserver;\n}(EventEmitter);\nmodule.exports = VideoProcessorEventObserver;","map":{"version":3,"names":["EventEmitter","require","DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS","VideoProcessorEventObserver","_super","__extends","log","_this","call","Object","defineProperties","_lastStatsSaveTime","value","writable","_lastStatsPublishTime","_log","_processorInfo","_stats","on","info","Date","now","_reemitEvent","_getEventData","data","message","assign","_maybeEmitStats","prototype","_a","processor","captureHeight","captureWidth","inputFrameRate","isRemoteVideoTrack","inputFrameBufferType","outputFrameBufferContextType","name","_name","forEach","prop","val","keys","benchmark","_benchmark","entry","outputFrameRate","getRate","getAverageDelay","push","stats","splice","averages","reduce","current","n","parseFloat","toFixed","debug","emit","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/media/track/videoprocessoreventobserver.js"],"sourcesContent":["'use strict';\n\nconst { EventEmitter } = require('events');\nconst { DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS } = require('../../util/constants');\n\n/**\n * VideoProcessorEventObserver listens to {@link VideoProcessor} related events\n * and re-emits them as a generic event with some additional information.\n * @extends EventEmitter\n * @emits VideoProcessorEventObserver#event\n */\nclass VideoProcessorEventObserver extends EventEmitter {\n\n  /**\n   * Constructor.\n   * @param {Log} log\n   */\n  constructor(log) {\n    super();\n\n    Object.defineProperties(this, {\n      _lastStatsSaveTime: {\n        value: null,\n        writable: true\n      },\n      _lastStatsPublishTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _processorInfo: {\n        value: null,\n        writable: true\n      },\n      _stats: {\n        value: null,\n        writable: true\n      }\n    });\n\n    this.on('add', info => {\n      this._lastStatsSaveTime = Date.now();\n      this._lastStatsPublishTime = Date.now();\n      this._processorInfo = info;\n      this._stats = [];\n      this._reemitEvent('add', this._getEventData());\n    });\n\n    this.on('remove', () => {\n      const data = this._getEventData();\n      this._lastStatsSaveTime = null;\n      this._lastStatsPublishTime = null;\n      this._processorInfo = null;\n      this._stats = null;\n      this._reemitEvent('remove', data);\n    });\n\n    this.on('start', () => {\n      this._reemitEvent('start', this._getEventData());\n    });\n\n    this.on('stop', message => {\n      this._reemitEvent('stop', Object.assign({ message }, this._getEventData()));\n    });\n\n    this.on('stats', () => this._maybeEmitStats());\n  }\n\n  /**\n   * @private\n   */\n  _getEventData() {\n    if (!this._processorInfo) {\n      return {};\n    }\n\n    const {\n      processor,\n      captureHeight,\n      captureWidth,\n      inputFrameRate,\n      isRemoteVideoTrack,\n      inputFrameBufferType,\n      outputFrameBufferContextType\n    } = this._processorInfo;\n    const data = { captureHeight, captureWidth, inputFrameRate, isRemoteVideoTrack, inputFrameBufferType, outputFrameBufferContextType };\n    data.name = processor._name || 'VideoProcessor';\n\n    ['assetsPath', 'blurFilterRadius', 'debounce', 'fitType', 'isSimdEnabled', 'maskBlurRadius', 'pipeline', 'version'].forEach(prop => {\n      const val = processor[`_${prop}`];\n      if (typeof val !== 'undefined') {\n        data[prop] = val;\n      }\n    });\n\n    Object.keys(data).forEach(prop => {\n      const val = data[prop];\n      if (typeof val === 'boolean') {\n        data[prop] = val ? 'true' : 'false';\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Save stats every second. If a specific time interval has elapsed,\n   * the stats event will be emitted\n   * @private\n   */\n  _maybeEmitStats() {\n    if (!this._stats || !this._processorInfo) {\n      return;\n    }\n    const benchmark = this._processorInfo.processor._benchmark;\n    if (!benchmark) {\n      return;\n    }\n    const now = Date.now();\n    if (now - this._lastStatsSaveTime < 1000) {\n      return;\n    }\n\n    const entry = { outputFrameRate: benchmark.getRate('totalProcessingDelay') };\n    ['captureFrameDelay', 'imageCompositionDelay', 'inputImageResizeDelay', 'processFrameDelay', 'segmentationDelay'].forEach(name => {\n      entry[name] = benchmark.getAverageDelay(name);\n    });\n    this._lastStatsSaveTime = now;\n    this._stats.push(entry);\n\n    if (now - this._lastStatsPublishTime < DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS) {\n      return;\n    }\n    this._lastStatsPublishTime = now;\n    const stats = this._stats.splice(0);\n    const averages = stats.reduce((averages, current, n) => {\n      Object.keys(entry).forEach(name => {\n        if (!averages[name]) {\n          averages[name] = 0;\n        }\n        averages[name] = ((averages[name] * n) + current[name]) / (n + 1);\n      });\n      return averages;\n    }, {});\n\n    Object.keys(averages).forEach(name => {\n      averages[name] = parseFloat(averages[name].toFixed(2));\n    });\n    this._reemitEvent('stats', Object.assign({}, averages, this._getEventData()));\n  }\n\n  /**\n   * @private\n   */\n  _reemitEvent(name, data) {\n    this._log.debug(`VideoProcessor:${name}`, data);\n    this.emit('event', { name, data });\n  }\n}\n\nmodule.exports = VideoProcessorEventObserver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}