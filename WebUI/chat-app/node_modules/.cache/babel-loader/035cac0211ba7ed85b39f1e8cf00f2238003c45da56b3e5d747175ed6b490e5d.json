{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar EventEmitter = require('events').EventEmitter;\n/**\n * {@link EncodingParametersImpl} represents an object which notifies its\n * listeners of any changes in the values of its properties.\n * @extends EventEmitter\n * @implements EncodingParameters\n * @emits EncodingParametersImpl#changed\n * @property {?number} maxAudioBitrate\n * @property {?number} maxVideoBitrate\n */\nvar EncodingParametersImpl = /** @class */function (_super) {\n  __extends(EncodingParametersImpl, _super);\n  /**\n   * Construct an {@link EncodingParametersImpl}.\n   * @param {EncodingParamters} encodingParameters - Initial {@link EncodingParameters}\n   * @param {Boolean} adaptiveSimulcast - true if adaptive simulcast was enabled by connect options.\n   */\n  function EncodingParametersImpl(encodingParameters, adaptiveSimulcast) {\n    var _this = _super.call(this) || this;\n    encodingParameters = Object.assign({\n      maxAudioBitrate: null,\n      maxVideoBitrate: null\n    }, encodingParameters);\n    Object.defineProperties(_this, {\n      maxAudioBitrate: {\n        value: encodingParameters.maxAudioBitrate,\n        writable: true\n      },\n      maxVideoBitrate: {\n        value: encodingParameters.maxVideoBitrate,\n        writable: true\n      },\n      adaptiveSimulcast: {\n        value: adaptiveSimulcast\n      }\n    });\n    return _this;\n  }\n  /**\n   * Returns the bitrate values in an {@link EncodingParameters}.\n   * @returns {EncodingParameters}\n   */\n  EncodingParametersImpl.prototype.toJSON = function () {\n    return {\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    };\n  };\n  /**\n   * Update the bitrate values with those in the given {@link EncodingParameters}.\n   * @param {EncodingParameters} encodingParameters - The new {@link EncodingParameters}\n   * @fires EncodingParametersImpl#changed\n   */\n  EncodingParametersImpl.prototype.update = function (encodingParameters) {\n    var _this = this;\n    encodingParameters = Object.assign({\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    }, encodingParameters);\n    var shouldEmitChanged = ['maxAudioBitrate', 'maxVideoBitrate'].reduce(function (shouldEmitChanged, maxKindBitrate) {\n      if (_this[maxKindBitrate] !== encodingParameters[maxKindBitrate]) {\n        _this[maxKindBitrate] = encodingParameters[maxKindBitrate];\n        shouldEmitChanged = true;\n      }\n      return shouldEmitChanged;\n    }, false);\n    if (shouldEmitChanged) {\n      this.emit('changed');\n    }\n  };\n  return EncodingParametersImpl;\n}(EventEmitter);\n/**\n * At least one of the {@link EncodingParametersImpl}'s bitrate values changed.\n * @event EncodingParametersImpl#changed\n */\nmodule.exports = EncodingParametersImpl;","map":{"version":3,"names":["EventEmitter","require","EncodingParametersImpl","_super","__extends","encodingParameters","adaptiveSimulcast","_this","call","Object","assign","maxAudioBitrate","maxVideoBitrate","defineProperties","value","writable","prototype","toJSON","update","shouldEmitChanged","reduce","maxKindBitrate","emit","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/encodingparameters.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * {@link EncodingParametersImpl} represents an object which notifies its\n * listeners of any changes in the values of its properties.\n * @extends EventEmitter\n * @implements EncodingParameters\n * @emits EncodingParametersImpl#changed\n * @property {?number} maxAudioBitrate\n * @property {?number} maxVideoBitrate\n */\nclass EncodingParametersImpl extends EventEmitter {\n  /**\n   * Construct an {@link EncodingParametersImpl}.\n   * @param {EncodingParamters} encodingParameters - Initial {@link EncodingParameters}\n   * @param {Boolean} adaptiveSimulcast - true if adaptive simulcast was enabled by connect options.\n   */\n  constructor(encodingParameters, adaptiveSimulcast) {\n    super();\n\n    encodingParameters = Object.assign({\n      maxAudioBitrate: null,\n      maxVideoBitrate: null\n    }, encodingParameters);\n\n    Object.defineProperties(this, {\n      maxAudioBitrate: {\n        value: encodingParameters.maxAudioBitrate,\n        writable: true\n      },\n      maxVideoBitrate: {\n        value: encodingParameters.maxVideoBitrate,\n        writable: true\n      },\n      adaptiveSimulcast: {\n        value: adaptiveSimulcast\n      }\n    });\n  }\n\n  /**\n   * Returns the bitrate values in an {@link EncodingParameters}.\n   * @returns {EncodingParameters}\n   */\n  toJSON() {\n    return {\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    };\n  }\n\n  /**\n   * Update the bitrate values with those in the given {@link EncodingParameters}.\n   * @param {EncodingParameters} encodingParameters - The new {@link EncodingParameters}\n   * @fires EncodingParametersImpl#changed\n   */\n  update(encodingParameters) {\n    encodingParameters = Object.assign({\n      maxAudioBitrate: this.maxAudioBitrate,\n      maxVideoBitrate: this.maxVideoBitrate\n    }, encodingParameters);\n\n    const shouldEmitChanged = [\n      'maxAudioBitrate',\n      'maxVideoBitrate'\n    ].reduce((shouldEmitChanged, maxKindBitrate) => {\n      if (this[maxKindBitrate] !== encodingParameters[maxKindBitrate]) {\n        this[maxKindBitrate] = encodingParameters[maxKindBitrate];\n        shouldEmitChanged = true;\n      }\n      return shouldEmitChanged;\n    }, false);\n\n    if (shouldEmitChanged) {\n      this.emit('changed');\n    }\n  }\n}\n\n/**\n * At least one of the {@link EncodingParametersImpl}'s bitrate values changed.\n * @event EncodingParametersImpl#changed\n */\n\nmodule.exports = EncodingParametersImpl;\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,YAAY;AAEnD;;;;;;;;;AASA,IAAAE,sBAAA,0BAAAC,MAAA;EAAqCC,SAAA,CAAAF,sBAAA,EAAAC,MAAA;EACnC;;;;;EAKA,SAAAD,uBAAYG,kBAAkB,EAAEC,iBAAiB;IAAjD,IAAAC,KAAA,GACEJ,MAAA,CAAAK,IAAA,MAAO;IAEPH,kBAAkB,GAAGI,MAAM,CAACC,MAAM,CAAC;MACjCC,eAAe,EAAE,IAAI;MACrBC,eAAe,EAAE;KAClB,EAAEP,kBAAkB,CAAC;IAEtBI,MAAM,CAACI,gBAAgB,CAACN,KAAI,EAAE;MAC5BI,eAAe,EAAE;QACfG,KAAK,EAAET,kBAAkB,CAACM,eAAe;QACzCI,QAAQ,EAAE;OACX;MACDH,eAAe,EAAE;QACfE,KAAK,EAAET,kBAAkB,CAACO,eAAe;QACzCG,QAAQ,EAAE;OACX;MACDT,iBAAiB,EAAE;QACjBQ,KAAK,EAAER;;KAEV,CAAC;;EACJ;EAEA;;;;EAIAJ,sBAAA,CAAAc,SAAA,CAAAC,MAAM,GAAN;IACE,OAAO;MACLN,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCC,eAAe,EAAE,IAAI,CAACA;KACvB;EACH,CAAC;EAED;;;;;EAKAV,sBAAA,CAAAc,SAAA,CAAAE,MAAM,GAAN,UAAOb,kBAAkB;IAAzB,IAAAE,KAAA;IACEF,kBAAkB,GAAGI,MAAM,CAACC,MAAM,CAAC;MACjCC,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCC,eAAe,EAAE,IAAI,CAACA;KACvB,EAAEP,kBAAkB,CAAC;IAEtB,IAAMc,iBAAiB,GAAG,CACxB,iBAAiB,EACjB,iBAAiB,CAClB,CAACC,MAAM,CAAC,UAACD,iBAAiB,EAAEE,cAAc;MACzC,IAAId,KAAI,CAACc,cAAc,CAAC,KAAKhB,kBAAkB,CAACgB,cAAc,CAAC,EAAE;QAC/Dd,KAAI,CAACc,cAAc,CAAC,GAAGhB,kBAAkB,CAACgB,cAAc,CAAC;QACzDF,iBAAiB,GAAG,IAAI;;MAE1B,OAAOA,iBAAiB;IAC1B,CAAC,EAAE,KAAK,CAAC;IAET,IAAIA,iBAAiB,EAAE;MACrB,IAAI,CAACG,IAAI,CAAC,SAAS,CAAC;;EAExB,CAAC;EACH,OAAApB,sBAAC;AAAD,CAAC,CAlEoCF,YAAY;AAoEjD;;;;AAKAuB,MAAM,CAACC,OAAO,GAAGtB,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}