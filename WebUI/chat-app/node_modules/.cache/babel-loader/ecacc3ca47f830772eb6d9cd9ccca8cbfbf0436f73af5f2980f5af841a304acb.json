{"ast":null,"code":"/* globals RTCPeerConnection, RTCRtpTransceiver */\n'use strict';\n\nvar _a = require('./'),\n  flatMap = _a.flatMap,\n  guessBrowser = _a.guessBrowser;\n// NOTE(mmalavalli): We cache Chrome's sdpSemantics support in order to prevent\n// instantiation of more than one RTCPeerConnection.\nvar isSdpSemanticsSupported = null;\n/**\n * Check if Chrome supports specifying sdpSemantics for an RTCPeerConnection.\n * @return {boolean}\n */\nfunction checkIfSdpSemanticsIsSupported() {\n  if (typeof isSdpSemanticsSupported === 'boolean') {\n    return isSdpSemanticsSupported;\n  }\n  if (typeof RTCPeerConnection === 'undefined') {\n    isSdpSemanticsSupported = false;\n    return isSdpSemanticsSupported;\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new RTCPeerConnection({\n      sdpSemantics: 'foo'\n    });\n    isSdpSemanticsSupported = false;\n  } catch (e) {\n    isSdpSemanticsSupported = true;\n  }\n  return isSdpSemanticsSupported;\n}\n// NOTE(mmalavalli): We cache Chrome's SDP format in order to prevent\n// instantiation of more than one RTCPeerConnection.\nvar chromeSdpFormat = null;\n/**\n * Clear cached Chrome's SDP format\n */\nfunction clearChromeCachedSdpFormat() {\n  chromeSdpFormat = null;\n}\n/**\n * Get Chrome's default SDP format.\n * @returns {'planb'|'unified'}\n */\nfunction getChromeDefaultSdpFormat() {\n  if (!chromeSdpFormat) {\n    if (typeof RTCPeerConnection !== 'undefined' && 'addTransceiver' in RTCPeerConnection.prototype) {\n      var pc = new RTCPeerConnection();\n      try {\n        pc.addTransceiver('audio');\n        chromeSdpFormat = 'unified';\n      } catch (e) {\n        chromeSdpFormat = 'planb';\n      }\n      pc.close();\n    } else {\n      chromeSdpFormat = 'planb';\n    }\n  }\n  return chromeSdpFormat;\n}\n/**\n * Get Chrome's SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\nfunction getChromeSdpFormat(sdpSemantics) {\n  if (!sdpSemantics || !checkIfSdpSemanticsIsSupported()) {\n    return getChromeDefaultSdpFormat();\n  }\n  return {\n    'plan-b': 'planb',\n    'unified-plan': 'unified'\n  }[sdpSemantics];\n}\n/**\n * Get Safari's default SDP format.\n * @returns {'planb'|'unified'}\n */\nfunction getSafariSdpFormat() {\n  return typeof RTCRtpTransceiver !== 'undefined' && 'currentDirection' in RTCRtpTransceiver.prototype ? 'unified' : 'planb';\n}\n/**\n * Get the browser's default SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\nfunction getSdpFormat(sdpSemantics) {\n  return {\n    chrome: getChromeSdpFormat(sdpSemantics),\n    firefox: 'unified',\n    safari: getSafariSdpFormat()\n  }[guessBrowser()] || null;\n}\n/**\n * Match a pattern across lines, returning the first capture group for any\n * matches.\n * @param {string} pattern\n * @param {string} lines\n * @returns {Set<string>} matches\n */\nfunction getMatches(pattern, lines) {\n  var matches = lines.match(new RegExp(pattern, 'gm')) || [];\n  return matches.reduce(function (results, line) {\n    var match = line.match(new RegExp(pattern));\n    return match ? results.add(match[1]) : results;\n  }, new Set());\n}\n/**\n * Get a Set of MediaStreamTrack IDs from an SDP.\n * @param {string} pattern\n * @param {string} sdp\n * @returns {Set<string>}\n */\nfunction getTrackIds(pattern, sdp) {\n  return getMatches(pattern, sdp);\n}\n/**\n * Get a Set of MediaStreamTrack IDs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Set<string>} trackIds\n */\nfunction getPlanBTrackIds(sdp) {\n  return getTrackIds('^a=ssrc:[0-9]+ +msid:.+ +(.+) *$', sdp);\n}\n/**\n * Get a Set of MediaStreamTrack IDs from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @returns {Set<string>} trackIds\n */\nfunction getUnifiedPlanTrackIds(sdp) {\n  return getTrackIds('^a=msid:.+ +(.+) *$', sdp);\n}\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getPlanBSSRCs(sdp, trackId) {\n  var pattern = \"^a=ssrc:([0-9]+) +msid:[^ ]+ +\" + trackId + \" *$\";\n  return getMatches(pattern, sdp);\n}\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp -  sdp string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\nfunction getMediaSections(sdp, kind, direction) {\n  if (kind === void 0) {\n    kind = '.*';\n  }\n  if (direction === void 0) {\n    direction = '.*';\n  }\n  return sdp.split('\\r\\nm=').slice(1).map(function (mediaSection) {\n    return \"m=\" + mediaSection;\n  }).filter(function (mediaSection) {\n    var kindPattern = new RegExp(\"m=\" + kind, 'gm');\n    var directionPattern = new RegExp(\"a=\" + direction, 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n/**\n * Get the Set of SSRCs announced in a MediaSection.\n * @param {string} mediaSection\n * @returns {Array<string>} ssrcs\n */\nfunction getMediaSectionSSRCs(mediaSection) {\n  return Array.from(getMatches('^a=ssrc:([0-9]+) +.*$', mediaSection));\n}\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getUnifiedPlanSSRCs(sdp, trackId) {\n  var mediaSections = getMediaSections(sdp);\n  var msidAttrRegExp = new RegExp(\"^a=msid:[^ ]+ +\" + trackId + \" *$\", 'gm');\n  var matchingMediaSections = mediaSections.filter(function (mediaSection) {\n    return mediaSection.match(msidAttrRegExp);\n  });\n  return new Set(flatMap(matchingMediaSections, getMediaSectionSSRCs));\n}\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from an SDP.\n * @param {function(string): Set<string>} getTrackIds\n * @param {function(string, string): Set<string>} getSSRCs\n * @param {string} sdp - SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getTrackIdsToSSRCs(getTrackIds, getSSRCs, sdp) {\n  return new Map(Array.from(getTrackIds(sdp)).map(function (trackId) {\n    return [trackId, getSSRCs(sdp, trackId)];\n  }));\n}\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getPlanBTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getPlanBTrackIds, getPlanBSSRCs, sdp);\n}\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getUnifiedPlanTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getUnifiedPlanTrackIds, getUnifiedPlanSSRCs, sdp);\n}\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the SDP itself. This method\n * ensures that SSRCs never change once announced.\n * @param {function(string): Map<string, Set<string>>} getTrackIdsToSSRCs\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - SDP\n * @returns {strinng} updatedSdp - updated SDP\n */\nfunction updateTrackIdsToSSRCs(getTrackIdsToSSRCs, trackIdsToSSRCs, sdp) {\n  var newTrackIdsToSSRCs = getTrackIdsToSSRCs(sdp);\n  var newSSRCsToOldSSRCs = new Map();\n  // NOTE(mroberts): First, update a=ssrc attributes.\n  newTrackIdsToSSRCs.forEach(function (ssrcs, trackId) {\n    if (!trackIdsToSSRCs.has(trackId)) {\n      trackIdsToSSRCs.set(trackId, ssrcs);\n      return;\n    }\n    var oldSSRCs = Array.from(trackIdsToSSRCs.get(trackId));\n    var newSSRCs = Array.from(ssrcs);\n    oldSSRCs.forEach(function (oldSSRC, i) {\n      var newSSRC = newSSRCs[i];\n      newSSRCsToOldSSRCs.set(newSSRC, oldSSRC);\n      var pattern = \"^a=ssrc:\" + newSSRC + \" (.*)$\";\n      var replacement = \"a=ssrc:\" + oldSSRC + \" $1\";\n      sdp = sdp.replace(new RegExp(pattern, 'gm'), replacement);\n    });\n  });\n  // NOTE(mroberts): Then, update a=ssrc-group attributes.\n  var pattern = '^(a=ssrc-group:[^ ]+ +)(.*)$';\n  var matches = sdp.match(new RegExp(pattern, 'gm')) || [];\n  matches.forEach(function (line) {\n    var match = line.match(new RegExp(pattern));\n    if (!match) {\n      return;\n    }\n    var prefix = match[1];\n    var newSSRCs = match[2];\n    var oldSSRCs = newSSRCs.split(' ').map(function (newSSRC) {\n      var oldSSRC = newSSRCsToOldSSRCs.get(newSSRC);\n      return oldSSRC ? oldSSRC : newSSRC;\n    }).join(' ');\n    sdp = sdp.replace(match[0], prefix + oldSSRCs);\n  });\n  return sdp;\n}\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updatePlanBTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getPlanBTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updateUnifiedPlanTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getUnifiedPlanTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\nexports.clearChromeCachedSdpFormat = clearChromeCachedSdpFormat;\nexports.getSdpFormat = getSdpFormat;\nexports.getMediaSections = getMediaSections;\nexports.getPlanBTrackIds = getPlanBTrackIds;\nexports.getUnifiedPlanTrackIds = getUnifiedPlanTrackIds;\nexports.getPlanBSSRCs = getPlanBSSRCs;\nexports.getUnifiedPlanSSRCs = getUnifiedPlanSSRCs;\nexports.updatePlanBTrackIdsToSSRCs = updatePlanBTrackIdsToSSRCs;\nexports.updateUnifiedPlanTrackIdsToSSRCs = updateUnifiedPlanTrackIdsToSSRCs;","map":{"version":3,"names":["_a","require","flatMap","guessBrowser","isSdpSemanticsSupported","checkIfSdpSemanticsIsSupported","RTCPeerConnection","sdpSemantics","e","chromeSdpFormat","clearChromeCachedSdpFormat","getChromeDefaultSdpFormat","prototype","pc","addTransceiver","close","getChromeSdpFormat","getSafariSdpFormat","RTCRtpTransceiver","getSdpFormat","chrome","firefox","safari","getMatches","pattern","lines","matches","match","RegExp","reduce","results","line","add","Set","getTrackIds","sdp","getPlanBTrackIds","getUnifiedPlanTrackIds","getPlanBSSRCs","trackId","getMediaSections","kind","direction","split","slice","map","mediaSection","filter","kindPattern","directionPattern","test","getMediaSectionSSRCs","Array","from","getUnifiedPlanSSRCs","mediaSections","msidAttrRegExp","matchingMediaSections","getTrackIdsToSSRCs","getSSRCs","Map","getPlanBTrackIdsToSSRCs","getUnifiedPlanTrackIdsToSSRCs","updateTrackIdsToSSRCs","trackIdsToSSRCs","newTrackIdsToSSRCs","newSSRCsToOldSSRCs","forEach","ssrcs","has","set","oldSSRCs","get","newSSRCs","oldSSRC","i","newSSRC","replacement","replace","prefix","join","updatePlanBTrackIdsToSSRCs","updateUnifiedPlanTrackIdsToSSRCs","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/webrtc/util/sdp.js"],"sourcesContent":["/* globals RTCPeerConnection, RTCRtpTransceiver */\n\n'use strict';\n\nconst { flatMap, guessBrowser } = require('./');\n\n// NOTE(mmalavalli): We cache Chrome's sdpSemantics support in order to prevent\n// instantiation of more than one RTCPeerConnection.\nlet isSdpSemanticsSupported = null;\n\n/**\n * Check if Chrome supports specifying sdpSemantics for an RTCPeerConnection.\n * @return {boolean}\n */\nfunction checkIfSdpSemanticsIsSupported() {\n  if (typeof isSdpSemanticsSupported === 'boolean') {\n    return isSdpSemanticsSupported;\n  }\n  if (typeof RTCPeerConnection === 'undefined') {\n    isSdpSemanticsSupported = false;\n    return isSdpSemanticsSupported;\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new RTCPeerConnection({ sdpSemantics: 'foo' });\n    isSdpSemanticsSupported = false;\n  } catch (e) {\n    isSdpSemanticsSupported = true;\n  }\n  return isSdpSemanticsSupported;\n}\n\n// NOTE(mmalavalli): We cache Chrome's SDP format in order to prevent\n// instantiation of more than one RTCPeerConnection.\nlet chromeSdpFormat = null;\n\n/**\n * Clear cached Chrome's SDP format\n */\nfunction clearChromeCachedSdpFormat() {\n  chromeSdpFormat = null;\n}\n\n/**\n * Get Chrome's default SDP format.\n * @returns {'planb'|'unified'}\n */\nfunction getChromeDefaultSdpFormat() {\n  if (!chromeSdpFormat) {\n    if (typeof RTCPeerConnection !== 'undefined'\n      && 'addTransceiver' in RTCPeerConnection.prototype) {\n      const pc = new RTCPeerConnection();\n      try {\n        pc.addTransceiver('audio');\n        chromeSdpFormat = 'unified';\n      } catch (e) {\n        chromeSdpFormat = 'planb';\n      }\n      pc.close();\n    } else {\n      chromeSdpFormat = 'planb';\n    }\n  }\n  return chromeSdpFormat;\n}\n\n/**\n * Get Chrome's SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\nfunction getChromeSdpFormat(sdpSemantics) {\n  if (!sdpSemantics || !checkIfSdpSemanticsIsSupported()) {\n    return getChromeDefaultSdpFormat();\n  }\n  return {\n    'plan-b': 'planb',\n    'unified-plan': 'unified'\n  }[sdpSemantics];\n}\n\n/**\n * Get Safari's default SDP format.\n * @returns {'planb'|'unified'}\n */\nfunction getSafariSdpFormat() {\n  return typeof RTCRtpTransceiver !== 'undefined'\n    && 'currentDirection' in RTCRtpTransceiver.prototype\n    ? 'unified'\n    : 'planb';\n}\n\n/**\n * Get the browser's default SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\nfunction getSdpFormat(sdpSemantics) {\n  return {\n    chrome: getChromeSdpFormat(sdpSemantics),\n    firefox: 'unified',\n    safari: getSafariSdpFormat()\n  }[guessBrowser()] || null;\n}\n\n/**\n * Match a pattern across lines, returning the first capture group for any\n * matches.\n * @param {string} pattern\n * @param {string} lines\n * @returns {Set<string>} matches\n */\nfunction getMatches(pattern, lines) {\n  const matches = lines.match(new RegExp(pattern, 'gm')) || [];\n  return matches.reduce((results, line) => {\n    const match = line.match(new RegExp(pattern));\n    return match ? results.add(match[1]) : results;\n  }, new Set());\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from an SDP.\n * @param {string} pattern\n * @param {string} sdp\n * @returns {Set<string>}\n */\nfunction getTrackIds(pattern, sdp) {\n  return getMatches(pattern, sdp);\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Set<string>} trackIds\n */\nfunction getPlanBTrackIds(sdp) {\n  return getTrackIds('^a=ssrc:[0-9]+ +msid:.+ +(.+) *$', sdp);\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @returns {Set<string>} trackIds\n */\nfunction getUnifiedPlanTrackIds(sdp) {\n  return getTrackIds('^a=msid:.+ +(.+) *$', sdp);\n}\n\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getPlanBSSRCs(sdp, trackId) {\n  const pattern = `^a=ssrc:([0-9]+) +msid:[^ ]+ +${trackId} *$`;\n  return getMatches(pattern, sdp);\n}\n\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp -  sdp string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\nfunction getMediaSections(sdp, kind = '.*', direction = '.*') {\n  return sdp.split('\\r\\nm=').slice(1).map(mediaSection => `m=${mediaSection}`).filter(mediaSection => {\n    const kindPattern = new RegExp(`m=${kind}`, 'gm');\n    const directionPattern = new RegExp(`a=${direction}`, 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n\n/**\n * Get the Set of SSRCs announced in a MediaSection.\n * @param {string} mediaSection\n * @returns {Array<string>} ssrcs\n */\nfunction getMediaSectionSSRCs(mediaSection) {\n  return Array.from(getMatches('^a=ssrc:([0-9]+) +.*$', mediaSection));\n}\n\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getUnifiedPlanSSRCs(sdp, trackId) {\n  const mediaSections = getMediaSections(sdp);\n\n  const msidAttrRegExp = new RegExp(`^a=msid:[^ ]+ +${trackId} *$`, 'gm');\n  const matchingMediaSections = mediaSections.filter(mediaSection => mediaSection.match(msidAttrRegExp));\n\n  return new Set(flatMap(matchingMediaSections, getMediaSectionSSRCs));\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from an SDP.\n * @param {function(string): Set<string>} getTrackIds\n * @param {function(string, string): Set<string>} getSSRCs\n * @param {string} sdp - SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getTrackIdsToSSRCs(getTrackIds, getSSRCs, sdp) {\n  return new Map(Array.from(getTrackIds(sdp)).map(trackId => [trackId, getSSRCs(sdp, trackId)]));\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getPlanBTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getPlanBTrackIds, getPlanBSSRCs, sdp);\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getUnifiedPlanTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getUnifiedPlanTrackIds, getUnifiedPlanSSRCs, sdp);\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the SDP itself. This method\n * ensures that SSRCs never change once announced.\n * @param {function(string): Map<string, Set<string>>} getTrackIdsToSSRCs\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - SDP\n * @returns {strinng} updatedSdp - updated SDP\n */\nfunction updateTrackIdsToSSRCs(getTrackIdsToSSRCs, trackIdsToSSRCs, sdp) {\n  const newTrackIdsToSSRCs = getTrackIdsToSSRCs(sdp);\n  const newSSRCsToOldSSRCs = new Map();\n\n  // NOTE(mroberts): First, update a=ssrc attributes.\n  newTrackIdsToSSRCs.forEach((ssrcs, trackId) => {\n    if (!trackIdsToSSRCs.has(trackId)) {\n      trackIdsToSSRCs.set(trackId, ssrcs);\n      return;\n    }\n    const oldSSRCs = Array.from(trackIdsToSSRCs.get(trackId));\n    const newSSRCs = Array.from(ssrcs);\n    oldSSRCs.forEach((oldSSRC, i) => {\n      const newSSRC = newSSRCs[i];\n      newSSRCsToOldSSRCs.set(newSSRC, oldSSRC);\n      const pattern = `^a=ssrc:${newSSRC} (.*)$`;\n      const replacement = `a=ssrc:${oldSSRC} $1`;\n      sdp = sdp.replace(new RegExp(pattern, 'gm'), replacement);\n    });\n  });\n\n  // NOTE(mroberts): Then, update a=ssrc-group attributes.\n  const pattern = '^(a=ssrc-group:[^ ]+ +)(.*)$';\n  const matches = sdp.match(new RegExp(pattern, 'gm')) || [];\n  matches.forEach(line => {\n    const match = line.match(new RegExp(pattern));\n    if (!match) {\n      return;\n    }\n    const prefix = match[1];\n    const newSSRCs = match[2];\n    const oldSSRCs = newSSRCs.split(' ').map(newSSRC => {\n      const oldSSRC = newSSRCsToOldSSRCs.get(newSSRC);\n      return oldSSRC ? oldSSRC : newSSRC;\n    }).join(' ');\n    sdp = sdp.replace(match[0], prefix + oldSSRCs);\n  });\n\n  return sdp;\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updatePlanBTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getPlanBTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updateUnifiedPlanTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getUnifiedPlanTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n\nexports.clearChromeCachedSdpFormat = clearChromeCachedSdpFormat;\nexports.getSdpFormat = getSdpFormat;\nexports.getMediaSections = getMediaSections;\nexports.getPlanBTrackIds = getPlanBTrackIds;\nexports.getUnifiedPlanTrackIds = getUnifiedPlanTrackIds;\nexports.getPlanBSSRCs = getPlanBSSRCs;\nexports.getUnifiedPlanSSRCs = getUnifiedPlanSSRCs;\nexports.updatePlanBTrackIdsToSSRCs = updatePlanBTrackIdsToSSRCs;\nexports.updateUnifiedPlanTrackIdsToSSRCs = updateUnifiedPlanTrackIdsToSSRCs;\n"],"mappings":"AAAA;AAEA,YAAY;;AAEN,IAAAA,EAAA,GAA4BC,OAAO,CAAC,IAAI,CAAC;EAAvCC,OAAO,GAAAF,EAAA,CAAAE,OAAA;EAAEC,YAAY,GAAAH,EAAA,CAAAG,YAAkB;AAE/C;AACA;AACA,IAAIC,uBAAuB,GAAG,IAAI;AAElC;;;;AAIA,SAASC,8BAA8BA,CAAA;EACrC,IAAI,OAAOD,uBAAuB,KAAK,SAAS,EAAE;IAChD,OAAOA,uBAAuB;;EAEhC,IAAI,OAAOE,iBAAiB,KAAK,WAAW,EAAE;IAC5CF,uBAAuB,GAAG,KAAK;IAC/B,OAAOA,uBAAuB;;EAEhC,IAAI;IACF;IACA,IAAIE,iBAAiB,CAAC;MAAEC,YAAY,EAAE;IAAK,CAAE,CAAC;IAC9CH,uBAAuB,GAAG,KAAK;GAChC,CAAC,OAAOI,CAAC,EAAE;IACVJ,uBAAuB,GAAG,IAAI;;EAEhC,OAAOA,uBAAuB;AAChC;AAEA;AACA;AACA,IAAIK,eAAe,GAAG,IAAI;AAE1B;;;AAGA,SAASC,0BAA0BA,CAAA;EACjCD,eAAe,GAAG,IAAI;AACxB;AAEA;;;;AAIA,SAASE,yBAAyBA,CAAA;EAChC,IAAI,CAACF,eAAe,EAAE;IACpB,IAAI,OAAOH,iBAAiB,KAAK,WAAW,IACvC,gBAAgB,IAAIA,iBAAiB,CAACM,SAAS,EAAE;MACpD,IAAMC,EAAE,GAAG,IAAIP,iBAAiB,EAAE;MAClC,IAAI;QACFO,EAAE,CAACC,cAAc,CAAC,OAAO,CAAC;QAC1BL,eAAe,GAAG,SAAS;OAC5B,CAAC,OAAOD,CAAC,EAAE;QACVC,eAAe,GAAG,OAAO;;MAE3BI,EAAE,CAACE,KAAK,EAAE;KACX,MAAM;MACLN,eAAe,GAAG,OAAO;;;EAG7B,OAAOA,eAAe;AACxB;AAEA;;;;;AAKA,SAASO,kBAAkBA,CAACT,YAAY;EACtC,IAAI,CAACA,YAAY,IAAI,CAACF,8BAA8B,EAAE,EAAE;IACtD,OAAOM,yBAAyB,EAAE;;EAEpC,OAAO;IACL,QAAQ,EAAE,OAAO;IACjB,cAAc,EAAE;GACjB,CAACJ,YAAY,CAAC;AACjB;AAEA;;;;AAIA,SAASU,kBAAkBA,CAAA;EACzB,OAAO,OAAOC,iBAAiB,KAAK,WAAW,IAC1C,kBAAkB,IAAIA,iBAAiB,CAACN,SAAS,GAClD,SAAS,GACT,OAAO;AACb;AAEA;;;;;AAKA,SAASO,YAAYA,CAACZ,YAAY;EAChC,OAAO;IACLa,MAAM,EAAEJ,kBAAkB,CAACT,YAAY,CAAC;IACxCc,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAEL,kBAAkB;GAC3B,CAACd,YAAY,EAAE,CAAC,IAAI,IAAI;AAC3B;AAEA;;;;;;;AAOA,SAASoB,UAAUA,CAACC,OAAO,EAAEC,KAAK;EAChC,IAAMC,OAAO,GAAGD,KAAK,CAACE,KAAK,CAAC,IAAIC,MAAM,CAACJ,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;EAC5D,OAAOE,OAAO,CAACG,MAAM,CAAC,UAACC,OAAO,EAAEC,IAAI;IAClC,IAAMJ,KAAK,GAAGI,IAAI,CAACJ,KAAK,CAAC,IAAIC,MAAM,CAACJ,OAAO,CAAC,CAAC;IAC7C,OAAOG,KAAK,GAAGG,OAAO,CAACE,GAAG,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGG,OAAO;EAChD,CAAC,EAAE,IAAIG,GAAG,EAAE,CAAC;AACf;AAEA;;;;;;AAMA,SAASC,WAAWA,CAACV,OAAO,EAAEW,GAAG;EAC/B,OAAOZ,UAAU,CAACC,OAAO,EAAEW,GAAG,CAAC;AACjC;AAEA;;;;;AAKA,SAASC,gBAAgBA,CAACD,GAAG;EAC3B,OAAOD,WAAW,CAAC,kCAAkC,EAAEC,GAAG,CAAC;AAC7D;AAEA;;;;;AAKA,SAASE,sBAAsBA,CAACF,GAAG;EACjC,OAAOD,WAAW,CAAC,qBAAqB,EAAEC,GAAG,CAAC;AAChD;AAEA;;;;;;AAMA,SAASG,aAAaA,CAACH,GAAG,EAAEI,OAAO;EACjC,IAAMf,OAAO,GAAG,mCAAiCe,OAAO,QAAK;EAC7D,OAAOhB,UAAU,CAACC,OAAO,EAAEW,GAAG,CAAC;AACjC;AAEA;;;;;;;AAOA,SAASK,gBAAgBA,CAACL,GAAG,EAAEM,IAAW,EAAEC,SAAgB;EAA7B,IAAAD,IAAA;IAAAA,IAAA,OAAW;EAAA;EAAE,IAAAC,SAAA;IAAAA,SAAA,OAAgB;EAAA;EAC1D,OAAOP,GAAG,CAACQ,KAAK,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,UAAAC,YAAY;IAAI,cAAKA,YAAc;EAAnB,CAAmB,CAAC,CAACC,MAAM,CAAC,UAAAD,YAAY;IAC9F,IAAME,WAAW,GAAG,IAAIpB,MAAM,CAAC,OAAKa,IAAM,EAAE,IAAI,CAAC;IACjD,IAAMQ,gBAAgB,GAAG,IAAIrB,MAAM,CAAC,OAAKc,SAAW,EAAE,IAAI,CAAC;IAC3D,OAAOM,WAAW,CAACE,IAAI,CAACJ,YAAY,CAAC,IAAIG,gBAAgB,CAACC,IAAI,CAACJ,YAAY,CAAC;EAC9E,CAAC,CAAC;AACJ;AAEA;;;;;AAKA,SAASK,oBAAoBA,CAACL,YAAY;EACxC,OAAOM,KAAK,CAACC,IAAI,CAAC9B,UAAU,CAAC,uBAAuB,EAAEuB,YAAY,CAAC,CAAC;AACtE;AAEA;;;;;;AAMA,SAASQ,mBAAmBA,CAACnB,GAAG,EAAEI,OAAO;EACvC,IAAMgB,aAAa,GAAGf,gBAAgB,CAACL,GAAG,CAAC;EAE3C,IAAMqB,cAAc,GAAG,IAAI5B,MAAM,CAAC,oBAAkBW,OAAO,QAAK,EAAE,IAAI,CAAC;EACvE,IAAMkB,qBAAqB,GAAGF,aAAa,CAACR,MAAM,CAAC,UAAAD,YAAY;IAAI,OAAAA,YAAY,CAACnB,KAAK,CAAC6B,cAAc,CAAC;EAAlC,CAAkC,CAAC;EAEtG,OAAO,IAAIvB,GAAG,CAAC/B,OAAO,CAACuD,qBAAqB,EAAEN,oBAAoB,CAAC,CAAC;AACtE;AAEA;;;;;;;AAOA,SAASO,kBAAkBA,CAACxB,WAAW,EAAEyB,QAAQ,EAAExB,GAAG;EACpD,OAAO,IAAIyB,GAAG,CAACR,KAAK,CAACC,IAAI,CAACnB,WAAW,CAACC,GAAG,CAAC,CAAC,CAACU,GAAG,CAAC,UAAAN,OAAO;IAAI,QAACA,OAAO,EAAEoB,QAAQ,CAACxB,GAAG,EAAEI,OAAO,CAAC,CAAC;EAAjC,CAAiC,CAAC,CAAC;AAChG;AAEA;;;;;AAKA,SAASsB,uBAAuBA,CAAC1B,GAAG;EAClC,OAAOuB,kBAAkB,CAACtB,gBAAgB,EAAEE,aAAa,EAAEH,GAAG,CAAC;AACjE;AAEA;;;;;AAKA,SAAS2B,6BAA6BA,CAAC3B,GAAG;EACxC,OAAOuB,kBAAkB,CAACrB,sBAAsB,EAAEiB,mBAAmB,EAAEnB,GAAG,CAAC;AAC7E;AAEA;;;;;;;;;AASA,SAAS4B,qBAAqBA,CAACL,kBAAkB,EAAEM,eAAe,EAAE7B,GAAG;EACrE,IAAM8B,kBAAkB,GAAGP,kBAAkB,CAACvB,GAAG,CAAC;EAClD,IAAM+B,kBAAkB,GAAG,IAAIN,GAAG,EAAE;EAEpC;EACAK,kBAAkB,CAACE,OAAO,CAAC,UAACC,KAAK,EAAE7B,OAAO;IACxC,IAAI,CAACyB,eAAe,CAACK,GAAG,CAAC9B,OAAO,CAAC,EAAE;MACjCyB,eAAe,CAACM,GAAG,CAAC/B,OAAO,EAAE6B,KAAK,CAAC;MACnC;;IAEF,IAAMG,QAAQ,GAAGnB,KAAK,CAACC,IAAI,CAACW,eAAe,CAACQ,GAAG,CAACjC,OAAO,CAAC,CAAC;IACzD,IAAMkC,QAAQ,GAAGrB,KAAK,CAACC,IAAI,CAACe,KAAK,CAAC;IAClCG,QAAQ,CAACJ,OAAO,CAAC,UAACO,OAAO,EAAEC,CAAC;MAC1B,IAAMC,OAAO,GAAGH,QAAQ,CAACE,CAAC,CAAC;MAC3BT,kBAAkB,CAACI,GAAG,CAACM,OAAO,EAAEF,OAAO,CAAC;MACxC,IAAMlD,OAAO,GAAG,aAAWoD,OAAO,WAAQ;MAC1C,IAAMC,WAAW,GAAG,YAAUH,OAAO,QAAK;MAC1CvC,GAAG,GAAGA,GAAG,CAAC2C,OAAO,CAAC,IAAIlD,MAAM,CAACJ,OAAO,EAAE,IAAI,CAAC,EAAEqD,WAAW,CAAC;IAC3D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF;EACA,IAAMrD,OAAO,GAAG,8BAA8B;EAC9C,IAAME,OAAO,GAAGS,GAAG,CAACR,KAAK,CAAC,IAAIC,MAAM,CAACJ,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;EAC1DE,OAAO,CAACyC,OAAO,CAAC,UAAApC,IAAI;IAClB,IAAMJ,KAAK,GAAGI,IAAI,CAACJ,KAAK,CAAC,IAAIC,MAAM,CAACJ,OAAO,CAAC,CAAC;IAC7C,IAAI,CAACG,KAAK,EAAE;MACV;;IAEF,IAAMoD,MAAM,GAAGpD,KAAK,CAAC,CAAC,CAAC;IACvB,IAAM8C,QAAQ,GAAG9C,KAAK,CAAC,CAAC,CAAC;IACzB,IAAM4C,QAAQ,GAAGE,QAAQ,CAAC9B,KAAK,CAAC,GAAG,CAAC,CAACE,GAAG,CAAC,UAAA+B,OAAO;MAC9C,IAAMF,OAAO,GAAGR,kBAAkB,CAACM,GAAG,CAACI,OAAO,CAAC;MAC/C,OAAOF,OAAO,GAAGA,OAAO,GAAGE,OAAO;IACpC,CAAC,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;IACZ7C,GAAG,GAAGA,GAAG,CAAC2C,OAAO,CAACnD,KAAK,CAAC,CAAC,CAAC,EAAEoD,MAAM,GAAGR,QAAQ,CAAC;EAChD,CAAC,CAAC;EAEF,OAAOpC,GAAG;AACZ;AAEA;;;;;;;;AAQA,SAAS8C,0BAA0BA,CAACjB,eAAe,EAAE7B,GAAG;EACtD,OAAO4B,qBAAqB,CAACF,uBAAuB,EAAEG,eAAe,EAAE7B,GAAG,CAAC;AAC7E;AAEA;;;;;;;;AAQA,SAAS+C,gCAAgCA,CAAClB,eAAe,EAAE7B,GAAG;EAC5D,OAAO4B,qBAAqB,CAACD,6BAA6B,EAAEE,eAAe,EAAE7B,GAAG,CAAC;AACnF;AAEAgD,OAAO,CAACzE,0BAA0B,GAAGA,0BAA0B;AAC/DyE,OAAO,CAAChE,YAAY,GAAGA,YAAY;AACnCgE,OAAO,CAAC3C,gBAAgB,GAAGA,gBAAgB;AAC3C2C,OAAO,CAAC/C,gBAAgB,GAAGA,gBAAgB;AAC3C+C,OAAO,CAAC9C,sBAAsB,GAAGA,sBAAsB;AACvD8C,OAAO,CAAC7C,aAAa,GAAGA,aAAa;AACrC6C,OAAO,CAAC7B,mBAAmB,GAAGA,mBAAmB;AACjD6B,OAAO,CAACF,0BAA0B,GAAGA,0BAA0B;AAC/DE,OAAO,CAACD,gCAAgC,GAAGA,gCAAgC"},"metadata":{},"sourceType":"script","externalDependencies":[]}