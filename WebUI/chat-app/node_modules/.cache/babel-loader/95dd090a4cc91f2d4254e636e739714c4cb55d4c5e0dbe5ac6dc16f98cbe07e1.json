{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar Track = require('./');\nvar DefaultDataTrackSender = require('../../data/sender');\n/**\n * A {@link LocalDataTrack} is a {@link Track} representing data that your\n * {@link LocalParticipant} can publish to a {@link Room}.\n * @extends Track\n * @property {Track.ID} id - The {@link LocalDataTrack}'s ID\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which the {@link LocalDataTrack} will send\n *   or re-send data if not acknowledged on the underlying RTCDataChannel(s).\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the {@link LocalDataTrack} will resend data if not successfully\n *   delivered on the underlying RTCDataChannel(s).\n * @property {boolean} ordered - true if data on the {@link LocalDataTrack} is\n *   guaranteed to be sent in order.\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of times the {@link LocalDataTrack} will attempt to send\n *   data, ensuring \"reliable\" transmission.\n * @example\n * var Video = require('twilio-video');\n *\n * var localDataTrack = new Video.LocalDataTrack();\n * window.addEventListener('mousemove', function(event) {\n *   localDataTrack.send(JSON.stringify({\n *     x: e.clientX,\n *     y: e.clientY\n *   }));\n * });\n *\n * var token1 = getAccessToken();\n * Video.connect(token1, {\n *   name: 'my-cool-room',\n *   tracks: [localDataTrack]\n * });\n *\n * var token2 = getAccessToken();\n * Video.connect(token2, {\n *   name: 'my-cool-room',\n *   tracks: []\n * }).then(function(room) {\n *   room.on('trackSubscribed', function(track) {\n *     track.on('message', function(message) {\n *       console.log(JSON.parse(message)); // { x: <number>, y: <number> }\n *     });\n *   });\n * });\n */\nvar LocalDataTrack = /** @class */function (_super) {\n  __extends(LocalDataTrack, _super);\n  /**\n   * Construct a {@link LocalDataTrack}.\n   * @param {LocalDataTrackOptions} [options] - {@link LocalDataTrack} options\n   */\n  function LocalDataTrack(options) {\n    var _this = this;\n    options = Object.assign({\n      DataTrackSender: DefaultDataTrackSender,\n      maxPacketLifeTime: null,\n      maxRetransmits: null,\n      ordered: true\n    }, options);\n    var DataTrackSender = options.DataTrackSender;\n    var dataTrackSender = new DataTrackSender(options.maxPacketLifeTime, options.maxRetransmits, options.ordered);\n    _this = _super.call(this, dataTrackSender.id, 'data', options) || this;\n    Object.defineProperties(_this, {\n      _trackSender: {\n        value: dataTrackSender\n      },\n      id: {\n        enumerable: true,\n        value: dataTrackSender.id\n      },\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: options.maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: options.maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: options.ordered\n      },\n      reliable: {\n        enumerable: true,\n        value: options.maxPacketLifeTime === null && options.maxRetransmits === null\n      }\n    });\n    return _this;\n  }\n  /**\n   * Send a message over the {@link LocalDataTrack}.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {void}\n   */\n  LocalDataTrack.prototype.send = function (data) {\n    this._trackSender.send(data);\n  };\n  return LocalDataTrack;\n}(Track);\n/**\n * {@link LocalDataTrack} options\n * @typedef {LocalTrackOptions} LocalDataTrackOptions\n * @property {?number} [maxPacketLifeTime=null] - Set this to limit the time\n *   (in milliseconds) during which the LocalDataTrack will send or re-send data\n *   if not successfully delivered on the underlying RTCDataChannel(s). It is an\n *   error to specify both this and <code>maxRetransmits</code>.\n * @property {?number} [maxRetransmits=null] - Set this to limit the number of\n *   times the {@link LocalDataTrack} will send or re-send data if not\n *   acknowledged on the underlying RTCDataChannel(s). It is an error to specify\n *   both this and <code>maxPacketLifeTime</code>.\n * @property {boolean} [ordered=true] - Set this to false to allow data on the\n *   LocalDataTrack to be sent out-of-order.\n */\nmodule.exports = LocalDataTrack;","map":{"version":3,"names":["Track","require","DefaultDataTrackSender","LocalDataTrack","_super","__extends","options","_this","Object","assign","DataTrackSender","maxPacketLifeTime","maxRetransmits","ordered","dataTrackSender","call","id","defineProperties","_trackSender","value","enumerable","reliable","prototype","send","data","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/media/track/localdatatrack.js"],"sourcesContent":["'use strict';\n\nconst Track = require('./');\nconst DefaultDataTrackSender = require('../../data/sender');\n\n/**\n * A {@link LocalDataTrack} is a {@link Track} representing data that your\n * {@link LocalParticipant} can publish to a {@link Room}.\n * @extends Track\n * @property {Track.ID} id - The {@link LocalDataTrack}'s ID\n * @property {Track.Kind} kind - \"data\"\n * @property {?number} maxPacketLifeTime - If non-null, this represents a time\n *   limit (in milliseconds) during which the {@link LocalDataTrack} will send\n *   or re-send data if not acknowledged on the underlying RTCDataChannel(s).\n * @property {?number} maxRetransmits - If non-null, this represents the number\n *   of times the {@link LocalDataTrack} will resend data if not successfully\n *   delivered on the underlying RTCDataChannel(s).\n * @property {boolean} ordered - true if data on the {@link LocalDataTrack} is\n *   guaranteed to be sent in order.\n * @property {boolean} reliable - This is true if both\n *   <code>maxPacketLifeTime</code> and <code>maxRetransmits</code> are set to\n *   null. In other words, if this is true, there is no bound on packet lifetime\n *   or the number of times the {@link LocalDataTrack} will attempt to send\n *   data, ensuring \"reliable\" transmission.\n * @example\n * var Video = require('twilio-video');\n *\n * var localDataTrack = new Video.LocalDataTrack();\n * window.addEventListener('mousemove', function(event) {\n *   localDataTrack.send(JSON.stringify({\n *     x: e.clientX,\n *     y: e.clientY\n *   }));\n * });\n *\n * var token1 = getAccessToken();\n * Video.connect(token1, {\n *   name: 'my-cool-room',\n *   tracks: [localDataTrack]\n * });\n *\n * var token2 = getAccessToken();\n * Video.connect(token2, {\n *   name: 'my-cool-room',\n *   tracks: []\n * }).then(function(room) {\n *   room.on('trackSubscribed', function(track) {\n *     track.on('message', function(message) {\n *       console.log(JSON.parse(message)); // { x: <number>, y: <number> }\n *     });\n *   });\n * });\n */\nclass LocalDataTrack extends Track {\n  /**\n   * Construct a {@link LocalDataTrack}.\n   * @param {LocalDataTrackOptions} [options] - {@link LocalDataTrack} options\n   */\n  constructor(options) {\n    options = Object.assign({\n      DataTrackSender: DefaultDataTrackSender,\n      maxPacketLifeTime: null,\n      maxRetransmits: null,\n      ordered: true\n    }, options);\n\n    const DataTrackSender = options.DataTrackSender;\n    const dataTrackSender = new DataTrackSender(\n      options.maxPacketLifeTime,\n      options.maxRetransmits,\n      options.ordered);\n\n    super(dataTrackSender.id, 'data', options);\n\n    Object.defineProperties(this, {\n      _trackSender: {\n        value: dataTrackSender\n      },\n      id: {\n        enumerable: true,\n        value: dataTrackSender.id\n      },\n      maxPacketLifeTime: {\n        enumerable: true,\n        value: options.maxPacketLifeTime\n      },\n      maxRetransmits: {\n        enumerable: true,\n        value: options.maxRetransmits\n      },\n      ordered: {\n        enumerable: true,\n        value: options.ordered\n      },\n      reliable: {\n        enumerable: true,\n        value: options.maxPacketLifeTime === null\n          && options.maxRetransmits === null\n      }\n    });\n  }\n\n  /**\n   * Send a message over the {@link LocalDataTrack}.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {void}\n   */\n  send(data) {\n    this._trackSender.send(data);\n  }\n}\n\n/**\n * {@link LocalDataTrack} options\n * @typedef {LocalTrackOptions} LocalDataTrackOptions\n * @property {?number} [maxPacketLifeTime=null] - Set this to limit the time\n *   (in milliseconds) during which the LocalDataTrack will send or re-send data\n *   if not successfully delivered on the underlying RTCDataChannel(s). It is an\n *   error to specify both this and <code>maxRetransmits</code>.\n * @property {?number} [maxRetransmits=null] - Set this to limit the number of\n *   times the {@link LocalDataTrack} will send or re-send data if not\n *   acknowledged on the underlying RTCDataChannel(s). It is an error to specify\n *   both this and <code>maxPacketLifeTime</code>.\n * @property {boolean} [ordered=true] - Set this to false to allow data on the\n *   LocalDataTrack to be sent out-of-order.\n */\n\nmodule.exports = LocalDataTrack;\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAMA,KAAK,GAAGC,OAAO,CAAC,IAAI,CAAC;AAC3B,IAAMC,sBAAsB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,IAAAE,cAAA,0BAAAC,MAAA;EAA6BC,SAAA,CAAAF,cAAA,EAAAC,MAAA;EAC3B;;;;EAIA,SAAAD,eAAYG,OAAO;IAAnB,IAAAC,KAAA;IACED,OAAO,GAAGE,MAAM,CAACC,MAAM,CAAC;MACtBC,eAAe,EAAER,sBAAsB;MACvCS,iBAAiB,EAAE,IAAI;MACvBC,cAAc,EAAE,IAAI;MACpBC,OAAO,EAAE;KACV,EAAEP,OAAO,CAAC;IAEX,IAAMI,eAAe,GAAGJ,OAAO,CAACI,eAAe;IAC/C,IAAMI,eAAe,GAAG,IAAIJ,eAAe,CACzCJ,OAAO,CAACK,iBAAiB,EACzBL,OAAO,CAACM,cAAc,EACtBN,OAAO,CAACO,OAAO,CAAC;IAElBN,KAAA,GAAAH,MAAA,CAAAW,IAAA,OAAMD,eAAe,CAACE,EAAE,EAAE,MAAM,EAAEV,OAAO,CAAC;IAE1CE,MAAM,CAACS,gBAAgB,CAACV,KAAI,EAAE;MAC5BW,YAAY,EAAE;QACZC,KAAK,EAAEL;OACR;MACDE,EAAE,EAAE;QACFI,UAAU,EAAE,IAAI;QAChBD,KAAK,EAAEL,eAAe,CAACE;OACxB;MACDL,iBAAiB,EAAE;QACjBS,UAAU,EAAE,IAAI;QAChBD,KAAK,EAAEb,OAAO,CAACK;OAChB;MACDC,cAAc,EAAE;QACdQ,UAAU,EAAE,IAAI;QAChBD,KAAK,EAAEb,OAAO,CAACM;OAChB;MACDC,OAAO,EAAE;QACPO,UAAU,EAAE,IAAI;QAChBD,KAAK,EAAEb,OAAO,CAACO;OAChB;MACDQ,QAAQ,EAAE;QACRD,UAAU,EAAE,IAAI;QAChBD,KAAK,EAAEb,OAAO,CAACK,iBAAiB,KAAK,IAAI,IACpCL,OAAO,CAACM,cAAc,KAAK;;KAEnC,CAAC;;EACJ;EAEA;;;;;EAKAT,cAAA,CAAAmB,SAAA,CAAAC,IAAI,GAAJ,UAAKC,IAAI;IACP,IAAI,CAACN,YAAY,CAACK,IAAI,CAACC,IAAI,CAAC;EAC9B,CAAC;EACH,OAAArB,cAAC;AAAD,CAAC,CAzD4BH,KAAK;AA2DlC;;;;;;;;;;;;;;AAeAyB,MAAM,CAACC,OAAO,GAAGvB,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}