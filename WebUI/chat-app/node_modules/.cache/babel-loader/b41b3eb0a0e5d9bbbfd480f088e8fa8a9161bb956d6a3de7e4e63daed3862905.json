{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar DataTrackTransceiver = require('./transceiver');\nvar makeUUID = require('../util').makeUUID;\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\nvar DataTrackSender = /** @class */function (_super) {\n  __extends(DataTrackSender, _super);\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n  function DataTrackSender(maxPacketLifeTime, maxRetransmtis, ordered) {\n    var _this = _super.call(this, makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered) || this;\n    Object.defineProperties(_this, {\n      _clones: {\n        value: new Set()\n      },\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n  /**\n   * Add a cloned {@link DataTrackSender}.\n   * @private\n   * @returns {void}\n   */\n  DataTrackSender.prototype._addClone = function (clone) {\n    this._clones.add(clone);\n  };\n  /**\n   * Remove a cloned {@link DataTrackSender}.\n   * @returns {void}\n   */\n  DataTrackSender.prototype.removeClone = function (clone) {\n    this._clones.delete(clone);\n  };\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n  DataTrackSender.prototype.addDataChannel = function (dataChannel) {\n    this._dataChannels.add(dataChannel);\n    return this;\n  };\n  /**\n   * Return a new {@link DataTrackSender}. Any message sent over this\n   * {@link DataTrackSender} will also be sent over the clone. Whenever this\n   * {@link DataTrackSender} is stopped, so to will the clone.\n   * @returns {DataTrackSender}\n   */\n  DataTrackSender.prototype.clone = function () {\n    var _this = this;\n    var clone = new DataTrackSender(this.maxPacketLifeTime, this.maxRetransmits, this.ordered);\n    this._addClone(clone);\n    clone.once('stopped', function () {\n      return _this.removeClone(clone);\n    });\n    return clone;\n  };\n  /**\n   * Remove an RTCDataChannel from the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n  DataTrackSender.prototype.removeDataChannel = function (dataChannel) {\n    this._dataChannels.delete(dataChannel);\n    return this;\n  };\n  /**\n   * Send data over the {@link DataTrackSender}. Internally, this calls\n   * <code>send</code> over each of the underlying RTCDataChannels.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {this}\n   */\n  DataTrackSender.prototype.send = function (data) {\n    this._dataChannels.forEach(function (dataChannel) {\n      try {\n        dataChannel.send(data);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n    this._clones.forEach(function (clone) {\n      try {\n        clone.send(data);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n    return this;\n  };\n  DataTrackSender.prototype.stop = function () {\n    this._dataChannels.forEach(function (dataChannel) {\n      return dataChannel.close();\n    });\n    this._clones.forEach(function (clone) {\n      return clone.stop();\n    });\n    _super.prototype.stop.call(this);\n  };\n  return DataTrackSender;\n}(DataTrackTransceiver);\nmodule.exports = DataTrackSender;","map":{"version":3,"names":["DataTrackTransceiver","require","makeUUID","DataTrackSender","_super","__extends","maxPacketLifeTime","maxRetransmtis","ordered","_this","call","Object","defineProperties","_clones","value","Set","_dataChannels","prototype","_addClone","clone","add","removeClone","delete","addDataChannel","dataChannel","maxRetransmits","once","removeDataChannel","send","data","forEach","error","stop","close","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/data/sender.js"],"sourcesContent":["'use strict';\n\nconst DataTrackTransceiver = require('./transceiver');\nconst makeUUID = require('../util').makeUUID;\n\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\nclass DataTrackSender extends DataTrackTransceiver {\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n  constructor(maxPacketLifeTime, maxRetransmtis, ordered) {\n    super(makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered);\n    Object.defineProperties(this, {\n      _clones: {\n        value: new Set()\n      },\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n  }\n\n  /**\n   * Add a cloned {@link DataTrackSender}.\n   * @private\n   * @returns {void}\n   */\n  _addClone(clone) {\n    this._clones.add(clone);\n  }\n\n  /**\n   * Remove a cloned {@link DataTrackSender}.\n   * @returns {void}\n   */\n  removeClone(clone) {\n    this._clones.delete(clone);\n  }\n\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n  addDataChannel(dataChannel) {\n    this._dataChannels.add(dataChannel);\n    return this;\n  }\n\n\n  /**\n   * Return a new {@link DataTrackSender}. Any message sent over this\n   * {@link DataTrackSender} will also be sent over the clone. Whenever this\n   * {@link DataTrackSender} is stopped, so to will the clone.\n   * @returns {DataTrackSender}\n   */\n  clone() {\n    const clone = new DataTrackSender(\n      this.maxPacketLifeTime,\n      this.maxRetransmits,\n      this.ordered);\n    this._addClone(clone);\n    clone.once('stopped', () => this.removeClone(clone));\n    return clone;\n  }\n\n  /**\n   * Remove an RTCDataChannel from the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n  removeDataChannel(dataChannel) {\n    this._dataChannels.delete(dataChannel);\n    return this;\n  }\n\n  /**\n   * Send data over the {@link DataTrackSender}. Internally, this calls\n   * <code>send</code> over each of the underlying RTCDataChannels.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {this}\n   */\n  send(data) {\n    this._dataChannels.forEach(dataChannel => {\n      try {\n        dataChannel.send(data);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n    this._clones.forEach(clone => {\n      try {\n        clone.send(data);\n      } catch (error) {\n        // Do nothing.\n      }\n    });\n    return this;\n  }\n\n  stop() {\n    this._dataChannels.forEach(dataChannel => dataChannel.close());\n    this._clones.forEach(clone => clone.stop());\n    super.stop();\n  }\n}\n\nmodule.exports = DataTrackSender;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}