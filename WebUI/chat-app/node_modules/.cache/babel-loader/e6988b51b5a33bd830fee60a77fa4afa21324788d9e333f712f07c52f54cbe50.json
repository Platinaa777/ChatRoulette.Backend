{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar MediaSignaling = require('./mediasignaling');\nvar AsyncVar = require('../../util/asyncvar');\nvar Timeout = require('../../util/timeout');\nvar NETWORK_QUALITY_RESPONSE_TIME_MS = 5000;\n/**\n * @interface MediaSignalingTransport\n * @property {function(object): boolean} send\n * @emits MediaSignalingTransport#message\n */\n/**\n * The {@link MediaSignalingTransport} received a message.\n * @event MediaSignalingTransport#message\n * @param {object} message\n */\n/**\n * @interface LatencyStats\n * @property {number} jitter\n * @property {number} rtt\n * @property {number} level\n */\n/**\n * @interface FractionLostStats\n * @property {number} fractionLost\n * @property {number} level\n */\n/**\n * @interface BandwidthStats\n * @property {number} actual\n * @property {number} available\n * @property {number} level\n */\n/**\n * @interface SendOrRecvStats\n * @property {BandwidthStats} bandwidth\n * @property {FractionLostStats} fractionLost\n * @property {LatencyStats} latency\n */\n/**\n * @interface MediaLevels\n * @property {number} send\n * @property {SendOrRecvStats} sendStats\n * @property {number} recv\n * @property {SendOrRecvStats} recvStats\n */\n/**\n * @interface NetworkQualityLevels\n * @property {number} level\n * @property {MediaLevels} audio\n * @property {MediaLevels} video\n */\n/**\n * @typedef {PeerConnectionSummary} NetworkQualityInputs\n */\n/**\n * @classdesc The {@link NetworkQualitySignaling} class allows submitting\n *   {@link NetworkQualityInputs} for computing {@link NetworkQualityLevel}. It\n *   does so by sending and receiving messages over a\n *   {@link MediaSignalingTransport}. The exact transport used depends on the\n *   topology of the {@link Room} that {@link NetworkQualitySignaling} is being\n *   used within: for P2P Rooms, we re-use the {@link TransportV2}; and for\n *   Group Rooms, we use a {@link DataTransport}.\n * @emits NetworkQualitySignaling#updated\n */\nvar NetworkQualitySignaling = /** @class */function (_super) {\n  __extends(NetworkQualitySignaling, _super);\n  /**\n   * Construct a {@link NetworkQualitySignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceiver\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   */\n  function NetworkQualitySignaling(getReceiver, networkQualityConfiguration, options) {\n    var _this = _super.call(this, getReceiver, 'network_quality', options) || this;\n    Object.defineProperties(_this, {\n      _level: {\n        value: null,\n        writable: true\n      },\n      _levels: {\n        value: null,\n        writable: true\n      },\n      _remoteLevels: {\n        value: new Map(),\n        writable: true\n      },\n      _networkQualityInputs: {\n        value: new AsyncVar()\n      },\n      _resendTimer: {\n        value: new Timeout(function () {\n          // and schedule next timer at x1.5 the delay..\n          _this._resendTimer.setDelay(_this._resendTimer.delay * 1.5);\n          _this._sendNetworkQualityInputs();\n        }, NETWORK_QUALITY_RESPONSE_TIME_MS, false)\n      },\n      _networkQualityReportLevels: {\n        get: function () {\n          return {\n            reportLevel: networkQualityConfiguration.local,\n            remoteReportLevel: networkQualityConfiguration.remote\n          };\n        }\n      }\n    });\n    _this.on('ready', function (transport) {\n      transport.on('message', function (message) {\n        _this._log.debug('Incoming: ', message);\n        switch (message.type) {\n          case 'network_quality':\n            _this._handleNetworkQualityMessage(message);\n            break;\n          default:\n            break;\n        }\n      });\n    });\n    _this._sendNetworkQualityInputs();\n    return _this;\n  }\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"level\", {\n    /**\n     * Get the current {@link NetworkQualityLevel}, if any.\n     * @returns {?NetworkQualityLevel} level - initially null\n     */\n    get: function () {\n      return this._level;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"levels\", {\n    /**\n     * Get the current {@link NetworkQualityLevels}, if any.\n     * @returns {?NetworkQualityLevels} levels - initially null\n     */\n    get: function () {\n      return this._levels;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"remoteLevels\", {\n    /**\n     * Get the current {@link NetworkQualityLevels} of remote participants, if any.\n     * @returns {Map<String, NetworkQualityLevels>} remoteLevels\n     */\n    get: function () {\n      return this._remoteLevels;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Check to see if the {@link NetworkQualityLevel} is new, and raise an\n   * event if necessary.\n   * @private\n   * @param {object} message\n   * @returns {void}\n   */\n  NetworkQualitySignaling.prototype._handleNetworkQualityMessage = function (message) {\n    var _this = this;\n    var updated = false;\n    var level = null;\n    var local = message ? message.local : null;\n    if (typeof local === 'number') {\n      // NOTE(mroberts): In prod, we plan to only send the level.\n      level = local;\n      this._levels = null;\n    } else if (typeof local === 'object' && local) {\n      // NOTE(mroberts): In dev, we plan to send the decomposed levels. An early\n      // VMS version does not compute `level` for us, so we fallback to taking\n      // the minimum ourselves.\n      this._levels = local;\n      level = typeof local.level === 'number' ? local.level : Math.min(local.audio.send, local.audio.recv, local.video.send, local.video.recv);\n    }\n    if (level !== null && this.level !== level) {\n      this._level = level;\n      updated = true;\n    }\n    this._remoteLevels = message && message.remotes ? message.remotes.reduce(function (levels, obj) {\n      var oldObj = _this._remoteLevels.get(obj.sid) || {};\n      if (oldObj.level !== obj.level) {\n        updated = true;\n      }\n      return levels.set(obj.sid, obj);\n    }, new Map()) : this._remoteLevels;\n    if (updated) {\n      this.emit('updated');\n    }\n    // score is received. so reset the timer to default timeout.\n    this._resendTimer.setDelay(NETWORK_QUALITY_RESPONSE_TIME_MS);\n    // timer is cleared only while we are sending inputs.\n    // if we are already sending inputs do not send them again.\n    if (this._resendTimer.isSet) {\n      setTimeout(function () {\n        return _this._sendNetworkQualityInputs();\n      }, 1000);\n    }\n  };\n  /**\n   * Start sending {@link NetworkQualityInputs}.\n   * @private\n   * @returns {Promise<void>}\n   */\n  NetworkQualitySignaling.prototype._sendNetworkQualityInputs = function () {\n    var _this = this;\n    this._resendTimer.clear();\n    return this._networkQualityInputs.take().then(function (networkQualityInputs) {\n      if (_this._transport) {\n        _this._transport.publish(createNetworkQualityInputsMessage(networkQualityInputs, _this._networkQualityReportLevels));\n      }\n    }).finally(function () {\n      _this._resendTimer.start();\n    });\n  };\n  /**\n   * Put {@link NetworkQualityInputs} to be used for computing\n   * {@link NetworkQualityLevel}.\n   * @param {NetworkQualityInputs} networkQualityInputs\n   * @returns {void}\n   */\n  NetworkQualitySignaling.prototype.put = function (networkQualityInputs) {\n    this._networkQualityInputs.put(networkQualityInputs);\n  };\n  return NetworkQualitySignaling;\n}(MediaSignaling);\n/**\n * The {@link NetworkQualityLevel} changed.\n * @event NetworkQualitySignaling#updated\n */\n/**\n * @typedef {object} NetworkQualityReportLevels\n * @param {number} reportLevel\n * @param {number} remoteReportLevel\n */\n/**\n * @param {NetworkQualityInputs} networkQualityInputs\n * @param {NetworkQualityReportLevels} networkQualityReportLevels\n * @returns {object} message\n */\nfunction createNetworkQualityInputsMessage(networkQualityInputs, networkQualityReportLevels) {\n  return Object.assign({\n    type: 'network_quality'\n  }, networkQualityInputs, networkQualityReportLevels);\n}\nmodule.exports = NetworkQualitySignaling;","map":{"version":3,"names":["MediaSignaling","require","AsyncVar","Timeout","NETWORK_QUALITY_RESPONSE_TIME_MS","NetworkQualitySignaling","_super","__extends","getReceiver","networkQualityConfiguration","options","_this","call","Object","defineProperties","_level","value","writable","_levels","_remoteLevels","Map","_networkQualityInputs","_resendTimer","setDelay","delay","_sendNetworkQualityInputs","_networkQualityReportLevels","get","reportLevel","local","remoteReportLevel","remote","on","transport","message","_log","debug","type","_handleNetworkQualityMessage","defineProperty","prototype","updated","level","Math","min","audio","send","recv","video","remotes","reduce","levels","obj","oldObj","sid","set","emit","isSet","setTimeout","clear","take","then","networkQualityInputs","_transport","publish","createNetworkQualityInputsMessage","finally","start","put","networkQualityReportLevels","assign","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/signaling/v2/networkqualitysignaling.js"],"sourcesContent":["'use strict';\n\nconst MediaSignaling = require('./mediasignaling');\nconst AsyncVar = require('../../util/asyncvar');\nconst Timeout = require('../../util/timeout');\n\nconst NETWORK_QUALITY_RESPONSE_TIME_MS = 5000;\n\n/**\n * @interface MediaSignalingTransport\n * @property {function(object): boolean} send\n * @emits MediaSignalingTransport#message\n */\n\n/**\n * The {@link MediaSignalingTransport} received a message.\n * @event MediaSignalingTransport#message\n * @param {object} message\n */\n\n/**\n * @interface LatencyStats\n * @property {number} jitter\n * @property {number} rtt\n * @property {number} level\n */\n\n/**\n * @interface FractionLostStats\n * @property {number} fractionLost\n * @property {number} level\n */\n\n/**\n * @interface BandwidthStats\n * @property {number} actual\n * @property {number} available\n * @property {number} level\n */\n\n/**\n * @interface SendOrRecvStats\n * @property {BandwidthStats} bandwidth\n * @property {FractionLostStats} fractionLost\n * @property {LatencyStats} latency\n */\n\n/**\n * @interface MediaLevels\n * @property {number} send\n * @property {SendOrRecvStats} sendStats\n * @property {number} recv\n * @property {SendOrRecvStats} recvStats\n */\n\n/**\n * @interface NetworkQualityLevels\n * @property {number} level\n * @property {MediaLevels} audio\n * @property {MediaLevels} video\n */\n\n/**\n * @typedef {PeerConnectionSummary} NetworkQualityInputs\n */\n\n/**\n * @classdesc The {@link NetworkQualitySignaling} class allows submitting\n *   {@link NetworkQualityInputs} for computing {@link NetworkQualityLevel}. It\n *   does so by sending and receiving messages over a\n *   {@link MediaSignalingTransport}. The exact transport used depends on the\n *   topology of the {@link Room} that {@link NetworkQualitySignaling} is being\n *   used within: for P2P Rooms, we re-use the {@link TransportV2}; and for\n *   Group Rooms, we use a {@link DataTransport}.\n * @emits NetworkQualitySignaling#updated\n */\nclass NetworkQualitySignaling extends MediaSignaling {\n  /**\n   * Construct a {@link NetworkQualitySignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceiver\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   */\n  constructor(getReceiver, networkQualityConfiguration, options) {\n    super(getReceiver, 'network_quality', options);\n\n    Object.defineProperties(this, {\n      _level: {\n        value: null,\n        writable: true\n      },\n      _levels: {\n        value: null,\n        writable: true\n      },\n      _remoteLevels: {\n        value: new Map(),\n        writable: true\n      },\n      _networkQualityInputs: {\n        value: new AsyncVar()\n      },\n      _resendTimer: {\n        value: new Timeout(() => {\n          // and schedule next timer at x1.5 the delay..\n          this._resendTimer.setDelay(this._resendTimer.delay * 1.5);\n          this._sendNetworkQualityInputs();\n        }, NETWORK_QUALITY_RESPONSE_TIME_MS, false),\n      },\n      _networkQualityReportLevels: {\n        get() {\n          return {\n            reportLevel: networkQualityConfiguration.local,\n            remoteReportLevel: networkQualityConfiguration.remote\n          };\n        }\n      }\n    });\n\n    this.on('ready', transport => {\n      transport.on('message', message => {\n        this._log.debug('Incoming: ', message);\n        switch (message.type) {\n          case 'network_quality':\n            this._handleNetworkQualityMessage(message);\n            break;\n          default:\n            break;\n        }\n      });\n    });\n\n    this._sendNetworkQualityInputs();\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevel}, if any.\n   * @returns {?NetworkQualityLevel} level - initially null\n   */\n  get level() {\n    return this._level;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevels}, if any.\n   * @returns {?NetworkQualityLevels} levels - initially null\n   */\n  get levels() {\n    return this._levels;\n  }\n\n  /**\n   * Get the current {@link NetworkQualityLevels} of remote participants, if any.\n   * @returns {Map<String, NetworkQualityLevels>} remoteLevels\n   */\n  get remoteLevels() {\n    return this._remoteLevels;\n  }\n\n  /**\n   * Check to see if the {@link NetworkQualityLevel} is new, and raise an\n   * event if necessary.\n   * @private\n   * @param {object} message\n   * @returns {void}\n   */\n  _handleNetworkQualityMessage(message) {\n    let updated = false;\n    let level = null;\n    const local = message ? message.local : null;\n    if (typeof local === 'number') {\n      // NOTE(mroberts): In prod, we plan to only send the level.\n      level = local;\n      this._levels = null;\n    } else if (typeof local === 'object' && local) {\n      // NOTE(mroberts): In dev, we plan to send the decomposed levels. An early\n      // VMS version does not compute `level` for us, so we fallback to taking\n      // the minimum ourselves.\n      this._levels = local;\n      level = typeof local.level === 'number'\n        ? local.level\n        : Math.min(\n          local.audio.send,\n          local.audio.recv,\n          local.video.send,\n          local.video.recv);\n    }\n    if (level !== null && this.level !== level) {\n      this._level = level;\n      updated = true;\n    }\n    this._remoteLevels = message && message.remotes\n      ? message.remotes.reduce((levels, obj) => {\n        const oldObj = this._remoteLevels.get(obj.sid) || {};\n        if (oldObj.level !== obj.level) {\n          updated = true;\n        }\n        return levels.set(obj.sid, obj);\n      }, new Map())\n      : this._remoteLevels;\n\n    if (updated) {\n      this.emit('updated');\n    }\n\n\n    // score is received. so reset the timer to default timeout.\n    this._resendTimer.setDelay(NETWORK_QUALITY_RESPONSE_TIME_MS);\n\n    // timer is cleared only while we are sending inputs.\n    // if we are already sending inputs do not send them again.\n    if (this._resendTimer.isSet) {\n      setTimeout(() => this._sendNetworkQualityInputs(), 1000);\n    }\n  }\n\n  /**\n   * Start sending {@link NetworkQualityInputs}.\n   * @private\n   * @returns {Promise<void>}\n   */\n  _sendNetworkQualityInputs() {\n    this._resendTimer.clear();\n    return this._networkQualityInputs.take().then(networkQualityInputs => {\n      if (this._transport) {\n        this._transport.publish(\n          createNetworkQualityInputsMessage(networkQualityInputs, this._networkQualityReportLevels));\n      }\n    }).finally(() => {\n      this._resendTimer.start();\n    });\n  }\n\n  /**\n   * Put {@link NetworkQualityInputs} to be used for computing\n   * {@link NetworkQualityLevel}.\n   * @param {NetworkQualityInputs} networkQualityInputs\n   * @returns {void}\n   */\n  put(networkQualityInputs) {\n    this._networkQualityInputs.put(networkQualityInputs);\n  }\n}\n\n/**\n * The {@link NetworkQualityLevel} changed.\n * @event NetworkQualitySignaling#updated\n */\n\n/**\n * @typedef {object} NetworkQualityReportLevels\n * @param {number} reportLevel\n * @param {number} remoteReportLevel\n */\n\n/**\n * @param {NetworkQualityInputs} networkQualityInputs\n * @param {NetworkQualityReportLevels} networkQualityReportLevels\n * @returns {object} message\n */\nfunction createNetworkQualityInputsMessage(networkQualityInputs, networkQualityReportLevels) {\n  return Object.assign(\n    { type: 'network_quality' },\n    networkQualityInputs,\n    networkQualityReportLevels);\n}\n\nmodule.exports = NetworkQualitySignaling;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}