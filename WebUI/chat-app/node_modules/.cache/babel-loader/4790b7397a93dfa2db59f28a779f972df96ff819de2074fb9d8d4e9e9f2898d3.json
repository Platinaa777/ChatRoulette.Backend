{"ast":null,"code":"'use strict';\n\n// Cached copy of the <canvas> used to check silent video frames.\nvar canvas = null;\nvar N_SAMPLES = 3;\nvar SAMPLE_HEIGHT = 50;\nvar SAMPLE_INTERVAL_MS = 250;\nvar SAMPLE_WIDTH = 50;\n/**\n * Check whether the current video frame is silent by selecting a 50x50\n * sample and calculating the max value of the pixel data. If it is 0, then\n * the frame is considered to be silent.\n * @private\n * @param {HTMLVideoElement} el\n * @returns {boolean} true if silent, false if not\n */\nfunction checkSilence(el) {\n  try {\n    var context = canvas.getContext('2d');\n    context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    var frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    var frameDataWithoutAlpha = frame.data.filter(function (item, i) {\n      return (i + 1) % 4;\n    });\n    var max = Math.max.apply(Math, frameDataWithoutAlpha);\n    return max === 0;\n  } catch (ex) {\n    // eslint-disable-next-line no-console\n    console.log('Error checking silence: ', ex);\n    return false;\n  }\n}\n/**\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\n * @param {HTMLVideoElement} el\n * @returns {Promise<boolean>} true if silent, false if not.\n */\nfunction detectSilentVideo(el) {\n  // Create the canvas when detectSilentVideo() is called for the\n  // first time.\n  canvas = canvas || document.createElement('canvas');\n  // Resolve the returned Promise with true if 3 consecutive sample\n  // frames from the video being played by the HTMLVideoElement are\n  // silent.\n  return new Promise(function (resolve) {\n    var samplesLeft = N_SAMPLES;\n    setTimeout(function doCheckSilence() {\n      samplesLeft--;\n      if (!checkSilence(el)) {\n        return resolve(false);\n      }\n      if (samplesLeft > 0) {\n        return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\n      }\n      return resolve(true);\n    }, SAMPLE_INTERVAL_MS);\n  });\n}\nmodule.exports = detectSilentVideo;","map":{"version":3,"names":["canvas","N_SAMPLES","SAMPLE_HEIGHT","SAMPLE_INTERVAL_MS","SAMPLE_WIDTH","checkSilence","el","context","getContext","drawImage","frame","getImageData","frameDataWithoutAlpha","data","filter","item","i","max","Math","apply","ex","console","log","detectSilentVideo","document","createElement","Promise","resolve","samplesLeft","setTimeout","doCheckSilence","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/util/detectsilentvideo.js"],"sourcesContent":["'use strict';\n\n// Cached copy of the <canvas> used to check silent video frames.\nlet canvas = null;\n\nconst N_SAMPLES = 3;\nconst SAMPLE_HEIGHT = 50;\nconst SAMPLE_INTERVAL_MS = 250;\nconst SAMPLE_WIDTH = 50;\n\n/**\n * Check whether the current video frame is silent by selecting a 50x50\n * sample and calculating the max value of the pixel data. If it is 0, then\n * the frame is considered to be silent.\n * @private\n * @param {HTMLVideoElement} el\n * @returns {boolean} true if silent, false if not\n */\nfunction checkSilence(el) {\n  try {\n    const context = canvas.getContext('2d');\n    context.drawImage(el, 0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    const frame = context.getImageData(0, 0, SAMPLE_WIDTH, SAMPLE_HEIGHT);\n    const frameDataWithoutAlpha = frame.data.filter((item, i) => (i + 1) % 4);\n    const max = Math.max.apply(Math, frameDataWithoutAlpha);\n    return max === 0;\n  } catch (ex) {\n    // eslint-disable-next-line no-console\n    console.log('Error checking silence: ', ex);\n    return false;\n  }\n\n}\n\n/**\n * Detect whether the video stream rendered by the given HTMLVideoElement is silent.\n * @param {HTMLVideoElement} el\n * @returns {Promise<boolean>} true if silent, false if not.\n */\nfunction detectSilentVideo(el) {\n  // Create the canvas when detectSilentVideo() is called for the\n  // first time.\n  canvas = canvas || document.createElement('canvas');\n\n  // Resolve the returned Promise with true if 3 consecutive sample\n  // frames from the video being played by the HTMLVideoElement are\n  // silent.\n  return new Promise(resolve => {\n    let samplesLeft = N_SAMPLES;\n    setTimeout(function doCheckSilence() {\n      samplesLeft--;\n      if (!checkSilence(el)) {\n        return resolve(false);\n      }\n      if (samplesLeft > 0) {\n        return setTimeout(doCheckSilence, SAMPLE_INTERVAL_MS);\n      }\n      return resolve(true);\n    }, SAMPLE_INTERVAL_MS);\n  });\n}\n\nmodule.exports = detectSilentVideo;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,IAAIA,MAAM,GAAG,IAAI;AAEjB,IAAMC,SAAS,GAAG,CAAC;AACnB,IAAMC,aAAa,GAAG,EAAE;AACxB,IAAMC,kBAAkB,GAAG,GAAG;AAC9B,IAAMC,YAAY,GAAG,EAAE;AAEvB;;;;;;;;AAQA,SAASC,YAAYA,CAACC,EAAE;EACtB,IAAI;IACF,IAAMC,OAAO,GAAGP,MAAM,CAACQ,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACE,SAAS,CAACH,EAAE,EAAE,CAAC,EAAE,CAAC,EAAEF,YAAY,EAAEF,aAAa,CAAC;IACxD,IAAMQ,KAAK,GAAGH,OAAO,CAACI,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEP,YAAY,EAAEF,aAAa,CAAC;IACrE,IAAMU,qBAAqB,GAAGF,KAAK,CAACG,IAAI,CAACC,MAAM,CAAC,UAACC,IAAI,EAAEC,CAAC;MAAK,QAACA,CAAC,GAAG,CAAC,IAAI,CAAC;IAAX,CAAW,CAAC;IACzE,IAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAACE,KAAK,CAACD,IAAI,EAAEN,qBAAqB,CAAC;IACvD,OAAOK,GAAG,KAAK,CAAC;GACjB,CAAC,OAAOG,EAAE,EAAE;IACX;IACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,EAAE,CAAC;IAC3C,OAAO,KAAK;;AAGhB;AAEA;;;;;AAKA,SAASG,iBAAiBA,CAACjB,EAAE;EAC3B;EACA;EACAN,MAAM,GAAGA,MAAM,IAAIwB,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAEnD;EACA;EACA;EACA,OAAO,IAAIC,OAAO,CAAC,UAAAC,OAAO;IACxB,IAAIC,WAAW,GAAG3B,SAAS;IAC3B4B,UAAU,CAAC,SAASC,cAAcA,CAAA;MAChCF,WAAW,EAAE;MACb,IAAI,CAACvB,YAAY,CAACC,EAAE,CAAC,EAAE;QACrB,OAAOqB,OAAO,CAAC,KAAK,CAAC;;MAEvB,IAAIC,WAAW,GAAG,CAAC,EAAE;QACnB,OAAOC,UAAU,CAACC,cAAc,EAAE3B,kBAAkB,CAAC;;MAEvD,OAAOwB,OAAO,CAAC,IAAI,CAAC;IACtB,CAAC,EAAExB,kBAAkB,CAAC;EACxB,CAAC,CAAC;AACJ;AAEA4B,MAAM,CAACC,OAAO,GAAGT,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}