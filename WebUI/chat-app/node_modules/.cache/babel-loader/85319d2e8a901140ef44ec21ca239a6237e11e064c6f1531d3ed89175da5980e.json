{"ast":null,"code":"'use strict';\n\nvar _a = require('./util/constants'),\n  DEFAULT_LOG_LEVEL = _a.DEFAULT_LOG_LEVEL,\n  DEFAULT_LOGGER_NAME = _a.DEFAULT_LOGGER_NAME;\n/**\n * Request a {@link LocalAudioTrack} or {@link LocalVideoTrack}.\n * @param {Track.Kind} kind - \"audio\" or \"video\"\n * @param {CreateLocalTrackOptions} [options]\n * @returns {Promise<LocalAudioTrack|LocalVideoTrack>}\n * @private\n */\nfunction createLocalTrack(kind, options) {\n  options = Object.assign({\n    loggerName: DEFAULT_LOGGER_NAME,\n    logLevel: DEFAULT_LOG_LEVEL\n  }, options);\n  var createOptions = {};\n  createOptions.loggerName = options.loggerName;\n  createOptions.logLevel = options.logLevel;\n  delete options.loggerName;\n  delete options.logLevel;\n  var createLocalTracks = options.createLocalTracks;\n  delete options.createLocalTracks;\n  createOptions[kind] = Object.keys(options).length > 0 ? options : true;\n  return createLocalTracks(createOptions).then(function (localTracks) {\n    return localTracks[0];\n  });\n}\n/**\n * Request a {@link LocalAudioTrack}.\n * @alias module:twilio-video.createLocalAudioTrack\n * @param {CreateLocalTracksOptions|CreateLocalAudioTrackOptions} [options] - Options for requesting a {@link LocalAudioTrack}\n * @returns {Promise<LocalAudioTrack>}\n * @example\n * var Video = require('twilio-video');\n *\n * // Connect to the Room with just video\n * Video.connect('my-token', {\n *   name: 'my-cool-room',\n *   video: true\n * }).then(function(room) {\n *   // Add audio after connecting to the Room\n *   Video.createLocalAudioTrack().then(function(localTrack) {\n *     room.localParticipant.publishTrack(localTrack);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n *\n * // Request the LocalAudioTrack with a custom name\n * // and krisp noise cancellation\n * Video.createLocalAudioTrack({\n *   name: 'microphone',\n *   noiseCancellationOptions: {\n *      vendor: 'krisp',\n *      sdkAssetsPath: '/twilio-krisp-audio-plugin/1.0.0/dist'\n *   }\n * });\n */\nfunction createLocalAudioTrack(options) {\n  return createLocalTrack('audio', options);\n}\n/**\n * Request a {@link LocalVideoTrack}. Note that on mobile browsers,\n * the camera can be reserved by only one {@link LocalVideoTrack} at any given\n * time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalVideoTrack\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalVideoTrack}\n * @returns {Promise<LocalVideoTrack>}\n * @example\n * var Video = require('twilio-video');\n *\n * // Connect to the Room with just audio\n * Video.connect('my-token', {\n *   name: 'my-cool-room',\n *   audio: true\n * }).then(function(room) {\n *   // Add video after connecting to the Room\n *   Video.createLocalVideoTrack().then(function(localTrack) {\n *     room.localParticipant.publishTrack(localTrack);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n *\n * // Request the default LocalVideoTrack with a custom name\n * Video.createLocalVideoTrack({ name: 'camera' }).then(function(localTrack) {\n *   console.log(localTrack.name); // 'camera'\n * });\n */\nfunction createLocalVideoTrack(options) {\n  return createLocalTrack('video', options);\n}\n/**\n * {@link NoiseCancellationVendor} specifies the 3rd party plugin to use for noise cancellation.\n * @enum {string}\n */\n// eslint-disable-next-line\nvar NoiseCancellationVendor = {\n  /**\n   * This plugin can be found by requesting access with this form {@link https://forms.gle/eeFyoGJj1mgMrxN88}\n   */\n  krisp: 'krisp'\n};\n/**\n * You can use 3rd party noise cancellation plugin when creating {@link LocalAudioTrack}\n * By specifying these options. This is a beta feature.\n * @typedef {object} NoiseCancellationOptions\n * @property {NoiseCancellationVendor} vendor - Specifies the vendor library to use\n *   You need to obtain and host the library files on your web server.\n * @property {string} sdkAssetsPath - Specifies path where vendor library files are\n *   hosted on your web server.\n */\n/**\n * Create {@link LocalAudioTrack} options.\n * @typedef {CreateLocalTrackOptions} CreateLocalAudioTrackOptions\n * @property {boolean} [workaroundWebKitBug180748=false] - setting this\n *   attempts to workaround WebKit Bug 180748, where, in Safari, getUserMedia may return a silent audio\n *   MediaStreamTrack.\n * @property {DefaultDeviceCaptureMode} [defaultDeviceCaptureMode=\"auto\"] - This optional property only applies if the\n *   {@link LocalAudioTrack} is capturing from the default audio input device connected to a desktop or laptop. When the\n *   property is set to \"auto\", the LocalAudioTrack restarts whenever the default audio input device changes, in order to\n *   capture audio from the new default audio input device. For example, when a bluetooth audio headset is connected to a\n *   Macbook, the LocalAudioTrack will start capturing audio from the headset microphone. When the headset is disconnected,\n *   the LocalAudioTrack will start capturing audio from the Macbook microphone. When the property is set to \"manual\", the\n *   LocalAudioTrack continues to capture from the same audio input device even after the default audio input device changes.\n *   When the property is not specified, it defaults to \"auto\".\n * @property {NoiseCancellationOptions} [noiseCancellationOptions] - This optional property enables using 3rd party plugins\n *   for noise cancellation.\n */\n/**\n * Create {@link LocalTrack} options. Apart from the properties listed here, you can\n * also specify any of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\" target=\"_blank\">MediaTrackConstraints</a>\n * properties.\n * @typedef {MediaTrackConstraints} CreateLocalTrackOptions\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\n *   Set the default log verbosity\n *   of logging. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\n *   See [examples](module-twilio-video.html#.connect) for details.\n * @property {string} [name] - The {@link LocalTrack}'s name; by default,\n *   it is set to the {@link LocalTrack}'s ID.\n */\nmodule.exports = {\n  audio: createLocalAudioTrack,\n  video: createLocalVideoTrack\n};","map":{"version":3,"names":["_a","require","DEFAULT_LOG_LEVEL","DEFAULT_LOGGER_NAME","createLocalTrack","kind","options","Object","assign","loggerName","logLevel","createOptions","createLocalTracks","keys","length","then","localTracks","createLocalAudioTrack","createLocalVideoTrack","NoiseCancellationVendor","krisp","module","exports","audio","video"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/createlocaltrack.js"],"sourcesContent":["'use strict';\n\nconst { DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME } = require('./util/constants');\n\n/**\n * Request a {@link LocalAudioTrack} or {@link LocalVideoTrack}.\n * @param {Track.Kind} kind - \"audio\" or \"video\"\n * @param {CreateLocalTrackOptions} [options]\n * @returns {Promise<LocalAudioTrack|LocalVideoTrack>}\n * @private\n */\nfunction createLocalTrack(kind, options) {\n  options = Object.assign({\n    loggerName: DEFAULT_LOGGER_NAME,\n    logLevel: DEFAULT_LOG_LEVEL,\n  }, options);\n\n  const createOptions = {};\n  createOptions.loggerName = options.loggerName;\n  createOptions.logLevel = options.logLevel;\n  delete options.loggerName;\n  delete options.logLevel;\n\n  const createLocalTracks = options.createLocalTracks;\n  delete options.createLocalTracks;\n  createOptions[kind] = Object.keys(options).length > 0 ? options : true;\n\n  return createLocalTracks(createOptions).then(localTracks => localTracks[0]);\n}\n\n/**\n * Request a {@link LocalAudioTrack}.\n * @alias module:twilio-video.createLocalAudioTrack\n * @param {CreateLocalTracksOptions|CreateLocalAudioTrackOptions} [options] - Options for requesting a {@link LocalAudioTrack}\n * @returns {Promise<LocalAudioTrack>}\n * @example\n * var Video = require('twilio-video');\n *\n * // Connect to the Room with just video\n * Video.connect('my-token', {\n *   name: 'my-cool-room',\n *   video: true\n * }).then(function(room) {\n *   // Add audio after connecting to the Room\n *   Video.createLocalAudioTrack().then(function(localTrack) {\n *     room.localParticipant.publishTrack(localTrack);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n *\n * // Request the LocalAudioTrack with a custom name\n * // and krisp noise cancellation\n * Video.createLocalAudioTrack({\n *   name: 'microphone',\n *   noiseCancellationOptions: {\n *      vendor: 'krisp',\n *      sdkAssetsPath: '/twilio-krisp-audio-plugin/1.0.0/dist'\n *   }\n * });\n */\nfunction createLocalAudioTrack(options) {\n  return createLocalTrack('audio', options);\n}\n\n/**\n * Request a {@link LocalVideoTrack}. Note that on mobile browsers,\n * the camera can be reserved by only one {@link LocalVideoTrack} at any given\n * time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalVideoTrack\n * @param {CreateLocalTrackOptions} [options] - Options for requesting a {@link LocalVideoTrack}\n * @returns {Promise<LocalVideoTrack>}\n * @example\n * var Video = require('twilio-video');\n *\n * // Connect to the Room with just audio\n * Video.connect('my-token', {\n *   name: 'my-cool-room',\n *   audio: true\n * }).then(function(room) {\n *   // Add video after connecting to the Room\n *   Video.createLocalVideoTrack().then(function(localTrack) {\n *     room.localParticipant.publishTrack(localTrack);\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n *\n * // Request the default LocalVideoTrack with a custom name\n * Video.createLocalVideoTrack({ name: 'camera' }).then(function(localTrack) {\n *   console.log(localTrack.name); // 'camera'\n * });\n */\nfunction createLocalVideoTrack(options) {\n  return createLocalTrack('video', options);\n}\n\n/**\n * {@link NoiseCancellationVendor} specifies the 3rd party plugin to use for noise cancellation.\n * @enum {string}\n */\n// eslint-disable-next-line\nconst NoiseCancellationVendor = {\n  /**\n   * This plugin can be found by requesting access with this form {@link https://forms.gle/eeFyoGJj1mgMrxN88}\n   */\n  krisp: 'krisp',\n};\n\n/**\n * You can use 3rd party noise cancellation plugin when creating {@link LocalAudioTrack}\n * By specifying these options. This is a beta feature.\n * @typedef {object} NoiseCancellationOptions\n * @property {NoiseCancellationVendor} vendor - Specifies the vendor library to use\n *   You need to obtain and host the library files on your web server.\n * @property {string} sdkAssetsPath - Specifies path where vendor library files are\n *   hosted on your web server.\n */\n\n/**\n * Create {@link LocalAudioTrack} options.\n * @typedef {CreateLocalTrackOptions} CreateLocalAudioTrackOptions\n * @property {boolean} [workaroundWebKitBug180748=false] - setting this\n *   attempts to workaround WebKit Bug 180748, where, in Safari, getUserMedia may return a silent audio\n *   MediaStreamTrack.\n * @property {DefaultDeviceCaptureMode} [defaultDeviceCaptureMode=\"auto\"] - This optional property only applies if the\n *   {@link LocalAudioTrack} is capturing from the default audio input device connected to a desktop or laptop. When the\n *   property is set to \"auto\", the LocalAudioTrack restarts whenever the default audio input device changes, in order to\n *   capture audio from the new default audio input device. For example, when a bluetooth audio headset is connected to a\n *   Macbook, the LocalAudioTrack will start capturing audio from the headset microphone. When the headset is disconnected,\n *   the LocalAudioTrack will start capturing audio from the Macbook microphone. When the property is set to \"manual\", the\n *   LocalAudioTrack continues to capture from the same audio input device even after the default audio input device changes.\n *   When the property is not specified, it defaults to \"auto\".\n * @property {NoiseCancellationOptions} [noiseCancellationOptions] - This optional property enables using 3rd party plugins\n *   for noise cancellation.\n */\n\n/**\n * Create {@link LocalTrack} options. Apart from the properties listed here, you can\n * also specify any of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\" target=\"_blank\">MediaTrackConstraints</a>\n * properties.\n * @typedef {MediaTrackConstraints} CreateLocalTrackOptions\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\n *   Set the default log verbosity\n *   of logging. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\n *   See [examples](module-twilio-video.html#.connect) for details.\n * @property {string} [name] - The {@link LocalTrack}'s name; by default,\n *   it is set to the {@link LocalTrack}'s ID.\n */\n\nmodule.exports = {\n  audio: createLocalAudioTrack,\n  video: createLocalVideoTrack\n};\n"],"mappings":"AAAA,YAAY;;AAEN,IAAAA,EAAA,GAA6CC,OAAO,CAAC,kBAAkB,CAAC;EAAtEC,iBAAiB,GAAAF,EAAA,CAAAE,iBAAA;EAAEC,mBAAmB,GAAAH,EAAA,CAAAG,mBAAgC;AAE9E;;;;;;;AAOA,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,OAAO;EACrCA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC;IACtBC,UAAU,EAAEN,mBAAmB;IAC/BO,QAAQ,EAAER;GACX,EAAEI,OAAO,CAAC;EAEX,IAAMK,aAAa,GAAG,EAAE;EACxBA,aAAa,CAACF,UAAU,GAAGH,OAAO,CAACG,UAAU;EAC7CE,aAAa,CAACD,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;EACzC,OAAOJ,OAAO,CAACG,UAAU;EACzB,OAAOH,OAAO,CAACI,QAAQ;EAEvB,IAAME,iBAAiB,GAAGN,OAAO,CAACM,iBAAiB;EACnD,OAAON,OAAO,CAACM,iBAAiB;EAChCD,aAAa,CAACN,IAAI,CAAC,GAAGE,MAAM,CAACM,IAAI,CAACP,OAAO,CAAC,CAACQ,MAAM,GAAG,CAAC,GAAGR,OAAO,GAAG,IAAI;EAEtE,OAAOM,iBAAiB,CAACD,aAAa,CAAC,CAACI,IAAI,CAAC,UAAAC,WAAW;IAAI,OAAAA,WAAW,CAAC,CAAC,CAAC;EAAd,CAAc,CAAC;AAC7E;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAASC,qBAAqBA,CAACX,OAAO;EACpC,OAAOF,gBAAgB,CAAC,OAAO,EAAEE,OAAO,CAAC;AAC3C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAASY,qBAAqBA,CAACZ,OAAO;EACpC,OAAOF,gBAAgB,CAAC,OAAO,EAAEE,OAAO,CAAC;AAC3C;AAEA;;;;AAIA;AACA,IAAMa,uBAAuB,GAAG;EAC9B;;;EAGAC,KAAK,EAAE;CACR;AAED;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;AAiBAC,MAAM,CAACC,OAAO,GAAG;EACfC,KAAK,EAAEN,qBAAqB;EAC5BO,KAAK,EAAEN;CACR"},"metadata":{},"sourceType":"script","externalDependencies":[]}