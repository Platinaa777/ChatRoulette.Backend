{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar MediaTrack = require('./mediatrack');\n/**\n * An {@link AudioTrack} is a {@link Track} representing audio.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link AudioTrack} has\n *   started; if the {@link AudioTrack} started, there is enough audio data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link AudioTrack} is\n *   enabled; if the {@link AudioTrack} is not enabled, it is \"muted\"\n * @property {Track.Kind} kind - \"audio\"\n * @property {MediaStreamTrack} mediaStreamTrack - An audio MediaStreamTrack\n * @property {?MediaStreamTrack} processedTrack - The source of processed audio samples.\n * It is always null as audio processing is not currently supported.\n * @emits AudioTrack#disabled\n * @emits AudioTrack#enabled\n * @emits AudioTrack#started\n */\nvar AudioTrack = /** @class */function (_super) {\n  __extends(AudioTrack, _super);\n  /**\n   * Construct an {@link AudioTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n  function AudioTrack(mediaTrackTransceiver, options) {\n    return _super.call(this, mediaTrackTransceiver, options) || this;\n  }\n  /**\n   * Create an HTMLAudioElement and attach the {@link AudioTrack} to it.\n   *\n   * The HTMLAudioElement's <code>srcObject</code> will be set to a new\n   * MediaStream containing the {@link AudioTrack}'s MediaStreamTrack.\n   *\n   * @returns {HTMLAudioElement} audioElement\n   * @example\n   * const Video = require('twilio-video');\n   *\n   * Video.createLocalAudioTrack().then(function(audioTrack) {\n   *   const audioElement = audioTrack.attach();\n   *   document.body.appendChild(audioElement);\n   * });\n  */ /**\n     * Attach the {@link AudioTrack} to an existing HTMLMediaElement. The\n     * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n     *\n     * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n     * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\n     * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n     * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n     * MediaStreamTracks of the same kind on the MediaStream, this method removes\n     * them.\n     *\n     * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n     * @returns {HTMLMediaElement} mediaElement\n     * @example\n     * const Video = require('twilio-video');\n     *\n     * const videoElement = document.createElement('video');\n     * document.body.appendChild(videoElement);\n     *\n     * Video.createLocalAudioTrack().then(function(audioTrack) {\n     *   audioTrack.attach(videoElement);\n     * });\n     */ /**\n        * Attach the {@link AudioTrack} to an HTMLMediaElement selected by\n        * <code>document.querySelector</code>. The HTMLMediaElement could be an\n        * HTMLAudioElement or an HTMLVideoElement.\n        *\n        * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n        * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\n        * MediaStreamTrack; otherwise, it adds the {@link AudioTrack}'s\n        * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n        * MediaStreamTracks of the same kind on the MediaStream, this method removes\n        * them.\n        *\n        * @param {string} selector - A query selector for the HTMLMediaElement to\n        *   attach to\n        * @returns {HTMLMediaElement} mediaElement\n        * @example\n        * const Video = require('twilio-video');\n        *\n        * const videoElement = document.createElement('video');\n        * videoElement.id = 'my-video-element';\n        * document.body.appendChild(videoElement);\n        *\n        * Video.createLocalAudioTrack().then(function(track) {\n        *   track.attach('#my-video-element');\n        * });\n        */\n  AudioTrack.prototype.attach = function () {\n    return _super.prototype.attach.apply(this, arguments);\n  };\n  /**\n   * Detach the {@link AudioTrack} from all previously attached HTMLMediaElements.\n   * @returns {Array<HTMLMediaElement>} mediaElements\n   * @example\n   * const mediaElements = audioTrack.detach();\n   * mediaElements.forEach(mediaElement => mediaElement.remove());\n  */ /**\n     * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement.\n     * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n     *   which the {@link AudioTrack} is attached\n     * @returns {HTMLMediaElement} mediaElement\n     * @example\n     * const videoElement = document.getElementById('my-video-element');\n     * audioTrack.detach(videoElement).remove();\n     */ /**\n        * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement\n        *   specified by <code>document.querySelector</code>.\n        * @param {string} selector - The query selector of HTMLMediaElement to which\n        *    the {@link AudioTrack} is attached\n        * @returns {HTMLMediaElement} mediaElement\n        * @example\n        * audioTrack.detach('#my-video-element').remove();\n        */\n  AudioTrack.prototype.detach = function () {\n    return _super.prototype.detach.apply(this, arguments);\n  };\n  return AudioTrack;\n}(MediaTrack);\n/**\n * The {@link AudioTrack} was disabled, i.e. \"muted\".\n * @param {AudioTrack} track - The {@link AudioTrack} that was disabled\n * @event AudioTrack#disabled\n */\n/**\n * The {@link AudioTrack} was enabled, i.e. \"unmuted\".\n * @param {AudioTrack} track - The {@link AudioTrack} that was enabled\n * @event AudioTrack#enabled\n */\n/**\n * The {@link AudioTrack} started. This means there is enough audio data to\n * begin playback.\n * @param {AudioTrack} track - The {@link AudioTrack} that started\n * @event AudioTrack#started\n */\nmodule.exports = AudioTrack;","map":{"version":3,"names":["MediaTrack","require","AudioTrack","_super","__extends","mediaTrackTransceiver","options","call","prototype","attach","apply","arguments","detach","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/media/track/audiotrack.js"],"sourcesContent":["'use strict';\n\nconst MediaTrack = require('./mediatrack');\n\n/**\n * An {@link AudioTrack} is a {@link Track} representing audio.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link AudioTrack} has\n *   started; if the {@link AudioTrack} started, there is enough audio data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link AudioTrack} is\n *   enabled; if the {@link AudioTrack} is not enabled, it is \"muted\"\n * @property {Track.Kind} kind - \"audio\"\n * @property {MediaStreamTrack} mediaStreamTrack - An audio MediaStreamTrack\n * @property {?MediaStreamTrack} processedTrack - The source of processed audio samples.\n * It is always null as audio processing is not currently supported.\n * @emits AudioTrack#disabled\n * @emits AudioTrack#enabled\n * @emits AudioTrack#started\n */\nclass AudioTrack extends MediaTrack {\n  /**\n   * Construct an {@link AudioTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n  constructor(mediaTrackTransceiver, options) {\n    super(mediaTrackTransceiver, options);\n  }\n\n  /**\n   * Create an HTMLAudioElement and attach the {@link AudioTrack} to it.\n   *\n   * The HTMLAudioElement's <code>srcObject</code> will be set to a new\n   * MediaStream containing the {@link AudioTrack}'s MediaStreamTrack.\n   *\n   * @returns {HTMLAudioElement} audioElement\n   * @example\n   * const Video = require('twilio-video');\n   *\n   * Video.createLocalAudioTrack().then(function(audioTrack) {\n   *   const audioElement = audioTrack.attach();\n   *   document.body.appendChild(audioElement);\n   * });\n  *//**\n   * Attach the {@link AudioTrack} to an existing HTMLMediaElement. The\n   * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n   *\n   * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n   * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\n   * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n   * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n   * MediaStreamTracks of the same kind on the MediaStream, this method removes\n   * them.\n   *\n   * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n   * @returns {HTMLMediaElement} mediaElement\n   * @example\n   * const Video = require('twilio-video');\n   *\n   * const videoElement = document.createElement('video');\n   * document.body.appendChild(videoElement);\n   *\n   * Video.createLocalAudioTrack().then(function(audioTrack) {\n   *   audioTrack.attach(videoElement);\n   * });\n  *//**\n   * Attach the {@link AudioTrack} to an HTMLMediaElement selected by\n   * <code>document.querySelector</code>. The HTMLMediaElement could be an\n   * HTMLAudioElement or an HTMLVideoElement.\n   *\n   * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n   * this method sets it to a new MediaStream containing the {@link AudioTrack}'s\n   * MediaStreamTrack; otherwise, it adds the {@link AudioTrack}'s\n   * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n   * MediaStreamTracks of the same kind on the MediaStream, this method removes\n   * them.\n   *\n   * @param {string} selector - A query selector for the HTMLMediaElement to\n   *   attach to\n   * @returns {HTMLMediaElement} mediaElement\n   * @example\n   * const Video = require('twilio-video');\n   *\n   * const videoElement = document.createElement('video');\n   * videoElement.id = 'my-video-element';\n   * document.body.appendChild(videoElement);\n   *\n   * Video.createLocalAudioTrack().then(function(track) {\n   *   track.attach('#my-video-element');\n   * });\n   */\n  attach() {\n    return super.attach.apply(this, arguments);\n  }\n\n  /**\n   * Detach the {@link AudioTrack} from all previously attached HTMLMediaElements.\n   * @returns {Array<HTMLMediaElement>} mediaElements\n   * @example\n   * const mediaElements = audioTrack.detach();\n   * mediaElements.forEach(mediaElement => mediaElement.remove());\n  *//**\n   * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement.\n   * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n   *   which the {@link AudioTrack} is attached\n   * @returns {HTMLMediaElement} mediaElement\n   * @example\n   * const videoElement = document.getElementById('my-video-element');\n   * audioTrack.detach(videoElement).remove();\n  *//**\n   * Detach the {@link AudioTrack} from a previously attached HTMLMediaElement\n   *   specified by <code>document.querySelector</code>.\n   * @param {string} selector - The query selector of HTMLMediaElement to which\n   *    the {@link AudioTrack} is attached\n   * @returns {HTMLMediaElement} mediaElement\n   * @example\n   * audioTrack.detach('#my-video-element').remove();\n   */\n  detach() {\n    return super.detach.apply(this, arguments);\n  }\n}\n\n/**\n * The {@link AudioTrack} was disabled, i.e. \"muted\".\n * @param {AudioTrack} track - The {@link AudioTrack} that was disabled\n * @event AudioTrack#disabled\n */\n\n/**\n * The {@link AudioTrack} was enabled, i.e. \"unmuted\".\n * @param {AudioTrack} track - The {@link AudioTrack} that was enabled\n * @event AudioTrack#enabled\n */\n\n/**\n * The {@link AudioTrack} started. This means there is enough audio data to\n * begin playback.\n * @param {AudioTrack} track - The {@link AudioTrack} that started\n * @event AudioTrack#started\n */\n\nmodule.exports = AudioTrack;\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAE1C;;;;;;;;;;;;;;;;AAgBA,IAAAC,UAAA,0BAAAC,MAAA;EAAyBC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EACvB;;;;;EAKA,SAAAD,WAAYG,qBAAqB,EAAEC,OAAO;WACxCH,MAAA,CAAAI,IAAA,OAAMF,qBAAqB,EAAEC,OAAO,CAAC;EACvC;EAEA;;;;;;;;;;;;;;IAAA,CAcE;;;;;;;;;;;;;;;;;;;;;;OAAA,CAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BFJ,UAAA,CAAAM,SAAA,CAAAC,MAAM,GAAN;IACE,OAAON,MAAA,CAAAK,SAAA,CAAMC,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC5C,CAAC;EAED;;;;;;IAAA,CAME;;;;;;;;OAAA,CAQA;;;;;;;;;EASFT,UAAA,CAAAM,SAAA,CAAAI,MAAM,GAAN;IACE,OAAOT,MAAA,CAAAK,SAAA,CAAMI,MAAM,CAACF,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC5C,CAAC;EACH,OAAAT,UAAC;AAAD,CAAC,CAtGwBF,UAAU;AAwGnC;;;;;AAMA;;;;;AAMA;;;;;;AAOAa,MAAM,CAACC,OAAO,GAAGZ,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}