{"ast":null,"code":"/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n/* istanbul ignore file */\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\nvar noop = function () {};\nvar undefinedType = \"undefined\";\nvar isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\nvar logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n// Cross-browser bind equivalent that works at least back to IE6\nfunction bindMethod(obj, methodName) {\n  var method = obj[methodName];\n  if (typeof method.bind === 'function') {\n    return method.bind(obj);\n  } else {\n    try {\n      return Function.prototype.bind.call(method, obj);\n    } catch (e) {\n      // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n      return function () {\n        return Function.prototype.apply.apply(method, [obj, arguments]);\n      };\n    }\n  }\n}\n// Trace() doesn't print the message in IE, so for that case we need to wrap it\nfunction traceForIE() {\n  if (console.log) {\n    if (console.log.apply) {\n      console.log.apply(console, arguments);\n    } else {\n      // In old IE, native console methods themselves don't have apply().\n      Function.prototype.apply.apply(console.log, [console, arguments]);\n    }\n  }\n  if (console.trace) console.trace();\n}\n// Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\nfunction realMethod(methodName) {\n  if (methodName === 'debug') {\n    methodName = 'log';\n  }\n  if (typeof console === undefinedType) {\n    return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n  } else if (methodName === 'trace' && isIE) {\n    return traceForIE;\n  } else if (console[methodName] !== undefined) {\n    return bindMethod(console, methodName);\n  } else if (console.log !== undefined) {\n    return bindMethod(console, 'log');\n  } else {\n    return noop;\n  }\n}\n// These private functions always need `this` to be set properly\nfunction replaceLoggingMethods(level, loggerName) {\n  /*jshint validthis:true */\n  for (var i = 0; i < logMethods.length; i++) {\n    var methodName = logMethods[i];\n    this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n  }\n  // Define log.log as an alias for log.debug\n  this.log = this.debug;\n}\n// In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n  return function () {\n    if (typeof console !== undefinedType) {\n      replaceLoggingMethods.call(this, level, loggerName);\n      this[methodName].apply(this, arguments);\n    }\n  };\n}\n// By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\nfunction defaultMethodFactory(methodName, level, loggerName) {\n  /*jshint validthis:true */\n  return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\nfunction Logger(name, defaultLevel, factory) {\n  var self = this;\n  var currentLevel;\n  var storageKey = \"loglevel\";\n  if (typeof name === \"string\") {\n    storageKey += \":\" + name;\n  } else if (typeof name === \"symbol\") {\n    storageKey = undefined;\n  }\n  function persistLevelIfPossible(levelNum) {\n    var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n    if (typeof window === undefinedType || !storageKey) return;\n    // Use localStorage if available\n    try {\n      window.localStorage[storageKey] = levelName;\n      return;\n    } catch (ignore) {}\n    // Use session cookie as fallback\n    try {\n      window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n    } catch (ignore) {}\n  }\n  function getPersistedLevel() {\n    var storedLevel;\n    if (typeof window === undefinedType || !storageKey) return;\n    try {\n      storedLevel = window.localStorage[storageKey];\n    } catch (ignore) {}\n    // Fallback to cookies if local storage gives us nothing\n    if (typeof storedLevel === undefinedType) {\n      try {\n        var cookie = window.document.cookie;\n        var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n        if (location !== -1) {\n          storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n        }\n      } catch (ignore) {}\n    }\n    // If the stored level is not valid, treat it as if nothing was stored.\n    if (self.levels[storedLevel] === undefined) {\n      storedLevel = undefined;\n    }\n    return storedLevel;\n  }\n  /*\n   *\n   * Public logger API - see https://github.com/pimterry/loglevel for details\n   *\n   */\n  self.name = name;\n  self.levels = {\n    \"TRACE\": 0,\n    \"DEBUG\": 1,\n    \"INFO\": 2,\n    \"WARN\": 3,\n    \"ERROR\": 4,\n    \"SILENT\": 5\n  };\n  self.methodFactory = factory || defaultMethodFactory;\n  self.getLevel = function () {\n    return currentLevel;\n  };\n  self.setLevel = function (level, persist) {\n    if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n      level = self.levels[level.toUpperCase()];\n    }\n    if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n      currentLevel = level;\n      if (persist !== false) {\n        // defaults to true\n        persistLevelIfPossible(level);\n      }\n      replaceLoggingMethods.call(self, level, name);\n      if (typeof console === undefinedType && level < self.levels.SILENT) {\n        return \"No console available for logging\";\n      }\n    } else {\n      throw \"log.setLevel() called with invalid level: \" + level;\n    }\n  };\n  self.setDefaultLevel = function (level) {\n    if (!getPersistedLevel()) {\n      self.setLevel(level, false);\n    }\n  };\n  self.enableAll = function (persist) {\n    self.setLevel(self.levels.TRACE, persist);\n  };\n  self.disableAll = function (persist) {\n    self.setLevel(self.levels.SILENT, persist);\n  };\n  // Initialize with the right level\n  var initialLevel = getPersistedLevel();\n  if (initialLevel == null) {\n    initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n  }\n  self.setLevel(initialLevel, false);\n}\n/*\n *\n * Top-level API\n *\n */\nvar defaultLogger = new Logger();\nvar _loggersByName = {};\ndefaultLogger.getLogger = function getLogger(name) {\n  if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n    throw new TypeError(\"You must supply a name when creating a logger.\");\n  }\n  var logger = _loggersByName[name];\n  if (!logger) {\n    logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n  }\n  return logger;\n};\n// Grab the current global log variable in case of overwrite\nvar _log = typeof window !== undefinedType ? window.log : undefined;\ndefaultLogger.noConflict = function () {\n  if (typeof window !== undefinedType && window.log === defaultLogger) {\n    window.log = _log;\n  }\n  return defaultLogger;\n};\ndefaultLogger.getLoggers = function getLoggers() {\n  return _loggersByName;\n};\n// ES6 default export, for compatibility\ndefaultLogger['default'] = defaultLogger;\nmodule.exports = defaultLogger;","map":{"version":3,"names":["noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","level","loggerName","i","length","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","self","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","getLevel","setLevel","persist","SILENT","setDefaultLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/vendor/loglevel.js"],"sourcesContent":["/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n\n/* istanbul ignore file */\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\nvar noop = function() {};\nvar undefinedType = \"undefined\";\nvar isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n    /Trident\\/|MSIE /.test(window.navigator.userAgent)\n);\n\nvar logMethods = [\n    \"trace\",\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\"\n];\n\n// Cross-browser bind equivalent that works at least back to IE6\nfunction bindMethod(obj, methodName) {\n    var method = obj[methodName];\n    if (typeof method.bind === 'function') {\n        return method.bind(obj);\n    } else {\n        try {\n            return Function.prototype.bind.call(method, obj);\n        } catch (e) {\n            // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n            return function() {\n                return Function.prototype.apply.apply(method, [obj, arguments]);\n            };\n        }\n    }\n}\n\n// Trace() doesn't print the message in IE, so for that case we need to wrap it\nfunction traceForIE() {\n    if (console.log) {\n        if (console.log.apply) {\n            console.log.apply(console, arguments);\n        } else {\n            // In old IE, native console methods themselves don't have apply().\n            Function.prototype.apply.apply(console.log, [console, arguments]);\n        }\n    }\n    if (console.trace) console.trace();\n}\n\n// Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\nfunction realMethod(methodName) {\n    if (methodName === 'debug') {\n        methodName = 'log';\n    }\n\n    if (typeof console === undefinedType) {\n        return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n    } else if (methodName === 'trace' && isIE) {\n        return traceForIE;\n    } else if (console[methodName] !== undefined) {\n        return bindMethod(console, methodName);\n    } else if (console.log !== undefined) {\n        return bindMethod(console, 'log');\n    } else {\n        return noop;\n    }\n}\n\n// These private functions always need `this` to be set properly\n\nfunction replaceLoggingMethods(level, loggerName) {\n    /*jshint validthis:true */\n    for (var i = 0; i < logMethods.length; i++) {\n        var methodName = logMethods[i];\n        this[methodName] = (i < level) ?\n            noop :\n            this.methodFactory(methodName, level, loggerName);\n    }\n\n    // Define log.log as an alias for log.debug\n    this.log = this.debug;\n}\n\n// In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n    return function () {\n        if (typeof console !== undefinedType) {\n            replaceLoggingMethods.call(this, level, loggerName);\n            this[methodName].apply(this, arguments);\n        }\n    };\n}\n\n// By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\nfunction defaultMethodFactory(methodName, level, loggerName) {\n    /*jshint validthis:true */\n    return realMethod(methodName) ||\n           enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\n\nfunction Logger(name, defaultLevel, factory) {\n  var self = this;\n  var currentLevel;\n\n  var storageKey = \"loglevel\";\n  if (typeof name === \"string\") {\n    storageKey += \":\" + name;\n  } else if (typeof name === \"symbol\") {\n    storageKey = undefined;\n  }\n\n  function persistLevelIfPossible(levelNum) {\n      var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n      if (typeof window === undefinedType || !storageKey) return;\n\n      // Use localStorage if available\n      try {\n          window.localStorage[storageKey] = levelName;\n          return;\n      } catch (ignore) {}\n\n      // Use session cookie as fallback\n      try {\n          window.document.cookie =\n            encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n      } catch (ignore) {}\n  }\n\n  function getPersistedLevel() {\n      var storedLevel;\n\n      if (typeof window === undefinedType || !storageKey) return;\n\n      try {\n          storedLevel = window.localStorage[storageKey];\n      } catch (ignore) {}\n\n      // Fallback to cookies if local storage gives us nothing\n      if (typeof storedLevel === undefinedType) {\n          try {\n              var cookie = window.document.cookie;\n              var location = cookie.indexOf(\n                  encodeURIComponent(storageKey) + \"=\");\n              if (location !== -1) {\n                  storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n              }\n          } catch (ignore) {}\n      }\n\n      // If the stored level is not valid, treat it as if nothing was stored.\n      if (self.levels[storedLevel] === undefined) {\n          storedLevel = undefined;\n      }\n\n      return storedLevel;\n  }\n\n  /*\n   *\n   * Public logger API - see https://github.com/pimterry/loglevel for details\n   *\n   */\n\n  self.name = name;\n\n  self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n      \"ERROR\": 4, \"SILENT\": 5};\n\n  self.methodFactory = factory || defaultMethodFactory;\n\n  self.getLevel = function () {\n      return currentLevel;\n  };\n\n  self.setLevel = function (level, persist) {\n      if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n          level = self.levels[level.toUpperCase()];\n      }\n      if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n          currentLevel = level;\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(level);\n          }\n          replaceLoggingMethods.call(self, level, name);\n          if (typeof console === undefinedType && level < self.levels.SILENT) {\n              return \"No console available for logging\";\n          }\n      } else {\n          throw \"log.setLevel() called with invalid level: \" + level;\n      }\n  };\n\n  self.setDefaultLevel = function (level) {\n      if (!getPersistedLevel()) {\n          self.setLevel(level, false);\n      }\n  };\n\n  self.enableAll = function(persist) {\n      self.setLevel(self.levels.TRACE, persist);\n  };\n\n  self.disableAll = function(persist) {\n      self.setLevel(self.levels.SILENT, persist);\n  };\n\n  // Initialize with the right level\n  var initialLevel = getPersistedLevel();\n  if (initialLevel == null) {\n      initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n  }\n  self.setLevel(initialLevel, false);\n}\n\n/*\n *\n * Top-level API\n *\n */\n\nvar defaultLogger = new Logger();\n\nvar _loggersByName = {};\ndefaultLogger.getLogger = function getLogger(name) {\n    if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n      throw new TypeError(\"You must supply a name when creating a logger.\");\n    }\n\n    var logger = _loggersByName[name];\n    if (!logger) {\n      logger = _loggersByName[name] = new Logger(\n        name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n    }\n    return logger;\n};\n\n// Grab the current global log variable in case of overwrite\nvar _log = (typeof window !== undefinedType) ? window.log : undefined;\ndefaultLogger.noConflict = function() {\n    if (typeof window !== undefinedType &&\n           window.log === defaultLogger) {\n        window.log = _log;\n    }\n\n    return defaultLogger;\n};\n\ndefaultLogger.getLoggers = function getLoggers() {\n    return _loggersByName;\n};\n\n// ES6 default export, for compatibility\ndefaultLogger['default'] = defaultLogger;\n\nmodule.exports = defaultLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}