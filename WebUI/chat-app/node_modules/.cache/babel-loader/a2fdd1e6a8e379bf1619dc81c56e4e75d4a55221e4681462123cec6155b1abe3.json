{"ast":null,"code":"'use strict';\n\n/**\n * RTCRtpSender shim.\n * @param {MediaStreamTrack} track\n * @property {MediaStreamTrack} track\n */\nvar RTCRtpSenderShim = /** @class */function () {\n  function RTCRtpSenderShim(track) {\n    Object.defineProperties(this, {\n      track: {\n        enumerable: true,\n        value: track,\n        writable: true\n      }\n    });\n  }\n  return RTCRtpSenderShim;\n}();\n// NOTE(mmalavalli): Because of the way we will be using this shim, there\n// are a couple of use cases that will not be covered:\n//\n// /* Case 1 */\n// const sender = pc.addTrack(track);\n// assert.equal(sender.track, track);\n// pc.removeTrack(sender);\n// assert.equal(sender.track, null); /* Error */\n//\n// /* Case 2 */\n// const sender = pc.addTrack(track);\n// const senders1 = new Set(pc.getSenders());\n// assert(senders1.has(sender));\n// pc.removeTrack(track);\n// const senders2 = new Set(pc.getSenders());\n// assert(senders2.has(sender)); /* Error */\n//\n// For now, since we only use senders for passing them to RTCPeerConnection#removeTrack(),\n// we will omit handling these use cases for now, and revisit them when we start\n// using the RTCRtpSender APIs.\nmodule.exports = RTCRtpSenderShim;","map":{"version":3,"names":["RTCRtpSenderShim","track","Object","defineProperties","enumerable","value","writable","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/webrtc/rtcrtpsender.js"],"sourcesContent":["'use strict';\n\n/**\n * RTCRtpSender shim.\n * @param {MediaStreamTrack} track\n * @property {MediaStreamTrack} track\n */\nclass RTCRtpSenderShim {\n  constructor(track) {\n    Object.defineProperties(this, {\n      track: {\n        enumerable: true,\n        value: track,\n        writable: true\n      }\n    });\n  }\n}\n\n// NOTE(mmalavalli): Because of the way we will be using this shim, there\n// are a couple of use cases that will not be covered:\n//\n// /* Case 1 */\n// const sender = pc.addTrack(track);\n// assert.equal(sender.track, track);\n// pc.removeTrack(sender);\n// assert.equal(sender.track, null); /* Error */\n//\n// /* Case 2 */\n// const sender = pc.addTrack(track);\n// const senders1 = new Set(pc.getSenders());\n// assert(senders1.has(sender));\n// pc.removeTrack(track);\n// const senders2 = new Set(pc.getSenders());\n// assert(senders2.has(sender)); /* Error */\n//\n// For now, since we only use senders for passing them to RTCPeerConnection#removeTrack(),\n// we will omit handling these use cases for now, and revisit them when we start\n// using the RTCRtpSender APIs.\n\nmodule.exports = RTCRtpSenderShim;\n"],"mappings":"AAAA,YAAY;;AAEZ;;;;;AAKA,IAAAA,gBAAA;EACE,SAAAA,iBAAYC,KAAK;IACfC,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC5BF,KAAK,EAAE;QACLG,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAEJ,KAAK;QACZK,QAAQ,EAAE;;KAEb,CAAC;EACJ;EACF,OAAAN,gBAAC;AAAD,CAAC,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAO,MAAM,CAACC,OAAO,GAAGR,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}