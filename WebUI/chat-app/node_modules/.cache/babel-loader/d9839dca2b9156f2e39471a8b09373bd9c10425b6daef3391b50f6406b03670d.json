{"ast":null,"code":"'use strict';\n\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\nvar MovingAverageDelta = /** @class */function () {\n  /**\n   * Constructor.\n   */\n  function MovingAverageDelta() {\n    Object.defineProperties(this, {\n      _samples: {\n        value: [{\n          denominator: 0,\n          numerator: 0\n        }, {\n          denominator: 0,\n          numerator: 0\n        }]\n      }\n    });\n  }\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n  MovingAverageDelta.prototype.get = function () {\n    var samples = this._samples;\n    var denominatorDelta = samples[1].denominator - samples[0].denominator || Infinity;\n    var numeratorDelta = samples[1].numerator - samples[0].numerator;\n    return numeratorDelta / denominatorDelta;\n  };\n  /**\n   * Put a sample and get rid of the older sample to maintain sample size of 2.\n   * @param numerator\n   * @param denominator\n   */\n  MovingAverageDelta.prototype.putSample = function (numerator, denominator) {\n    var samples = this._samples;\n    samples.shift();\n    samples.push({\n      denominator: denominator,\n      numerator: numerator\n    });\n  };\n  return MovingAverageDelta;\n}();\nmodule.exports = MovingAverageDelta;","map":{"version":3,"names":["MovingAverageDelta","Object","defineProperties","_samples","value","denominator","numerator","prototype","get","samples","denominatorDelta","Infinity","numeratorDelta","putSample","shift","push","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/util/movingaveragedelta.js"],"sourcesContent":["'use strict';\n\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\nclass MovingAverageDelta {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    Object.defineProperties(this, {\n      _samples: {\n        value: [\n          { denominator: 0, numerator: 0 },\n          { denominator: 0, numerator: 0 }\n        ],\n      }\n    });\n  }\n\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n  get() {\n    const { _samples: samples } = this;\n    const denominatorDelta = (samples[1].denominator - samples[0].denominator) || Infinity;\n    const numeratorDelta = samples[1].numerator - samples[0].numerator;\n    return numeratorDelta / denominatorDelta;\n  }\n\n  /**\n   * Put a sample and get rid of the older sample to maintain sample size of 2.\n   * @param numerator\n   * @param denominator\n   */\n  putSample(numerator, denominator) {\n    const { _samples: samples } = this;\n    samples.shift();\n    samples.push({ denominator, numerator });\n  }\n}\n\nmodule.exports = MovingAverageDelta;\n"],"mappings":"AAAA,YAAY;;AAEZ;;;;;;;AAOA,IAAAA,kBAAA;EACE;;;EAGA,SAAAA,mBAAA;IACEC,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC5BC,QAAQ,EAAE;QACRC,KAAK,EAAE,CACL;UAAEC,WAAW,EAAE,CAAC;UAAEC,SAAS,EAAE;QAAC,CAAE,EAChC;UAAED,WAAW,EAAE,CAAC;UAAEC,SAAS,EAAE;QAAC,CAAE;;KAGrC,CAAC;EACJ;EAEA;;;;EAIAN,kBAAA,CAAAO,SAAA,CAAAC,GAAG,GAAH;IACU,IAAUC,OAAO,GAAK,IAAI,CAAAN,QAAT;IACzB,IAAMO,gBAAgB,GAAID,OAAO,CAAC,CAAC,CAAC,CAACJ,WAAW,GAAGI,OAAO,CAAC,CAAC,CAAC,CAACJ,WAAW,IAAKM,QAAQ;IACtF,IAAMC,cAAc,GAAGH,OAAO,CAAC,CAAC,CAAC,CAACH,SAAS,GAAGG,OAAO,CAAC,CAAC,CAAC,CAACH,SAAS;IAClE,OAAOM,cAAc,GAAGF,gBAAgB;EAC1C,CAAC;EAED;;;;;EAKAV,kBAAA,CAAAO,SAAA,CAAAM,SAAS,GAAT,UAAUP,SAAS,EAAED,WAAW;IACtB,IAAUI,OAAO,GAAK,IAAI,CAAAN,QAAT;IACzBM,OAAO,CAACK,KAAK,EAAE;IACfL,OAAO,CAACM,IAAI,CAAC;MAAEV,WAAW,EAAAA,WAAA;MAAEC,SAAS,EAAAA;IAAA,CAAE,CAAC;EAC1C,CAAC;EACH,OAAAN,kBAAC;AAAD,CAAC,CApCD;AAsCAgB,MAAM,CAACC,OAAO,GAAGjB,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}