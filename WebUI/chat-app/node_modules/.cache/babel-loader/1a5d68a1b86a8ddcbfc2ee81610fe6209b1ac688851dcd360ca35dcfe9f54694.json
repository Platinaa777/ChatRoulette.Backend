{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar MediaStreamTrack = require('./webrtc').MediaStreamTrack;\nvar _a = require('./util'),\n  asLocalTrack = _a.asLocalTrack,\n  asLocalTrackPublication = _a.asLocalTrackPublication,\n  trackClass = _a.trackClass;\nvar _b = require('./util/constants'),\n  E = _b.typeErrors,\n  trackPriority = _b.trackPriority;\nvar validateLocalTrack = require('./util/validate').validateLocalTrack;\nvar _c = require('./media/track/es5'),\n  LocalAudioTrack = _c.LocalAudioTrack,\n  LocalDataTrack = _c.LocalDataTrack,\n  LocalVideoTrack = _c.LocalVideoTrack;\nvar LocalAudioTrackPublication = require('./media/track/localaudiotrackpublication');\nvar LocalDataTrackPublication = require('./media/track/localdatatrackpublication');\nvar LocalVideoTrackPublication = require('./media/track/localvideotrackpublication');\nvar Participant = require('./participant');\n/**\n * A {@link LocalParticipant} represents the local {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, LocalAudioTrackPublication>} audioTracks -\n *    The {@link LocalParticipant}'s {@link LocalAudioTrackPublication}s\n * @property {Map<Track.SID, LocalDataTrackPublication>} dataTracks -\n *    The {@link LocalParticipant}'s {@link LocalDataTrackPublication}s\n * @property {Map<Track.SID, LocalTrackPublication>} tracks -\n *    The {@link LocalParticipant}'s {@link LocalTrackPublication}s\n * @property {Map<Track.SID, LocalVideoTrackPublication>} videoTracks -\n *    The {@link LocalParticipant}'s {@link LocalVideoTrackPublication}s\n * @property {string} signalingRegion - The geographical region of the\n *     signaling edge the {@link LocalParticipant} is connected to.\n *\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits LocalParticipant#trackDimensionsChanged\n * @emits LocalParticipant#trackDisabled\n * @emits LocalParticipant#trackEnabled\n * @emits LocalParticipant#trackPublicationFailed\n * @emits LocalParticipant#trackPublished\n * @emits LocalParticipant#trackStarted\n * @emits LocalParticipant#trackStopped\n * @emits LocalParticipant#trackWarning\n * @emits LocalParticipant#trackWarningsCleared\n */\nvar LocalParticipant = /** @class */function (_super) {\n  __extends(LocalParticipant, _super);\n  /**\n   * Construct a {@link LocalParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {Array<LocalTrack>} localTracks\n   * @param {Object} options\n   */\n  function LocalParticipant(signaling, localTracks, options) {\n    var _this = this;\n    options = Object.assign({\n      LocalAudioTrack: LocalAudioTrack,\n      LocalVideoTrack: LocalVideoTrack,\n      LocalDataTrack: LocalDataTrack,\n      MediaStreamTrack: MediaStreamTrack,\n      LocalAudioTrackPublication: LocalAudioTrackPublication,\n      LocalVideoTrackPublication: LocalVideoTrackPublication,\n      LocalDataTrackPublication: LocalDataTrackPublication,\n      shouldStopLocalTracks: false,\n      tracks: localTracks\n    }, options);\n    var tracksToStop = options.shouldStopLocalTracks ? new Set(localTracks.filter(function (localTrack) {\n      return localTrack.kind !== 'data';\n    })) : new Set();\n    _this = _super.call(this, signaling, options) || this;\n    Object.defineProperties(_this, {\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _LocalAudioTrack: {\n        value: options.LocalAudioTrack\n      },\n      _LocalDataTrack: {\n        value: options.LocalDataTrack\n      },\n      _LocalVideoTrack: {\n        value: options.LocalVideoTrack\n      },\n      _MediaStreamTrack: {\n        value: options.MediaStreamTrack\n      },\n      _LocalAudioTrackPublication: {\n        value: options.LocalAudioTrackPublication\n      },\n      _LocalDataTrackPublication: {\n        value: options.LocalDataTrackPublication\n      },\n      _LocalVideoTrackPublication: {\n        value: options.LocalVideoTrackPublication\n      },\n      _tracksToStop: {\n        value: tracksToStop\n      },\n      signalingRegion: {\n        enumerable: true,\n        get: function () {\n          return signaling.signalingRegion;\n        }\n      }\n    });\n    _this._handleTrackSignalingEvents();\n    return _this;\n  }\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @param {Track.Priority} priority\n   * @returns {?LocalTrack}\n   */\n  LocalParticipant.prototype._addTrack = function (track, id, priority) {\n    var addedTrack = _super.prototype._addTrack.call(this, track, id);\n    if (addedTrack && this.state !== 'disconnected') {\n      this._addLocalTrack(track, priority);\n    }\n    return addedTrack;\n  };\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.Priority} priority\n   * @returns {void}\n   */\n  LocalParticipant.prototype._addLocalTrack = function (track, priority) {\n    var _a;\n    // check if track has noise cancellation enabled.\n    var vendor = (_a = track.noiseCancellation) === null || _a === void 0 ? void 0 : _a.vendor;\n    this._signaling.addTrack(track._trackSender, track.name, priority, vendor);\n    this._log.info(\"Added a new \" + trackClass(track, true) + \":\", track.id);\n    this._log.debug(trackClass(track, true) + \":\", track);\n  };\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @returns {?LocalTrack}\n   */\n  LocalParticipant.prototype._removeTrack = function (track, id) {\n    var removedTrack = _super.prototype._removeTrack.call(this, track, id);\n    if (removedTrack && this.state !== 'disconnected') {\n      this._signaling.removeTrack(track._trackSender);\n      this._log.info(\"Removed a \" + trackClass(track, true) + \":\", track.id);\n      this._log.debug(trackClass(track, true) + \":\", track);\n    }\n    return removedTrack;\n  };\n  /**\n   * Get the {@link LocalTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n  LocalParticipant.prototype._getTrackEvents = function () {\n    return _super.prototype._getTrackEvents.call(this).concat([['disabled', 'trackDisabled'], ['enabled', 'trackEnabled'], ['stopped', 'trackStopped']]);\n  };\n  LocalParticipant.prototype.toString = function () {\n    return \"[LocalParticipant #\" + this._instanceId + (this.sid ? \": \" + this.sid : '') + \"]\";\n  };\n  /**\n   * @private\n   */\n  LocalParticipant.prototype._handleTrackSignalingEvents = function () {\n    var _this = this;\n    var log = this._log;\n    if (this.state === 'disconnected') {\n      return;\n    }\n    var localTrackDisabled = function (localTrack) {\n      var trackSignaling = _this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.disable();\n        log.debug(\"Disabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n      }\n    };\n    var localTrackEnabled = function (localTrack) {\n      var trackSignaling = _this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.enable();\n        log.debug(\"Enabled the \" + trackClass(localTrack, true) + \":\", localTrack.id);\n      }\n    };\n    var localTrackStopped = function (localTrack) {\n      // NOTE(mroberts): We shouldn't need to check for `stop`, since DataTracks\n      // do not emit \"stopped\".\n      var trackSignaling = _this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.stop();\n      }\n      return trackSignaling;\n    };\n    var stateChanged = function (state) {\n      log.debug('Transitioned to state:', state);\n      if (state === 'disconnected') {\n        log.debug('Removing LocalTrack event listeners');\n        _this._signaling.removeListener('stateChanged', stateChanged);\n        _this.removeListener('trackDisabled', localTrackDisabled);\n        _this.removeListener('trackEnabled', localTrackEnabled);\n        _this.removeListener('trackStopped', localTrackStopped);\n        // NOTE(mmalavalli): Remove the stale MediaTrackSender clones so that we\n        // do not call replaceTrack() on their RTCRtpSenders.\n        _this._tracks.forEach(function (track) {\n          var trackSignaling = localTrackStopped(track);\n          if (trackSignaling) {\n            track._trackSender.removeClone(trackSignaling._trackTransceiver);\n          }\n        });\n        log.info(\"LocalParticipant disconnected. Stopping \" + _this._tracksToStop.size + \" automatically-acquired LocalTracks\");\n        _this._tracksToStop.forEach(function (track) {\n          track.stop();\n        });\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected');\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return _this.emit('reconnected');\n        }, 0);\n      }\n    };\n    this.on('trackDisabled', localTrackDisabled);\n    this.on('trackEnabled', localTrackEnabled);\n    this.on('trackStopped', localTrackStopped);\n    this._signaling.on('stateChanged', stateChanged);\n    this._tracks.forEach(function (track) {\n      _this._addLocalTrack(track, trackPriority.PRIORITY_STANDARD);\n      _this._getOrCreateLocalTrackPublication(track).catch(function (error) {\n        // Just log a warning for now.\n        log.warn(\"Failed to get or create LocalTrackPublication for \" + track + \":\", error);\n      });\n    });\n  };\n  /**\n   * @private\n   * @param {LocalTrack} localTrack\n   * @returns {Promise<LocalTrackPublication>}\n   */\n  LocalParticipant.prototype._getOrCreateLocalTrackPublication = function (localTrack) {\n    var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n    if (localTrackPublication) {\n      return Promise.resolve(localTrackPublication);\n    }\n    var log = this._log;\n    var self = this;\n    var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n    if (!trackSignaling) {\n      return Promise.reject(new Error(\"Unexpected error: The \" + localTrack + \" cannot be published\"));\n    }\n    return new Promise(function (resolve, reject) {\n      function updated() {\n        var error = trackSignaling.error;\n        if (error) {\n          trackSignaling.removeListener('updated', updated);\n          log.warn(\"Failed to publish the \" + trackClass(localTrack, true) + \": \" + error.message);\n          self._removeTrack(localTrack, localTrack.id);\n          setTimeout(function () {\n            self.emit('trackPublicationFailed', error, localTrack);\n          });\n          reject(error);\n          return;\n        }\n        if (!self._tracks.has(localTrack.id)) {\n          trackSignaling.removeListener('updated', updated);\n          reject(new Error(\"The \" + localTrack + \" was unpublished\"));\n          return;\n        }\n        var sid = trackSignaling.sid;\n        if (!sid) {\n          return;\n        }\n        trackSignaling.removeListener('updated', updated);\n        var options = {\n          log: log,\n          LocalAudioTrackPublication: self._LocalAudioTrackPublication,\n          LocalDataTrackPublication: self._LocalDataTrackPublication,\n          LocalVideoTrackPublication: self._LocalVideoTrackPublication\n        };\n        localTrackPublication = getTrackPublication(self.tracks, localTrack);\n        var warningHandler = function (twilioWarningName) {\n          return self.emit('trackWarning', twilioWarningName, localTrackPublication);\n        };\n        var warningsClearedHandler = function () {\n          return self.emit('trackWarningsCleared', localTrackPublication);\n        };\n        var unpublish = function (publication) {\n          localTrackPublication.removeListener('trackWarning', warningHandler);\n          localTrackPublication.removeListener('trackWarningsCleared', warningsClearedHandler);\n          self.unpublishTrack(publication.track);\n        };\n        if (!localTrackPublication) {\n          localTrackPublication = asLocalTrackPublication(localTrack, trackSignaling, unpublish, options);\n          self._addTrackPublication(localTrackPublication);\n        }\n        localTrackPublication.on('warning', warningHandler);\n        localTrackPublication.on('warningsCleared', warningsClearedHandler);\n        var state = self._signaling.state;\n        if (state === 'connected' || state === 'connecting') {\n          if (localTrack._processorEventObserver) {\n            localTrack._processorEventObserver.on('event', function (event) {\n              self._eventObserver.emit('event', {\n                name: event.name,\n                payload: event.data,\n                group: 'video-processor',\n                level: 'info'\n              });\n            });\n          }\n          // NOTE(csantos): For tracks created before joining a room or already joined but about to publish it\n          if (localTrack.processedTrack) {\n            localTrack._captureFrames();\n            localTrack._setSenderMediaStreamTrack(true);\n          }\n        }\n        if (state === 'connected') {\n          setTimeout(function () {\n            self.emit('trackPublished', localTrackPublication);\n          });\n        }\n        resolve(localTrackPublication);\n      }\n      trackSignaling.on('updated', updated);\n    });\n  };\n  /**\n   * Publishes a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack} localTrack - The {@link LocalTrack} to publish\n   * @param {LocalTrackPublishOptions} [options] - The {@link LocalTrackPublishOptions}\n   *   for publishing the {@link LocalTrack}\n   * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n   *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if either the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n   *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   * @throws {RangeError}\n   * @example\n   * var Video = require('twilio-video');\n   *\n   * Video.connect(token, {\n   *   name: 'my-cool-room',\n   *   audio: true\n   * }).then(function(room) {\n   *   return Video.createLocalVideoTrack({\n   *     name: 'camera'\n   *   }).then(function(localVideoTrack) {\n   *     return room.localParticipant.publishTrack(localVideoTrack, {\n   *       priority: 'high'\n   *     });\n   *   });\n   * }).then(function(publication) {\n   *   console.log('The LocalTrack \"' + publication.trackName\n   *     + '\" was successfully published with priority \"'\n   *     * publication.priority + '\"');\n   * });\n  */ /**\n     * Publishes a MediaStreamTrack to the {@link Room}.\n     * @param {MediaStreamTrack} mediaStreamTrack - The MediaStreamTrack\n     *   to publish; if a corresponding {@link LocalAudioTrack} or\n     *   {@link LocalVideoTrack} has not yet been published, this method will\n     *   construct one\n     * @param {MediaStreamTrackPublishOptions} [options] - The options for publishing\n     *   the MediaStreamTrack\n     * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n     *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n     *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n     *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n     *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n     * @throws {TypeError}\n     * @throws {RangeError}\n     * @example\n     * var Video = require('twilio-video');\n     *\n     * Video.connect(token, {\n     *   name: 'my-cool-room',\n     *   audio: true\n     * }).then(function(room) {\n     *   return navigator.mediaDevices.getUserMedia({\n     *     video: true\n     *   }).then(function(mediaStream) {\n     *     var mediaStreamTrack = mediaStream.getTracks()[0];\n     *     return room.localParticipant.publishTrack(mediaStreamTrack, {\n     *       name: 'camera',\n     *       priority: 'high'\n     *     });\n     *   });\n     * }).then(function(publication) {\n     *   console.log('The LocalTrack \"' + publication.trackName\n     *     + '\" was successfully published with priority \"'\n     *     * publication.priority + '\"');\n     * });\n     */\n  LocalParticipant.prototype.publishTrack = function (localTrackOrMediaStreamTrack, options) {\n    var trackPublication = getTrackPublication(this.tracks, localTrackOrMediaStreamTrack);\n    if (trackPublication) {\n      return Promise.resolve(trackPublication);\n    }\n    options = Object.assign({\n      log: this._log,\n      priority: trackPriority.PRIORITY_STANDARD,\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    }, options);\n    var localTrack;\n    try {\n      localTrack = asLocalTrack(localTrackOrMediaStreamTrack, options);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    var noiseCancellation = localTrack.noiseCancellation;\n    var allowedAudioProcessors = this._signaling.audioProcessors;\n    if (noiseCancellation && !allowedAudioProcessors.includes(noiseCancellation.vendor)) {\n      this._log.warn(noiseCancellation.vendor + \" is not supported in this room. disabling it permanently\");\n      noiseCancellation.disablePermanently();\n    }\n    var priorityValues = Object.values(trackPriority);\n    if (!priorityValues.includes(options.priority)) {\n      // eslint-disable-next-line new-cap\n      return Promise.reject(E.INVALID_VALUE('LocalTrackPublishOptions.priority', priorityValues));\n    }\n    var addedLocalTrack = this._addTrack(localTrack, localTrack.id, options.priority) || this._tracks.get(localTrack.id);\n    return this._getOrCreateLocalTrackPublication(addedLocalTrack);\n  };\n  /**\n   * Publishes multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to publish; for any MediaStreamTracks provided, if a corresponding\n   *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been\n   *   published, this method will construct one\n   * @returns {Promise<Array<LocalTrackPublication>>} - The resulting\n   *   {@link LocalTrackPublication}s if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}s\n   *   along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   */\n  LocalParticipant.prototype.publishTracks = function (tracks) {\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n    return Promise.all(tracks.map(this.publishTrack, this));\n  };\n  LocalParticipant.prototype.setBandwidthProfile = function () {\n    this._log.warn('setBandwidthProfile is not implemented yet and may be available in future versions of twilio-video.js');\n  };\n  /**\n   * Sets the {@link NetworkQualityVerbosity} for the {@link LocalParticipant} and\n   * {@link RemoteParticipant}s. It does nothing if Network Quality is not enabled\n   * while calling {@link connect}.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration - The new\n   *   {@link NetworkQualityConfiguration}; If either or both of the local and\n   *   remote {@link NetworkQualityVerbosity} values are absent, then the corresponding\n   *   existing values are retained\n   * @returns {this}\n   * @example\n   * // Update verbosity levels for both LocalParticipant and RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1,\n   *   remote: 2\n   * });\n   * @example\n   * // Update verbosity level for only the LocalParticipant\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1\n   * });\n   *  @example\n   * // Update verbosity level for only the RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   remote: 2\n   * });\n   */\n  LocalParticipant.prototype.setNetworkQualityConfiguration = function (networkQualityConfiguration) {\n    if (typeof networkQualityConfiguration !== 'object' || networkQualityConfiguration === null) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('networkQualityConfiguration', 'NetworkQualityConfiguration');\n    }\n    ['local', 'remote'].forEach(function (prop) {\n      if (prop in networkQualityConfiguration && (typeof networkQualityConfiguration[prop] !== 'number' || isNaN(networkQualityConfiguration[prop]))) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE(\"networkQualityConfiguration.\" + prop, 'number');\n      }\n    });\n    this._signaling.setNetworkQualityConfiguration(networkQualityConfiguration);\n    return this;\n  };\n  /**\n   * Set the {@link LocalParticipant}'s {@link EncodingParameters}.\n   * @param {?EncodingParameters} [encodingParameters] - The new\n   *   {@link EncodingParameters}; If null, then the bitrate limits are removed;\n   *   If not specified, then the existing bitrate limits are preserved\n   * @returns {this}\n   * @throws {TypeError}\n   */\n  LocalParticipant.prototype.setParameters = function (encodingParameters) {\n    if (typeof encodingParameters !== 'undefined' && typeof encodingParameters !== 'object') {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('encodingParameters', 'EncodingParameters, null or undefined');\n    }\n    if (encodingParameters) {\n      if (this._signaling.getParameters().adaptiveSimulcast && encodingParameters.maxVideoBitrate) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('encodingParameters', 'encodingParameters.maxVideoBitrate is not compatible with \"preferredVideoCodecs=auto\"');\n      }\n      ['maxAudioBitrate', 'maxVideoBitrate'].forEach(function (prop) {\n        if (typeof encodingParameters[prop] !== 'undefined' && typeof encodingParameters[prop] !== 'number' && encodingParameters[prop] !== null) {\n          // eslint-disable-next-line new-cap\n          throw E.INVALID_TYPE(\"encodingParameters.\" + prop, 'number, null or undefined');\n        }\n      });\n    } else if (encodingParameters === null) {\n      encodingParameters = {\n        maxAudioBitrate: null,\n        maxVideoBitrate: null\n      };\n    }\n    this._signaling.setParameters(encodingParameters);\n    return this;\n  };\n  /**\n   * Stops publishing a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n   *   to stop publishing; if a MediaStreamTrack is provided, this method\n   *   looks up the corresponding {@link LocalAudioTrack} or\n   *   {@link LocalVideoTrack} to stop publishing\n   * @returns {?LocalTrackPublication} - The corresponding\n   *   {@link LocalTrackPublication} if the {@link LocalTrack} was previously\n   *   published, null otherwise\n   * @throws {TypeError}\n  */\n  LocalParticipant.prototype.unpublishTrack = function (track) {\n    validateLocalTrack(track, {\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    });\n    var localTrack = this._tracks.get(track.id);\n    if (!localTrack) {\n      return null;\n    }\n    var trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n    trackSignaling.publishFailed(new Error(\"The \" + localTrack + \" was unpublished\"));\n    localTrack = this._removeTrack(localTrack, localTrack.id);\n    if (!localTrack) {\n      return null;\n    }\n    var localTrackPublication = getTrackPublication(this.tracks, localTrack);\n    if (localTrackPublication) {\n      this._removeTrackPublication(localTrackPublication);\n    }\n    return localTrackPublication;\n  };\n  /**\n   * Stops publishing multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to stop publishing; for any MediaStreamTracks provided, this method looks\n   *   up the corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to\n   *   stop publishing\n   * @returns {Array<LocalTrackPublication>} - The corresponding\n   *   {@link LocalTrackPublication}s that were successfully unpublished\n   * @throws {TypeError}\n   */\n  LocalParticipant.prototype.unpublishTracks = function (tracks) {\n    var _this = this;\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks', 'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n    return tracks.reduce(function (unpublishedTracks, track) {\n      var unpublishedTrack = _this.unpublishTrack(track);\n      return unpublishedTrack ? unpublishedTracks.concat(unpublishedTrack) : unpublishedTracks;\n    }, []);\n  };\n  return LocalParticipant;\n}(Participant);\n/**\n * The {@link LocalParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnected\n */\n/**\n * The {@link LocalParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnecting\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalVideoTrack}'s dimensions changed.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} whose dimensions changed\n * @event LocalParticipant#trackDimensionsChanged\n */\n/**\n * A {@link LocalTrack} was disabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was disabled\n * @event LocalParticipant#trackDisabled\n */\n/**\n * A {@link LocalTrack} was enabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was enabled\n * @event LocalParticipant#trackEnabled\n */\n/**\n * A {@link LocalTrack} failed to publish. Check the error message for more\n * information. In a Large Group Room (Maximum Participants greater than 50),\n * this event is raised with a {@link ParticipantMaxTracksExceededError} either\n * when attempting to publish the {@link LocalTrack} will exceed the Maximum Published\n * Tracks limit of 16, or the {@link LocalTrack} is part of a set of {@link LocalTrack}s\n * which along with the published Tracks exceeds 16.\n * @param {TwilioError} error - A {@link TwilioError} explaining why publication\n *   failed\n * @param {LocalTrack} localTrack - The {@link LocalTrack} that failed to\n *   publish\n * @event LocalParticipant#trackPublicationFailed\n */\n/**\n * A {@link LocalTrack} that was added using {@link LocalParticipant#publishTrack} was successfully published. This event\n * is not raised for {@link LocalTrack}s added in {@link ConnectOptions}<code>.tracks</code> or auto-created within\n * <a href=\"module-twilio-video.html#.connect__anchor\"><code>{@link connect}</code></a>.\n * @param {LocalTrackPublication} publication - The resulting\n *   {@link LocalTrackPublication} for the published {@link LocalTrack}\n * @event LocalParticipant#trackPublished\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s started.\n * @param {LocalTrack} track - The {@link LocalTrack} that started\n * @event LocalParticipant#trackStarted\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s stopped, either\n * because {@link LocalTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalTrack} track - The {@link LocalTrack} that stopped\n * @event LocalParticipant#trackStopped\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s encountered a warning.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {string} name - The warning that was raised.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that encountered the warning.\n * @event LocalParticipant#trackWarning\n */\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s cleared all warnings.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that cleared all warnings.\n * @event LocalParticipant#trackWarningsCleared\n */\n/**\n * Outgoing media encoding parameters.\n * @typedef {object} EncodingParameters\n * @property {?number} [maxAudioBitrate] - Max outgoing audio bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or a\n *   <code>0</code> value removes any previously set bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed bitrate\n *   codecs; Based on our tests, Chrome, Firefox and Safari support a bitrate range of\n *   12000 bps to 256000 bps for Opus codec; This parameter has no effect on iSAC, PCMU\n *   and PCMA codecs\n * @property {?number} [maxVideoBitrate] - Max outgoing video bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or\n *   a <code>0</code> value removes any previously set bitrate limit; This value is\n *   set as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs; Based on our tests, Chrome, Firefox and Safari all seem to support\n *   an average bitrate range of 20000 bps (20 kbps) to 8000000 bps (8 mbps) for a\n *   720p VideoTrack.\n *   Note: this limit is not applied for screen share tracks published on Chrome.\n */\n/**\n * Options for publishing a {@link LocalTrack}.\n * @typedef {object} LocalTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n/**\n * Options for publishing a {@link MediaStreamTrack}.\n * @typedef {LocalTrackOptions} MediaStreamTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n/**\n * @private\n * @param {Map<Track.SID, LocalTrackPublication>} trackPublications\n * @param {LocalTrack|MediaStreamTrack} track\n * @returns {?LocalTrackPublication} trackPublication\n */\nfunction getTrackPublication(trackPublications, track) {\n  return Array.from(trackPublications.values()).find(function (trackPublication) {\n    return trackPublication.track === track || trackPublication.track.mediaStreamTrack === track;\n  }) || null;\n}\nmodule.exports = LocalParticipant;","map":{"version":3,"names":["MediaStreamTrack","require","_a","asLocalTrack","asLocalTrackPublication","trackClass","_b","E","typeErrors","trackPriority","validateLocalTrack","_c","LocalAudioTrack","LocalDataTrack","LocalVideoTrack","LocalAudioTrackPublication","LocalDataTrackPublication","LocalVideoTrackPublication","Participant","LocalParticipant","_super","__extends","signaling","localTracks","options","_this","Object","assign","shouldStopLocalTracks","tracks","tracksToStop","Set","filter","localTrack","kind","call","defineProperties","_eventObserver","value","eventObserver","_LocalAudioTrack","_LocalDataTrack","_LocalVideoTrack","_MediaStreamTrack","_LocalAudioTrackPublication","_LocalDataTrackPublication","_LocalVideoTrackPublication","_tracksToStop","signalingRegion","enumerable","get","_handleTrackSignalingEvents","prototype","_addTrack","track","id","priority","addedTrack","state","_addLocalTrack","vendor","noiseCancellation","_signaling","addTrack","_trackSender","name","_log","info","debug","_removeTrack","removedTrack","removeTrack","_getTrackEvents","concat","toString","_instanceId","sid","log","localTrackDisabled","trackSignaling","getPublication","disable","localTrackEnabled","enable","localTrackStopped","stop","stateChanged","removeListener","_tracks","forEach","removeClone","_trackTransceiver","size","setTimeout","emit","on","PRIORITY_STANDARD","_getOrCreateLocalTrackPublication","catch","error","warn","localTrackPublication","getTrackPublication","Promise","resolve","self","reject","Error","updated","message","has","warningHandler","twilioWarningName","warningsClearedHandler","unpublish","publication","unpublishTrack","_addTrackPublication","_processorEventObserver","event","payload","data","group","level","processedTrack","_captureFrames","_setSenderMediaStreamTrack","publishTrack","localTrackOrMediaStreamTrack","trackPublication","allowedAudioProcessors","audioProcessors","includes","disablePermanently","priorityValues","values","INVALID_VALUE","addedLocalTrack","publishTracks","Array","isArray","INVALID_TYPE","all","map","setBandwidthProfile","setNetworkQualityConfiguration","networkQualityConfiguration","prop","isNaN","setParameters","encodingParameters","getParameters","adaptiveSimulcast","maxVideoBitrate","maxAudioBitrate","publishFailed","_removeTrackPublication","unpublishTracks","reduce","unpublishedTracks","unpublishedTrack","trackPublications","from","find","mediaStreamTrack","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/localparticipant.js"],"sourcesContent":["'use strict';\n\nconst { MediaStreamTrack } = require('./webrtc');\nconst { asLocalTrack, asLocalTrackPublication, trackClass } = require('./util');\nconst { typeErrors: E, trackPriority } = require('./util/constants');\nconst { validateLocalTrack } = require('./util/validate');\n\nconst {\n  LocalAudioTrack,\n  LocalDataTrack,\n  LocalVideoTrack\n} = require('./media/track/es5');\n\nconst LocalAudioTrackPublication = require('./media/track/localaudiotrackpublication');\nconst LocalDataTrackPublication = require('./media/track/localdatatrackpublication');\nconst LocalVideoTrackPublication = require('./media/track/localvideotrackpublication');\nconst Participant = require('./participant');\n\n/**\n * A {@link LocalParticipant} represents the local {@link Participant} in a\n * {@link Room}.\n * @extends Participant\n * @property {Map<Track.SID, LocalAudioTrackPublication>} audioTracks -\n *    The {@link LocalParticipant}'s {@link LocalAudioTrackPublication}s\n * @property {Map<Track.SID, LocalDataTrackPublication>} dataTracks -\n *    The {@link LocalParticipant}'s {@link LocalDataTrackPublication}s\n * @property {Map<Track.SID, LocalTrackPublication>} tracks -\n *    The {@link LocalParticipant}'s {@link LocalTrackPublication}s\n * @property {Map<Track.SID, LocalVideoTrackPublication>} videoTracks -\n *    The {@link LocalParticipant}'s {@link LocalVideoTrackPublication}s\n * @property {string} signalingRegion - The geographical region of the\n *     signaling edge the {@link LocalParticipant} is connected to.\n *\n * @emits RemoteParticipant#reconnected\n * @emits RemoteParticipant#reconnecting\n * @emits LocalParticipant#trackDimensionsChanged\n * @emits LocalParticipant#trackDisabled\n * @emits LocalParticipant#trackEnabled\n * @emits LocalParticipant#trackPublicationFailed\n * @emits LocalParticipant#trackPublished\n * @emits LocalParticipant#trackStarted\n * @emits LocalParticipant#trackStopped\n * @emits LocalParticipant#trackWarning\n * @emits LocalParticipant#trackWarningsCleared\n */\nclass LocalParticipant extends Participant {\n  /**\n   * Construct a {@link LocalParticipant}.\n   * @param {ParticipantSignaling} signaling\n   * @param {Array<LocalTrack>} localTracks\n   * @param {Object} options\n   */\n  constructor(signaling, localTracks, options) {\n    options = Object.assign({\n      LocalAudioTrack,\n      LocalVideoTrack,\n      LocalDataTrack,\n      MediaStreamTrack,\n      LocalAudioTrackPublication,\n      LocalVideoTrackPublication,\n      LocalDataTrackPublication,\n      shouldStopLocalTracks: false,\n      tracks: localTracks\n    }, options);\n\n    const tracksToStop = options.shouldStopLocalTracks\n      ? new Set(localTracks.filter(localTrack => localTrack.kind !== 'data'))\n      : new Set();\n\n    super(signaling, options);\n\n    Object.defineProperties(this, {\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _LocalAudioTrack: {\n        value: options.LocalAudioTrack\n      },\n      _LocalDataTrack: {\n        value: options.LocalDataTrack\n      },\n      _LocalVideoTrack: {\n        value: options.LocalVideoTrack\n      },\n      _MediaStreamTrack: {\n        value: options.MediaStreamTrack\n      },\n      _LocalAudioTrackPublication: {\n        value: options.LocalAudioTrackPublication\n      },\n      _LocalDataTrackPublication: {\n        value: options.LocalDataTrackPublication\n      },\n      _LocalVideoTrackPublication: {\n        value: options.LocalVideoTrackPublication\n      },\n      _tracksToStop: {\n        value: tracksToStop\n      },\n      signalingRegion: {\n        enumerable: true,\n        get() {\n          return signaling.signalingRegion;\n        }\n      }\n    });\n\n    this._handleTrackSignalingEvents();\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @param {Track.Priority} priority\n   * @returns {?LocalTrack}\n   */\n  _addTrack(track, id, priority) {\n    const addedTrack = super._addTrack(track, id);\n    if (addedTrack && this.state !== 'disconnected') {\n      this._addLocalTrack(track, priority);\n    }\n    return addedTrack;\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.Priority} priority\n   * @returns {void}\n   */\n  _addLocalTrack(track, priority) {\n    // check if track has noise cancellation enabled.\n    const vendor = track.noiseCancellation?.vendor;\n    this._signaling.addTrack(track._trackSender, track.name, priority, vendor);\n    this._log.info(`Added a new ${trackClass(track, true)}:`, track.id);\n    this._log.debug(`${trackClass(track, true)}:`, track);\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} track\n   * @param {Track.ID} id\n   * @returns {?LocalTrack}\n   */\n  _removeTrack(track, id) {\n    const removedTrack = super._removeTrack(track, id);\n    if (removedTrack && this.state !== 'disconnected') {\n      this._signaling.removeTrack(track._trackSender);\n      this._log.info(`Removed a ${trackClass(track, true)}:`, track.id);\n      this._log.debug(`${trackClass(track, true)}:`, track);\n    }\n    return removedTrack;\n  }\n\n  /**\n   * Get the {@link LocalTrack} events to re-emit.\n   * @private\n   * @returns {Array<Array<string>>} events\n   */\n  _getTrackEvents() {\n    return super._getTrackEvents.call(this).concat([\n      ['disabled', 'trackDisabled'],\n      ['enabled', 'trackEnabled'],\n      ['stopped', 'trackStopped']\n    ]);\n  }\n\n  toString() {\n    return `[LocalParticipant #${this._instanceId}${this.sid ? `: ${this.sid}` : ''}]`;\n  }\n\n  /**\n   * @private\n   */\n  _handleTrackSignalingEvents() {\n    const log = this._log;\n\n    if (this.state === 'disconnected') {\n      return;\n    }\n\n    const localTrackDisabled = localTrack => {\n      const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.disable();\n        log.debug(`Disabled the ${trackClass(localTrack, true)}:`, localTrack.id);\n      }\n    };\n\n    const localTrackEnabled = localTrack => {\n      const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.enable();\n        log.debug(`Enabled the ${trackClass(localTrack, true)}:`, localTrack.id);\n      }\n    };\n\n    const localTrackStopped = localTrack => {\n      // NOTE(mroberts): We shouldn't need to check for `stop`, since DataTracks\n      // do not emit \"stopped\".\n      const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n      if (trackSignaling) {\n        trackSignaling.stop();\n      }\n      return trackSignaling;\n    };\n\n    const stateChanged = state => {\n      log.debug('Transitioned to state:', state);\n      if (state === 'disconnected') {\n        log.debug('Removing LocalTrack event listeners');\n        this._signaling.removeListener('stateChanged', stateChanged);\n        this.removeListener('trackDisabled', localTrackDisabled);\n        this.removeListener('trackEnabled', localTrackEnabled);\n        this.removeListener('trackStopped', localTrackStopped);\n\n        // NOTE(mmalavalli): Remove the stale MediaTrackSender clones so that we\n        // do not call replaceTrack() on their RTCRtpSenders.\n        this._tracks.forEach(track => {\n          const trackSignaling = localTrackStopped(track);\n          if (trackSignaling) {\n            track._trackSender.removeClone(trackSignaling._trackTransceiver);\n          }\n        });\n\n        log.info(`LocalParticipant disconnected. Stopping ${this._tracksToStop.size} automatically-acquired LocalTracks`);\n        this._tracksToStop.forEach(track => {\n          track.stop();\n        });\n      } else if (state === 'connected') {\n        // NOTE(mmalavalli): Any transition to \"connected\" here is a result of\n        // successful signaling reconnection, and not a first-time establishment\n        // of the signaling connection.\n        log.info('reconnected');\n\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(() => this.emit('reconnected'), 0);\n      }\n    };\n\n    this.on('trackDisabled', localTrackDisabled);\n    this.on('trackEnabled', localTrackEnabled);\n    this.on('trackStopped', localTrackStopped);\n\n    this._signaling.on('stateChanged', stateChanged);\n\n    this._tracks.forEach(track => {\n      this._addLocalTrack(track, trackPriority.PRIORITY_STANDARD);\n      this._getOrCreateLocalTrackPublication(track).catch(error => {\n        // Just log a warning for now.\n        log.warn(`Failed to get or create LocalTrackPublication for ${track}:`, error);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {LocalTrack} localTrack\n   * @returns {Promise<LocalTrackPublication>}\n   */\n  _getOrCreateLocalTrackPublication(localTrack) {\n    let localTrackPublication = getTrackPublication(this.tracks, localTrack);\n    if (localTrackPublication) {\n      return Promise.resolve(localTrackPublication);\n    }\n\n    const log = this._log;\n    const self = this;\n\n    const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n    if (!trackSignaling) {\n      return Promise.reject(new Error(`Unexpected error: The ${localTrack} cannot be published`));\n    }\n\n    return new Promise((resolve, reject) => {\n      function updated() {\n        const error = trackSignaling.error;\n        if (error) {\n          trackSignaling.removeListener('updated', updated);\n          log.warn(`Failed to publish the ${trackClass(localTrack, true)}: ${error.message}`);\n          self._removeTrack(localTrack, localTrack.id);\n          setTimeout(() => {\n            self.emit('trackPublicationFailed', error, localTrack);\n          });\n          reject(error);\n          return;\n        }\n\n        if (!self._tracks.has(localTrack.id)) {\n          trackSignaling.removeListener('updated', updated);\n          reject(new Error(`The ${localTrack} was unpublished`));\n          return;\n        }\n\n        const sid = trackSignaling.sid;\n        if (!sid) {\n          return;\n        }\n\n        trackSignaling.removeListener('updated', updated);\n\n        const options = {\n          log,\n          LocalAudioTrackPublication: self._LocalAudioTrackPublication,\n          LocalDataTrackPublication: self._LocalDataTrackPublication,\n          LocalVideoTrackPublication: self._LocalVideoTrackPublication\n        };\n\n        localTrackPublication = getTrackPublication(self.tracks, localTrack);\n\n        const warningHandler = twilioWarningName =>\n          self.emit('trackWarning', twilioWarningName, localTrackPublication);\n\n        const warningsClearedHandler = () =>\n          self.emit('trackWarningsCleared', localTrackPublication);\n\n        const unpublish = publication => {\n          localTrackPublication.removeListener('trackWarning', warningHandler);\n          localTrackPublication.removeListener('trackWarningsCleared', warningsClearedHandler);\n          self.unpublishTrack(publication.track);\n        };\n\n        if (!localTrackPublication) {\n          localTrackPublication = asLocalTrackPublication(localTrack, trackSignaling, unpublish, options);\n          self._addTrackPublication(localTrackPublication);\n        }\n\n        localTrackPublication.on('warning', warningHandler);\n        localTrackPublication.on('warningsCleared', warningsClearedHandler);\n\n        const { state } = self._signaling;\n        if (state === 'connected' || state === 'connecting') {\n          if (localTrack._processorEventObserver) {\n            localTrack._processorEventObserver.on('event', event => {\n              self._eventObserver.emit('event', {\n                name: event.name,\n                payload: event.data,\n                group: 'video-processor',\n                level: 'info'\n              });\n            });\n          }\n\n          // NOTE(csantos): For tracks created before joining a room or already joined but about to publish it\n          if (localTrack.processedTrack) {\n            localTrack._captureFrames();\n            localTrack._setSenderMediaStreamTrack(true);\n          }\n        }\n        if (state === 'connected') {\n          setTimeout(() => {\n            self.emit('trackPublished', localTrackPublication);\n          });\n        }\n        resolve(localTrackPublication);\n      }\n\n      trackSignaling.on('updated', updated);\n    });\n  }\n\n  /**\n   * Publishes a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack} localTrack - The {@link LocalTrack} to publish\n   * @param {LocalTrackPublishOptions} [options] - The {@link LocalTrackPublishOptions}\n   *   for publishing the {@link LocalTrack}\n   * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n   *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if either the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n   *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   * @throws {RangeError}\n   * @example\n   * var Video = require('twilio-video');\n   *\n   * Video.connect(token, {\n   *   name: 'my-cool-room',\n   *   audio: true\n   * }).then(function(room) {\n   *   return Video.createLocalVideoTrack({\n   *     name: 'camera'\n   *   }).then(function(localVideoTrack) {\n   *     return room.localParticipant.publishTrack(localVideoTrack, {\n   *       priority: 'high'\n   *     });\n   *   });\n   * }).then(function(publication) {\n   *   console.log('The LocalTrack \"' + publication.trackName\n   *     + '\" was successfully published with priority \"'\n   *     * publication.priority + '\"');\n   * });\n  *//**\n   * Publishes a MediaStreamTrack to the {@link Room}.\n   * @param {MediaStreamTrack} mediaStreamTrack - The MediaStreamTrack\n   *   to publish; if a corresponding {@link LocalAudioTrack} or\n   *   {@link LocalVideoTrack} has not yet been published, this method will\n   *   construct one\n   * @param {MediaStreamTrackPublishOptions} [options] - The options for publishing\n   *   the MediaStreamTrack\n   * @returns {Promise<LocalTrackPublication>} - Resolves with the corresponding\n   *   {@link LocalTrackPublication} if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}\n   *   is part of a set of {@link LocalTrack}s which along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   * @throws {RangeError}\n   * @example\n   * var Video = require('twilio-video');\n   *\n   * Video.connect(token, {\n   *   name: 'my-cool-room',\n   *   audio: true\n   * }).then(function(room) {\n   *   return navigator.mediaDevices.getUserMedia({\n   *     video: true\n   *   }).then(function(mediaStream) {\n   *     var mediaStreamTrack = mediaStream.getTracks()[0];\n   *     return room.localParticipant.publishTrack(mediaStreamTrack, {\n   *       name: 'camera',\n   *       priority: 'high'\n   *     });\n   *   });\n   * }).then(function(publication) {\n   *   console.log('The LocalTrack \"' + publication.trackName\n   *     + '\" was successfully published with priority \"'\n   *     * publication.priority + '\"');\n   * });\n   */\n  publishTrack(localTrackOrMediaStreamTrack, options) {\n    const trackPublication = getTrackPublication(this.tracks, localTrackOrMediaStreamTrack);\n    if (trackPublication) {\n      return Promise.resolve(trackPublication);\n    }\n\n    options = Object.assign({\n      log: this._log,\n      priority: trackPriority.PRIORITY_STANDARD,\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    }, options);\n\n    let localTrack;\n    try {\n      localTrack = asLocalTrack(localTrackOrMediaStreamTrack, options);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    const noiseCancellation = localTrack.noiseCancellation;\n    const allowedAudioProcessors = this._signaling.audioProcessors;\n    if (noiseCancellation && !allowedAudioProcessors.includes(noiseCancellation.vendor)) {\n      this._log.warn(`${noiseCancellation.vendor} is not supported in this room. disabling it permanently`);\n      noiseCancellation.disablePermanently();\n    }\n\n    const priorityValues = Object.values(trackPriority);\n    if (!priorityValues.includes(options.priority)) {\n      // eslint-disable-next-line new-cap\n      return Promise.reject(E.INVALID_VALUE('LocalTrackPublishOptions.priority', priorityValues));\n    }\n\n    let addedLocalTrack = this._addTrack(localTrack, localTrack.id, options.priority)\n      || this._tracks.get(localTrack.id);\n\n    return this._getOrCreateLocalTrackPublication(addedLocalTrack);\n  }\n\n  /**\n   * Publishes multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to publish; for any MediaStreamTracks provided, if a corresponding\n   *   {@link LocalAudioTrack} or {@link LocalVideoTrack} has not yet been\n   *   published, this method will construct one\n   * @returns {Promise<Array<LocalTrackPublication>>} - The resulting\n   *   {@link LocalTrackPublication}s if successful; In a Large Group Room (Maximum\n   *   Participants greater than 50), rejects with a {@link ParticipantMaxTracksExceededError}\n   *   if the total number of published Tracks in the Room exceeds 16, or the {@link LocalTrack}s\n   *   along with the published Tracks exceeds 16.\n   * @throws {TypeError}\n   */\n  publishTracks(tracks) {\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks',\n        'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n    return Promise.all(tracks.map(this.publishTrack, this));\n  }\n\n  setBandwidthProfile() {\n    this._log.warn('setBandwidthProfile is not implemented yet and may be available in future versions of twilio-video.js');\n  }\n\n  /**\n   * Sets the {@link NetworkQualityVerbosity} for the {@link LocalParticipant} and\n   * {@link RemoteParticipant}s. It does nothing if Network Quality is not enabled\n   * while calling {@link connect}.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration - The new\n   *   {@link NetworkQualityConfiguration}; If either or both of the local and\n   *   remote {@link NetworkQualityVerbosity} values are absent, then the corresponding\n   *   existing values are retained\n   * @returns {this}\n   * @example\n   * // Update verbosity levels for both LocalParticipant and RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1,\n   *   remote: 2\n   * });\n   * @example\n   * // Update verbosity level for only the LocalParticipant\n   * localParticipant.setNetworkQualityConfiguration({\n   *   local: 1\n   * });\n   *  @example\n   * // Update verbosity level for only the RemoteParticipants\n   * localParticipant.setNetworkQualityConfiguration({\n   *   remote: 2\n   * });\n   */\n  setNetworkQualityConfiguration(networkQualityConfiguration) {\n    if (typeof networkQualityConfiguration !== 'object'\n      || networkQualityConfiguration === null) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('networkQualityConfiguration', 'NetworkQualityConfiguration');\n    }\n    ['local', 'remote'].forEach(prop => {\n      if (prop in networkQualityConfiguration && (typeof networkQualityConfiguration[prop] !== 'number' || isNaN(networkQualityConfiguration[prop]))) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE(`networkQualityConfiguration.${prop}`, 'number');\n      }\n    });\n    this._signaling.setNetworkQualityConfiguration(networkQualityConfiguration);\n    return this;\n  }\n\n  /**\n   * Set the {@link LocalParticipant}'s {@link EncodingParameters}.\n   * @param {?EncodingParameters} [encodingParameters] - The new\n   *   {@link EncodingParameters}; If null, then the bitrate limits are removed;\n   *   If not specified, then the existing bitrate limits are preserved\n   * @returns {this}\n   * @throws {TypeError}\n   */\n  setParameters(encodingParameters) {\n    if (typeof encodingParameters !== 'undefined'\n      && typeof encodingParameters !== 'object') {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('encodingParameters',\n        'EncodingParameters, null or undefined');\n    }\n\n    if (encodingParameters) {\n      if (this._signaling.getParameters().adaptiveSimulcast && encodingParameters.maxVideoBitrate) {\n        // eslint-disable-next-line new-cap\n        throw E.INVALID_TYPE('encodingParameters', 'encodingParameters.maxVideoBitrate is not compatible with \"preferredVideoCodecs=auto\"');\n      }\n\n      ['maxAudioBitrate', 'maxVideoBitrate'].forEach(prop => {\n        if (typeof encodingParameters[prop] !== 'undefined'\n          && typeof encodingParameters[prop] !== 'number'\n          && encodingParameters[prop] !== null) {\n          // eslint-disable-next-line new-cap\n          throw E.INVALID_TYPE(`encodingParameters.${prop}`, 'number, null or undefined');\n        }\n      });\n    } else if (encodingParameters === null) {\n      encodingParameters = { maxAudioBitrate: null, maxVideoBitrate: null };\n    }\n\n    this._signaling.setParameters(encodingParameters);\n    return this;\n  }\n\n  /**\n   * Stops publishing a {@link LocalTrack} to the {@link Room}.\n   * @param {LocalTrack|MediaStreamTrack} track - The {@link LocalTrack}\n   *   to stop publishing; if a MediaStreamTrack is provided, this method\n   *   looks up the corresponding {@link LocalAudioTrack} or\n   *   {@link LocalVideoTrack} to stop publishing\n   * @returns {?LocalTrackPublication} - The corresponding\n   *   {@link LocalTrackPublication} if the {@link LocalTrack} was previously\n   *   published, null otherwise\n   * @throws {TypeError}\n  */\n  unpublishTrack(track) {\n    validateLocalTrack(track, {\n      LocalAudioTrack: this._LocalAudioTrack,\n      LocalDataTrack: this._LocalDataTrack,\n      LocalVideoTrack: this._LocalVideoTrack,\n      MediaStreamTrack: this._MediaStreamTrack\n    });\n\n    let localTrack = this._tracks.get(track.id);\n    if (!localTrack) {\n      return null;\n    }\n\n    const trackSignaling = this._signaling.getPublication(localTrack._trackSender);\n    trackSignaling.publishFailed(new Error(`The ${localTrack} was unpublished`));\n\n    localTrack = this._removeTrack(localTrack, localTrack.id);\n    if (!localTrack) {\n      return null;\n    }\n\n    const localTrackPublication = getTrackPublication(this.tracks, localTrack);\n    if (localTrackPublication) {\n      this._removeTrackPublication(localTrackPublication);\n    }\n    return localTrackPublication;\n  }\n\n  /**\n   * Stops publishing multiple {@link LocalTrack}s to the {@link Room}.\n   * @param {Array<LocalTrack|MediaStreamTrack>} tracks - The {@link LocalTrack}s\n   *   to stop publishing; for any MediaStreamTracks provided, this method looks\n   *   up the corresponding {@link LocalAudioTrack} or {@link LocalVideoTrack} to\n   *   stop publishing\n   * @returns {Array<LocalTrackPublication>} - The corresponding\n   *   {@link LocalTrackPublication}s that were successfully unpublished\n   * @throws {TypeError}\n   */\n  unpublishTracks(tracks) {\n    if (!Array.isArray(tracks)) {\n      // eslint-disable-next-line new-cap\n      throw E.INVALID_TYPE('tracks',\n        'Array of LocalAudioTrack, LocalVideoTrack, LocalDataTrack, or MediaStreamTrack');\n    }\n\n    return tracks.reduce((unpublishedTracks, track) => {\n      const unpublishedTrack = this.unpublishTrack(track);\n      return unpublishedTrack ? unpublishedTracks.concat(unpublishedTrack) : unpublishedTracks;\n    }, []);\n  }\n}\n\n/**\n * The {@link LocalParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnected\n */\n\n/**\n * The {@link LocalParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @event LocalParticipant#reconnecting\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalVideoTrack}'s dimensions changed.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} whose dimensions changed\n * @event LocalParticipant#trackDimensionsChanged\n */\n\n/**\n * A {@link LocalTrack} was disabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was disabled\n * @event LocalParticipant#trackDisabled\n */\n\n/**\n * A {@link LocalTrack} was enabled by the {@link LocalParticipant}.\n * @param {LocalTrack} track - The {@link LocalTrack} that was enabled\n * @event LocalParticipant#trackEnabled\n */\n\n/**\n * A {@link LocalTrack} failed to publish. Check the error message for more\n * information. In a Large Group Room (Maximum Participants greater than 50),\n * this event is raised with a {@link ParticipantMaxTracksExceededError} either\n * when attempting to publish the {@link LocalTrack} will exceed the Maximum Published\n * Tracks limit of 16, or the {@link LocalTrack} is part of a set of {@link LocalTrack}s\n * which along with the published Tracks exceeds 16.\n * @param {TwilioError} error - A {@link TwilioError} explaining why publication\n *   failed\n * @param {LocalTrack} localTrack - The {@link LocalTrack} that failed to\n *   publish\n * @event LocalParticipant#trackPublicationFailed\n */\n\n/**\n * A {@link LocalTrack} that was added using {@link LocalParticipant#publishTrack} was successfully published. This event\n * is not raised for {@link LocalTrack}s added in {@link ConnectOptions}<code>.tracks</code> or auto-created within\n * <a href=\"module-twilio-video.html#.connect__anchor\"><code>{@link connect}</code></a>.\n * @param {LocalTrackPublication} publication - The resulting\n *   {@link LocalTrackPublication} for the published {@link LocalTrack}\n * @event LocalParticipant#trackPublished\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s started.\n * @param {LocalTrack} track - The {@link LocalTrack} that started\n * @event LocalParticipant#trackStarted\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrack}s stopped, either\n * because {@link LocalTrack#stop} was called or because the underlying\n * MediaStreamTrack ended).\n * @param {LocalTrack} track - The {@link LocalTrack} that stopped\n * @event LocalParticipant#trackStopped\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s encountered a warning.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {string} name - The warning that was raised.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that encountered the warning.\n * @event LocalParticipant#trackWarning\n */\n\n/**\n * One of the {@link LocalParticipant}'s {@link LocalTrackPublication}s cleared all warnings.\n * This event is only raised if you enabled warnings using <code>notifyWarnings</code> in <code>ConnectOptions</code>.\n * @param {LocalTrackPublication} publication - The {@link LocalTrackPublication} that cleared all warnings.\n * @event LocalParticipant#trackWarningsCleared\n */\n\n/**\n * Outgoing media encoding parameters.\n * @typedef {object} EncodingParameters\n * @property {?number} [maxAudioBitrate] - Max outgoing audio bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or a\n *   <code>0</code> value removes any previously set bitrate limit; This value is set\n *   as a hint for variable bitrate codecs, but will not take effect for fixed bitrate\n *   codecs; Based on our tests, Chrome, Firefox and Safari support a bitrate range of\n *   12000 bps to 256000 bps for Opus codec; This parameter has no effect on iSAC, PCMU\n *   and PCMA codecs\n * @property {?number} [maxVideoBitrate] - Max outgoing video bitrate (bps);\n *   If not specified, retains the existing bitrate limit; A <code>null</code> or\n *   a <code>0</code> value removes any previously set bitrate limit; This value is\n *   set as a hint for variable bitrate codecs, but will not take effect for fixed\n *   bitrate codecs; Based on our tests, Chrome, Firefox and Safari all seem to support\n *   an average bitrate range of 20000 bps (20 kbps) to 8000000 bps (8 mbps) for a\n *   720p VideoTrack.\n *   Note: this limit is not applied for screen share tracks published on Chrome.\n */\n\n/**\n * Options for publishing a {@link LocalTrack}.\n * @typedef {object} LocalTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * Options for publishing a {@link MediaStreamTrack}.\n * @typedef {LocalTrackOptions} MediaStreamTrackPublishOptions\n * @property {Track.Priority} [priority='standard'] - The priority with which the {@link LocalTrack}\n *   is to be published; In Group or Small Group Rooms, the appropriate bandwidth is\n *   allocated to the {@link LocalTrack} based on its {@link Track.Priority}; It has no\n *   effect in Peer-to-Peer Rooms; It defaults to \"standard\" when not provided\n */\n\n/**\n * @private\n * @param {Map<Track.SID, LocalTrackPublication>} trackPublications\n * @param {LocalTrack|MediaStreamTrack} track\n * @returns {?LocalTrackPublication} trackPublication\n */\nfunction getTrackPublication(trackPublications, track) {\n  return Array.from(trackPublications.values()).find(trackPublication => trackPublication.track === track\n    || trackPublication.track.mediaStreamTrack === track) || null;\n}\n\nmodule.exports = LocalParticipant;\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;AAEJ,IAAAA,gBAAgB,GAAKC,OAAO,CAAC,UAAU,CAAC,CAAAD,gBAAxB;AAClB,IAAAE,EAAA,GAAwDD,OAAO,CAAC,QAAQ,CAAC;EAAvEE,YAAY,GAAAD,EAAA,CAAAC,YAAA;EAAEC,uBAAuB,GAAAF,EAAA,CAAAE,uBAAA;EAAEC,UAAU,GAAAH,EAAA,CAAAG,UAAsB;AACzE,IAAAC,EAAA,GAAmCL,OAAO,CAAC,kBAAkB,CAAC;EAAhDM,CAAC,GAAAD,EAAA,CAAAE,UAAA;EAAEC,aAAa,GAAAH,EAAA,CAAAG,aAAgC;AAC5D,IAAAC,kBAAkB,GAAKT,OAAO,CAAC,iBAAiB,CAAC,CAAAS,kBAA/B;AAEpB,IAAAC,EAAA,GAIFV,OAAO,CAAC,mBAAmB,CAAC;EAH9BW,eAAe,GAAAD,EAAA,CAAAC,eAAA;EACfC,cAAc,GAAAF,EAAA,CAAAE,cAAA;EACdC,eAAe,GAAAH,EAAA,CAAAG,eACe;AAEhC,IAAMC,0BAA0B,GAAGd,OAAO,CAAC,0CAA0C,CAAC;AACtF,IAAMe,yBAAyB,GAAGf,OAAO,CAAC,yCAAyC,CAAC;AACpF,IAAMgB,0BAA0B,GAAGhB,OAAO,CAAC,0CAA0C,CAAC;AACtF,IAAMiB,WAAW,GAAGjB,OAAO,CAAC,eAAe,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAAkB,gBAAA,0BAAAC,MAAA;EAA+BC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAC7B;;;;;;EAMA,SAAAD,iBAAYG,SAAS,EAAEC,WAAW,EAAEC,OAAO;IAA3C,IAAAC,KAAA;IACED,OAAO,GAAGE,MAAM,CAACC,MAAM,CAAC;MACtBf,eAAe,EAAAA,eAAA;MACfE,eAAe,EAAAA,eAAA;MACfD,cAAc,EAAAA,cAAA;MACdb,gBAAgB,EAAAA,gBAAA;MAChBe,0BAA0B,EAAAA,0BAAA;MAC1BE,0BAA0B,EAAAA,0BAAA;MAC1BD,yBAAyB,EAAAA,yBAAA;MACzBY,qBAAqB,EAAE,KAAK;MAC5BC,MAAM,EAAEN;KACT,EAAEC,OAAO,CAAC;IAEX,IAAMM,YAAY,GAAGN,OAAO,CAACI,qBAAqB,GAC9C,IAAIG,GAAG,CAACR,WAAW,CAACS,MAAM,CAAC,UAAAC,UAAU;MAAI,OAAAA,UAAU,CAACC,IAAI,KAAK,MAAM;IAA1B,CAA0B,CAAC,CAAC,GACrE,IAAIH,GAAG,EAAE;IAEbN,KAAA,GAAAL,MAAA,CAAAe,IAAA,OAAMb,SAAS,EAAEE,OAAO,CAAC;IAEzBE,MAAM,CAACU,gBAAgB,CAACX,KAAI,EAAE;MAC5BY,cAAc,EAAE;QACdC,KAAK,EAAEd,OAAO,CAACe;OAChB;MACDC,gBAAgB,EAAE;QAChBF,KAAK,EAAEd,OAAO,CAACZ;OAChB;MACD6B,eAAe,EAAE;QACfH,KAAK,EAAEd,OAAO,CAACX;OAChB;MACD6B,gBAAgB,EAAE;QAChBJ,KAAK,EAAEd,OAAO,CAACV;OAChB;MACD6B,iBAAiB,EAAE;QACjBL,KAAK,EAAEd,OAAO,CAACxB;OAChB;MACD4C,2BAA2B,EAAE;QAC3BN,KAAK,EAAEd,OAAO,CAACT;OAChB;MACD8B,0BAA0B,EAAE;QAC1BP,KAAK,EAAEd,OAAO,CAACR;OAChB;MACD8B,2BAA2B,EAAE;QAC3BR,KAAK,EAAEd,OAAO,CAACP;OAChB;MACD8B,aAAa,EAAE;QACbT,KAAK,EAAER;OACR;MACDkB,eAAe,EAAE;QACfC,UAAU,EAAE,IAAI;QAChBC,GAAG,WAAAA,CAAA;UACD,OAAO5B,SAAS,CAAC0B,eAAe;QAClC;;KAEH,CAAC;IAEFvB,KAAI,CAAC0B,2BAA2B,EAAE;;EACpC;EAEA;;;;;;;EAOAhC,gBAAA,CAAAiC,SAAA,CAAAC,SAAS,GAAT,UAAUC,KAAK,EAAEC,EAAE,EAAEC,QAAQ;IAC3B,IAAMC,UAAU,GAAGrC,MAAA,CAAAgC,SAAA,CAAMC,SAAS,CAAAlB,IAAA,OAACmB,KAAK,EAAEC,EAAE,CAAC;IAC7C,IAAIE,UAAU,IAAI,IAAI,CAACC,KAAK,KAAK,cAAc,EAAE;MAC/C,IAAI,CAACC,cAAc,CAACL,KAAK,EAAEE,QAAQ,CAAC;;IAEtC,OAAOC,UAAU;EACnB,CAAC;EAED;;;;;;EAMAtC,gBAAA,CAAAiC,SAAA,CAAAO,cAAc,GAAd,UAAeL,KAAK,EAAEE,QAAQ;;IAC5B;IACA,IAAMI,MAAM,GAAG,CAAA1D,EAAA,GAAAoD,KAAK,CAACO,iBAAiB,cAAA3D,EAAA,uBAAAA,EAAA,CAAE0D,MAAM;IAC9C,IAAI,CAACE,UAAU,CAACC,QAAQ,CAACT,KAAK,CAACU,YAAY,EAAEV,KAAK,CAACW,IAAI,EAAET,QAAQ,EAAEI,MAAM,CAAC;IAC1E,IAAI,CAACM,IAAI,CAACC,IAAI,CAAC,iBAAe9D,UAAU,CAACiD,KAAK,EAAE,IAAI,CAAC,MAAG,EAAEA,KAAK,CAACC,EAAE,CAAC;IACnE,IAAI,CAACW,IAAI,CAACE,KAAK,CAAI/D,UAAU,CAACiD,KAAK,EAAE,IAAI,CAAC,MAAG,EAAEA,KAAK,CAAC;EACvD,CAAC;EAED;;;;;;EAMAnC,gBAAA,CAAAiC,SAAA,CAAAiB,YAAY,GAAZ,UAAaf,KAAK,EAAEC,EAAE;IACpB,IAAMe,YAAY,GAAGlD,MAAA,CAAAgC,SAAA,CAAMiB,YAAY,CAAAlC,IAAA,OAACmB,KAAK,EAAEC,EAAE,CAAC;IAClD,IAAIe,YAAY,IAAI,IAAI,CAACZ,KAAK,KAAK,cAAc,EAAE;MACjD,IAAI,CAACI,UAAU,CAACS,WAAW,CAACjB,KAAK,CAACU,YAAY,CAAC;MAC/C,IAAI,CAACE,IAAI,CAACC,IAAI,CAAC,eAAa9D,UAAU,CAACiD,KAAK,EAAE,IAAI,CAAC,MAAG,EAAEA,KAAK,CAACC,EAAE,CAAC;MACjE,IAAI,CAACW,IAAI,CAACE,KAAK,CAAI/D,UAAU,CAACiD,KAAK,EAAE,IAAI,CAAC,MAAG,EAAEA,KAAK,CAAC;;IAEvD,OAAOgB,YAAY;EACrB,CAAC;EAED;;;;;EAKAnD,gBAAA,CAAAiC,SAAA,CAAAoB,eAAe,GAAf;IACE,OAAOpD,MAAA,CAAAgC,SAAA,CAAMoB,eAAe,CAACrC,IAAI,CAAC,IAAI,CAAC,CAACsC,MAAM,CAAC,CAC7C,CAAC,UAAU,EAAE,eAAe,CAAC,EAC7B,CAAC,SAAS,EAAE,cAAc,CAAC,EAC3B,CAAC,SAAS,EAAE,cAAc,CAAC,CAC5B,CAAC;EACJ,CAAC;EAEDtD,gBAAA,CAAAiC,SAAA,CAAAsB,QAAQ,GAAR;IACE,OAAO,wBAAsB,IAAI,CAACC,WAAW,IAAG,IAAI,CAACC,GAAG,GAAG,OAAK,IAAI,CAACA,GAAK,GAAG,EAAE,OAAG;EACpF,CAAC;EAED;;;EAGAzD,gBAAA,CAAAiC,SAAA,CAAAD,2BAA2B,GAA3B;IAAA,IAAA1B,KAAA;IACE,IAAMoD,GAAG,GAAG,IAAI,CAACX,IAAI;IAErB,IAAI,IAAI,CAACR,KAAK,KAAK,cAAc,EAAE;MACjC;;IAGF,IAAMoB,kBAAkB,GAAG,SAAAA,CAAA7C,UAAU;MACnC,IAAM8C,cAAc,GAAGtD,KAAI,CAACqC,UAAU,CAACkB,cAAc,CAAC/C,UAAU,CAAC+B,YAAY,CAAC;MAC9E,IAAIe,cAAc,EAAE;QAClBA,cAAc,CAACE,OAAO,EAAE;QACxBJ,GAAG,CAACT,KAAK,CAAC,kBAAgB/D,UAAU,CAAC4B,UAAU,EAAE,IAAI,CAAC,MAAG,EAAEA,UAAU,CAACsB,EAAE,CAAC;;IAE7E,CAAC;IAED,IAAM2B,iBAAiB,GAAG,SAAAA,CAAAjD,UAAU;MAClC,IAAM8C,cAAc,GAAGtD,KAAI,CAACqC,UAAU,CAACkB,cAAc,CAAC/C,UAAU,CAAC+B,YAAY,CAAC;MAC9E,IAAIe,cAAc,EAAE;QAClBA,cAAc,CAACI,MAAM,EAAE;QACvBN,GAAG,CAACT,KAAK,CAAC,iBAAe/D,UAAU,CAAC4B,UAAU,EAAE,IAAI,CAAC,MAAG,EAAEA,UAAU,CAACsB,EAAE,CAAC;;IAE5E,CAAC;IAED,IAAM6B,iBAAiB,GAAG,SAAAA,CAAAnD,UAAU;MAClC;MACA;MACA,IAAM8C,cAAc,GAAGtD,KAAI,CAACqC,UAAU,CAACkB,cAAc,CAAC/C,UAAU,CAAC+B,YAAY,CAAC;MAC9E,IAAIe,cAAc,EAAE;QAClBA,cAAc,CAACM,IAAI,EAAE;;MAEvB,OAAON,cAAc;IACvB,CAAC;IAED,IAAMO,YAAY,GAAG,SAAAA,CAAA5B,KAAK;MACxBmB,GAAG,CAACT,KAAK,CAAC,wBAAwB,EAAEV,KAAK,CAAC;MAC1C,IAAIA,KAAK,KAAK,cAAc,EAAE;QAC5BmB,GAAG,CAACT,KAAK,CAAC,qCAAqC,CAAC;QAChD3C,KAAI,CAACqC,UAAU,CAACyB,cAAc,CAAC,cAAc,EAAED,YAAY,CAAC;QAC5D7D,KAAI,CAAC8D,cAAc,CAAC,eAAe,EAAET,kBAAkB,CAAC;QACxDrD,KAAI,CAAC8D,cAAc,CAAC,cAAc,EAAEL,iBAAiB,CAAC;QACtDzD,KAAI,CAAC8D,cAAc,CAAC,cAAc,EAAEH,iBAAiB,CAAC;QAEtD;QACA;QACA3D,KAAI,CAAC+D,OAAO,CAACC,OAAO,CAAC,UAAAnC,KAAK;UACxB,IAAMyB,cAAc,GAAGK,iBAAiB,CAAC9B,KAAK,CAAC;UAC/C,IAAIyB,cAAc,EAAE;YAClBzB,KAAK,CAACU,YAAY,CAAC0B,WAAW,CAACX,cAAc,CAACY,iBAAiB,CAAC;;QAEpE,CAAC,CAAC;QAEFd,GAAG,CAACV,IAAI,CAAC,6CAA2C1C,KAAI,CAACsB,aAAa,CAAC6C,IAAI,wCAAqC,CAAC;QACjHnE,KAAI,CAACsB,aAAa,CAAC0C,OAAO,CAAC,UAAAnC,KAAK;UAC9BA,KAAK,CAAC+B,IAAI,EAAE;QACd,CAAC,CAAC;OACH,MAAM,IAAI3B,KAAK,KAAK,WAAW,EAAE;QAChC;QACA;QACA;QACAmB,GAAG,CAACV,IAAI,CAAC,aAAa,CAAC;QAEvB;QACA;QACA0B,UAAU,CAAC;UAAM,OAAApE,KAAI,CAACqE,IAAI,CAAC,aAAa,CAAC;QAAxB,CAAwB,EAAE,CAAC,CAAC;;IAEjD,CAAC;IAED,IAAI,CAACC,EAAE,CAAC,eAAe,EAAEjB,kBAAkB,CAAC;IAC5C,IAAI,CAACiB,EAAE,CAAC,cAAc,EAAEb,iBAAiB,CAAC;IAC1C,IAAI,CAACa,EAAE,CAAC,cAAc,EAAEX,iBAAiB,CAAC;IAE1C,IAAI,CAACtB,UAAU,CAACiC,EAAE,CAAC,cAAc,EAAET,YAAY,CAAC;IAEhD,IAAI,CAACE,OAAO,CAACC,OAAO,CAAC,UAAAnC,KAAK;MACxB7B,KAAI,CAACkC,cAAc,CAACL,KAAK,EAAE7C,aAAa,CAACuF,iBAAiB,CAAC;MAC3DvE,KAAI,CAACwE,iCAAiC,CAAC3C,KAAK,CAAC,CAAC4C,KAAK,CAAC,UAAAC,KAAK;QACvD;QACAtB,GAAG,CAACuB,IAAI,CAAC,uDAAqD9C,KAAK,MAAG,EAAE6C,KAAK,CAAC;MAChF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED;;;;;EAKAhF,gBAAA,CAAAiC,SAAA,CAAA6C,iCAAiC,GAAjC,UAAkChE,UAAU;IAC1C,IAAIoE,qBAAqB,GAAGC,mBAAmB,CAAC,IAAI,CAACzE,MAAM,EAAEI,UAAU,CAAC;IACxE,IAAIoE,qBAAqB,EAAE;MACzB,OAAOE,OAAO,CAACC,OAAO,CAACH,qBAAqB,CAAC;;IAG/C,IAAMxB,GAAG,GAAG,IAAI,CAACX,IAAI;IACrB,IAAMuC,IAAI,GAAG,IAAI;IAEjB,IAAM1B,cAAc,GAAG,IAAI,CAACjB,UAAU,CAACkB,cAAc,CAAC/C,UAAU,CAAC+B,YAAY,CAAC;IAC9E,IAAI,CAACe,cAAc,EAAE;MACnB,OAAOwB,OAAO,CAACG,MAAM,CAAC,IAAIC,KAAK,CAAC,2BAAyB1E,UAAU,yBAAsB,CAAC,CAAC;;IAG7F,OAAO,IAAIsE,OAAO,CAAC,UAACC,OAAO,EAAEE,MAAM;MACjC,SAASE,OAAOA,CAAA;QACd,IAAMT,KAAK,GAAGpB,cAAc,CAACoB,KAAK;QAClC,IAAIA,KAAK,EAAE;UACTpB,cAAc,CAACQ,cAAc,CAAC,SAAS,EAAEqB,OAAO,CAAC;UACjD/B,GAAG,CAACuB,IAAI,CAAC,2BAAyB/F,UAAU,CAAC4B,UAAU,EAAE,IAAI,CAAC,UAAKkE,KAAK,CAACU,OAAS,CAAC;UACnFJ,IAAI,CAACpC,YAAY,CAACpC,UAAU,EAAEA,UAAU,CAACsB,EAAE,CAAC;UAC5CsC,UAAU,CAAC;YACTY,IAAI,CAACX,IAAI,CAAC,wBAAwB,EAAEK,KAAK,EAAElE,UAAU,CAAC;UACxD,CAAC,CAAC;UACFyE,MAAM,CAACP,KAAK,CAAC;UACb;;QAGF,IAAI,CAACM,IAAI,CAACjB,OAAO,CAACsB,GAAG,CAAC7E,UAAU,CAACsB,EAAE,CAAC,EAAE;UACpCwB,cAAc,CAACQ,cAAc,CAAC,SAAS,EAAEqB,OAAO,CAAC;UACjDF,MAAM,CAAC,IAAIC,KAAK,CAAC,SAAO1E,UAAU,qBAAkB,CAAC,CAAC;UACtD;;QAGF,IAAM2C,GAAG,GAAGG,cAAc,CAACH,GAAG;QAC9B,IAAI,CAACA,GAAG,EAAE;UACR;;QAGFG,cAAc,CAACQ,cAAc,CAAC,SAAS,EAAEqB,OAAO,CAAC;QAEjD,IAAMpF,OAAO,GAAG;UACdqD,GAAG,EAAAA,GAAA;UACH9D,0BAA0B,EAAE0F,IAAI,CAAC7D,2BAA2B;UAC5D5B,yBAAyB,EAAEyF,IAAI,CAAC5D,0BAA0B;UAC1D5B,0BAA0B,EAAEwF,IAAI,CAAC3D;SAClC;QAEDuD,qBAAqB,GAAGC,mBAAmB,CAACG,IAAI,CAAC5E,MAAM,EAAEI,UAAU,CAAC;QAEpE,IAAM8E,cAAc,GAAG,SAAAA,CAAAC,iBAAiB;UACtC,OAAAP,IAAI,CAACX,IAAI,CAAC,cAAc,EAAEkB,iBAAiB,EAAEX,qBAAqB,CAAC;QAAnE,CAAmE;QAErE,IAAMY,sBAAsB,GAAG,SAAAA,CAAA;UAC7B,OAAAR,IAAI,CAACX,IAAI,CAAC,sBAAsB,EAAEO,qBAAqB,CAAC;QAAxD,CAAwD;QAE1D,IAAMa,SAAS,GAAG,SAAAA,CAAAC,WAAW;UAC3Bd,qBAAqB,CAACd,cAAc,CAAC,cAAc,EAAEwB,cAAc,CAAC;UACpEV,qBAAqB,CAACd,cAAc,CAAC,sBAAsB,EAAE0B,sBAAsB,CAAC;UACpFR,IAAI,CAACW,cAAc,CAACD,WAAW,CAAC7D,KAAK,CAAC;QACxC,CAAC;QAED,IAAI,CAAC+C,qBAAqB,EAAE;UAC1BA,qBAAqB,GAAGjG,uBAAuB,CAAC6B,UAAU,EAAE8C,cAAc,EAAEmC,SAAS,EAAE1F,OAAO,CAAC;UAC/FiF,IAAI,CAACY,oBAAoB,CAAChB,qBAAqB,CAAC;;QAGlDA,qBAAqB,CAACN,EAAE,CAAC,SAAS,EAAEgB,cAAc,CAAC;QACnDV,qBAAqB,CAACN,EAAE,CAAC,iBAAiB,EAAEkB,sBAAsB,CAAC;QAE3D,IAAAvD,KAAK,GAAK+C,IAAI,CAAC3C,UAAU,CAAAJ,KAApB;QACb,IAAIA,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,YAAY,EAAE;UACnD,IAAIzB,UAAU,CAACqF,uBAAuB,EAAE;YACtCrF,UAAU,CAACqF,uBAAuB,CAACvB,EAAE,CAAC,OAAO,EAAE,UAAAwB,KAAK;cAClDd,IAAI,CAACpE,cAAc,CAACyD,IAAI,CAAC,OAAO,EAAE;gBAChC7B,IAAI,EAAEsD,KAAK,CAACtD,IAAI;gBAChBuD,OAAO,EAAED,KAAK,CAACE,IAAI;gBACnBC,KAAK,EAAE,iBAAiB;gBACxBC,KAAK,EAAE;eACR,CAAC;YACJ,CAAC,CAAC;;UAGJ;UACA,IAAI1F,UAAU,CAAC2F,cAAc,EAAE;YAC7B3F,UAAU,CAAC4F,cAAc,EAAE;YAC3B5F,UAAU,CAAC6F,0BAA0B,CAAC,IAAI,CAAC;;;QAG/C,IAAIpE,KAAK,KAAK,WAAW,EAAE;UACzBmC,UAAU,CAAC;YACTY,IAAI,CAACX,IAAI,CAAC,gBAAgB,EAAEO,qBAAqB,CAAC;UACpD,CAAC,CAAC;;QAEJG,OAAO,CAACH,qBAAqB,CAAC;MAChC;MAEAtB,cAAc,CAACgB,EAAE,CAAC,SAAS,EAAEa,OAAO,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,CA+BE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqCFzF,gBAAA,CAAAiC,SAAA,CAAA2E,YAAY,GAAZ,UAAaC,4BAA4B,EAAExG,OAAO;IAChD,IAAMyG,gBAAgB,GAAG3B,mBAAmB,CAAC,IAAI,CAACzE,MAAM,EAAEmG,4BAA4B,CAAC;IACvF,IAAIC,gBAAgB,EAAE;MACpB,OAAO1B,OAAO,CAACC,OAAO,CAACyB,gBAAgB,CAAC;;IAG1CzG,OAAO,GAAGE,MAAM,CAACC,MAAM,CAAC;MACtBkD,GAAG,EAAE,IAAI,CAACX,IAAI;MACdV,QAAQ,EAAE/C,aAAa,CAACuF,iBAAiB;MACzCpF,eAAe,EAAE,IAAI,CAAC4B,gBAAgB;MACtC3B,cAAc,EAAE,IAAI,CAAC4B,eAAe;MACpC3B,eAAe,EAAE,IAAI,CAAC4B,gBAAgB;MACtC1C,gBAAgB,EAAE,IAAI,CAAC2C;KACxB,EAAEnB,OAAO,CAAC;IAEX,IAAIS,UAAU;IACd,IAAI;MACFA,UAAU,GAAG9B,YAAY,CAAC6H,4BAA4B,EAAExG,OAAO,CAAC;KACjE,CAAC,OAAO2E,KAAK,EAAE;MACd,OAAOI,OAAO,CAACG,MAAM,CAACP,KAAK,CAAC;;IAG9B,IAAMtC,iBAAiB,GAAG5B,UAAU,CAAC4B,iBAAiB;IACtD,IAAMqE,sBAAsB,GAAG,IAAI,CAACpE,UAAU,CAACqE,eAAe;IAC9D,IAAItE,iBAAiB,IAAI,CAACqE,sBAAsB,CAACE,QAAQ,CAACvE,iBAAiB,CAACD,MAAM,CAAC,EAAE;MACnF,IAAI,CAACM,IAAI,CAACkC,IAAI,CAAIvC,iBAAiB,CAACD,MAAM,6DAA0D,CAAC;MACrGC,iBAAiB,CAACwE,kBAAkB,EAAE;;IAGxC,IAAMC,cAAc,GAAG5G,MAAM,CAAC6G,MAAM,CAAC9H,aAAa,CAAC;IACnD,IAAI,CAAC6H,cAAc,CAACF,QAAQ,CAAC5G,OAAO,CAACgC,QAAQ,CAAC,EAAE;MAC9C;MACA,OAAO+C,OAAO,CAACG,MAAM,CAACnG,CAAC,CAACiI,aAAa,CAAC,mCAAmC,EAAEF,cAAc,CAAC,CAAC;;IAG7F,IAAIG,eAAe,GAAG,IAAI,CAACpF,SAAS,CAACpB,UAAU,EAAEA,UAAU,CAACsB,EAAE,EAAE/B,OAAO,CAACgC,QAAQ,CAAC,IAC5E,IAAI,CAACgC,OAAO,CAACtC,GAAG,CAACjB,UAAU,CAACsB,EAAE,CAAC;IAEpC,OAAO,IAAI,CAAC0C,iCAAiC,CAACwC,eAAe,CAAC;EAChE,CAAC;EAED;;;;;;;;;;;;;EAaAtH,gBAAA,CAAAiC,SAAA,CAAAsF,aAAa,GAAb,UAAc7G,MAAM;IAClB,IAAI,CAAC8G,KAAK,CAACC,OAAO,CAAC/G,MAAM,CAAC,EAAE;MAC1B;MACA,MAAMtB,CAAC,CAACsI,YAAY,CAAC,QAAQ,EAC3B,gFAAgF,CAAC;;IAErF,OAAOtC,OAAO,CAACuC,GAAG,CAACjH,MAAM,CAACkH,GAAG,CAAC,IAAI,CAAChB,YAAY,EAAE,IAAI,CAAC,CAAC;EACzD,CAAC;EAED5G,gBAAA,CAAAiC,SAAA,CAAA4F,mBAAmB,GAAnB;IACE,IAAI,CAAC9E,IAAI,CAACkC,IAAI,CAAC,uGAAuG,CAAC;EACzH,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BAjF,gBAAA,CAAAiC,SAAA,CAAA6F,8BAA8B,GAA9B,UAA+BC,2BAA2B;IACxD,IAAI,OAAOA,2BAA2B,KAAK,QAAQ,IAC9CA,2BAA2B,KAAK,IAAI,EAAE;MACzC;MACA,MAAM3I,CAAC,CAACsI,YAAY,CAAC,6BAA6B,EAAE,6BAA6B,CAAC;;IAEpF,CAAC,OAAO,EAAE,QAAQ,CAAC,CAACpD,OAAO,CAAC,UAAA0D,IAAI;MAC9B,IAAIA,IAAI,IAAID,2BAA2B,KAAK,OAAOA,2BAA2B,CAACC,IAAI,CAAC,KAAK,QAAQ,IAAIC,KAAK,CAACF,2BAA2B,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE;QAC9I;QACA,MAAM5I,CAAC,CAACsI,YAAY,CAAC,iCAA+BM,IAAM,EAAE,QAAQ,CAAC;;IAEzE,CAAC,CAAC;IACF,IAAI,CAACrF,UAAU,CAACmF,8BAA8B,CAACC,2BAA2B,CAAC;IAC3E,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;EAQA/H,gBAAA,CAAAiC,SAAA,CAAAiG,aAAa,GAAb,UAAcC,kBAAkB;IAC9B,IAAI,OAAOA,kBAAkB,KAAK,WAAW,IACxC,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;MAC3C;MACA,MAAM/I,CAAC,CAACsI,YAAY,CAAC,oBAAoB,EACvC,uCAAuC,CAAC;;IAG5C,IAAIS,kBAAkB,EAAE;MACtB,IAAI,IAAI,CAACxF,UAAU,CAACyF,aAAa,EAAE,CAACC,iBAAiB,IAAIF,kBAAkB,CAACG,eAAe,EAAE;QAC3F;QACA,MAAMlJ,CAAC,CAACsI,YAAY,CAAC,oBAAoB,EAAE,uFAAuF,CAAC;;MAGrI,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAACpD,OAAO,CAAC,UAAA0D,IAAI;QACjD,IAAI,OAAOG,kBAAkB,CAACH,IAAI,CAAC,KAAK,WAAW,IAC9C,OAAOG,kBAAkB,CAACH,IAAI,CAAC,KAAK,QAAQ,IAC5CG,kBAAkB,CAACH,IAAI,CAAC,KAAK,IAAI,EAAE;UACtC;UACA,MAAM5I,CAAC,CAACsI,YAAY,CAAC,wBAAsBM,IAAM,EAAE,2BAA2B,CAAC;;MAEnF,CAAC,CAAC;KACH,MAAM,IAAIG,kBAAkB,KAAK,IAAI,EAAE;MACtCA,kBAAkB,GAAG;QAAEI,eAAe,EAAE,IAAI;QAAED,eAAe,EAAE;MAAI,CAAE;;IAGvE,IAAI,CAAC3F,UAAU,CAACuF,aAAa,CAACC,kBAAkB,CAAC;IACjD,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;;;;EAWAnI,gBAAA,CAAAiC,SAAA,CAAAgE,cAAc,GAAd,UAAe9D,KAAK;IAClB5C,kBAAkB,CAAC4C,KAAK,EAAE;MACxB1C,eAAe,EAAE,IAAI,CAAC4B,gBAAgB;MACtC3B,cAAc,EAAE,IAAI,CAAC4B,eAAe;MACpC3B,eAAe,EAAE,IAAI,CAAC4B,gBAAgB;MACtC1C,gBAAgB,EAAE,IAAI,CAAC2C;KACxB,CAAC;IAEF,IAAIV,UAAU,GAAG,IAAI,CAACuD,OAAO,CAACtC,GAAG,CAACI,KAAK,CAACC,EAAE,CAAC;IAC3C,IAAI,CAACtB,UAAU,EAAE;MACf,OAAO,IAAI;;IAGb,IAAM8C,cAAc,GAAG,IAAI,CAACjB,UAAU,CAACkB,cAAc,CAAC/C,UAAU,CAAC+B,YAAY,CAAC;IAC9Ee,cAAc,CAAC4E,aAAa,CAAC,IAAIhD,KAAK,CAAC,SAAO1E,UAAU,qBAAkB,CAAC,CAAC;IAE5EA,UAAU,GAAG,IAAI,CAACoC,YAAY,CAACpC,UAAU,EAAEA,UAAU,CAACsB,EAAE,CAAC;IACzD,IAAI,CAACtB,UAAU,EAAE;MACf,OAAO,IAAI;;IAGb,IAAMoE,qBAAqB,GAAGC,mBAAmB,CAAC,IAAI,CAACzE,MAAM,EAAEI,UAAU,CAAC;IAC1E,IAAIoE,qBAAqB,EAAE;MACzB,IAAI,CAACuD,uBAAuB,CAACvD,qBAAqB,CAAC;;IAErD,OAAOA,qBAAqB;EAC9B,CAAC;EAED;;;;;;;;;;EAUAlF,gBAAA,CAAAiC,SAAA,CAAAyG,eAAe,GAAf,UAAgBhI,MAAM;IAAtB,IAAAJ,KAAA;IACE,IAAI,CAACkH,KAAK,CAACC,OAAO,CAAC/G,MAAM,CAAC,EAAE;MAC1B;MACA,MAAMtB,CAAC,CAACsI,YAAY,CAAC,QAAQ,EAC3B,gFAAgF,CAAC;;IAGrF,OAAOhH,MAAM,CAACiI,MAAM,CAAC,UAACC,iBAAiB,EAAEzG,KAAK;MAC5C,IAAM0G,gBAAgB,GAAGvI,KAAI,CAAC2F,cAAc,CAAC9D,KAAK,CAAC;MACnD,OAAO0G,gBAAgB,GAAGD,iBAAiB,CAACtF,MAAM,CAACuF,gBAAgB,CAAC,GAAGD,iBAAiB;IAC1F,CAAC,EAAE,EAAE,CAAC;EACR,CAAC;EACH,OAAA5I,gBAAC;AAAD,CAAC,CAllB8BD,WAAW;AAolB1C;;;;AAKA;;;;AAKA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;;;;;;;;;AAcA;;;;;;;;AASA;;;;;AAMA;;;;;;;AAQA;;;;;;;AAQA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;AASA;;;;;;;;AASA;;;;;;AAMA,SAASoF,mBAAmBA,CAAC2D,iBAAiB,EAAE3G,KAAK;EACnD,OAAOqF,KAAK,CAACuB,IAAI,CAACD,iBAAiB,CAAC1B,MAAM,EAAE,CAAC,CAAC4B,IAAI,CAAC,UAAAlC,gBAAgB;IAAI,OAAAA,gBAAgB,CAAC3E,KAAK,KAAKA,KAAK,IAClG2E,gBAAgB,CAAC3E,KAAK,CAAC8G,gBAAgB,KAAK9G,KAAK;EADiB,CACjB,CAAC,IAAI,IAAI;AACjE;AAEA+G,MAAM,CAACC,OAAO,GAAGnJ,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}