{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar AudioTrack = require('./audiotrack');\nvar mixinRemoteMediaTrack = require('./remotemediatrack');\nvar RemoteMediaAudioTrack = mixinRemoteMediaTrack(AudioTrack);\n/**\n * A {@link RemoteAudioTrack} represents an {@link AudioTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends AudioTrack\n * @property {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n * @property {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteAudioTrack}\n * @emits RemoteAudioTrack#disabled\n * @emits RemoteAudioTrack#enabled\n * @emits RemoteAudioTrack#started\n * @emits RemoteAudioTrack#switchedOff\n * @emits RemoteAudioTrack#switchedOn\n */\nvar RemoteAudioTrack = /** @class */function (_super) {\n  __extends(RemoteAudioTrack, _super);\n  /**\n   * Construct a {@link RemoteAudioTrack}.\n   * @param {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n   * @param {MediaTrackReceiver} mediaTrackReceiver - An audio MediaStreamTrack container\n   * @param {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n   * @param {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n   * @param {function(?Track.Priority): void} setPriority - Set or clear the subscribe\n   *  {@link Track.Priority} of the {@link RemoteAudioTrack}\n   * @param {function(ClientRenderHint): void} setRenderHint - Set render hints.\n   * @param {{log: Log}} options - The {@link RemoteTrack} options\n   */\n  function RemoteAudioTrack(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) {\n    return _super.call(this, sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) || this;\n  }\n  RemoteAudioTrack.prototype.toString = function () {\n    return \"[RemoteAudioTrack #\" + this._instanceId + \": \" + this.sid + \"]\";\n  };\n  /**\n   * @private\n   */\n  RemoteAudioTrack.prototype._start = function () {\n    _super.prototype._start.call(this);\n    if (this._dummyEl) {\n      // NOTE(mpatwardhan): To fix VIDEO-6336, clear dummy element after the\n      // RemoteAudioTrack has started.\n      this._dummyEl.srcObject = null;\n      this._dummyEl = null;\n    }\n  };\n  /**\n   * Update the subscribe {@link Track.Priority} of the {@link RemoteAudioTrack}.\n   * @param {?Track.Priority} priority - the new subscribe {@link Track.Priority};\n   *   Currently setPriority has no effect on audio tracks.\n   * @returns {this}\n   * @throws {RangeError}\n   */\n  RemoteAudioTrack.prototype.setPriority = function (priority) {\n    return _super.prototype.setPriority.call(this, priority);\n  };\n  return RemoteAudioTrack;\n}(RemoteMediaAudioTrack);\n/**\n * The {@link RemoteAudioTrack} was disabled, i.e. \"muted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   disabled\n * @event RemoteAudioTrack#disabled\n */\n/**\n * The {@link RemoteAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   enabled\n * @event RemoteAudioTrack#enabled\n */\n/**\n * The {@link RemoteAudioTrack} started. This means there is enough audio data\n * to begin playback.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that started\n * @event RemoteAudioTrack#started\n */\n/**\n * A {@link RemoteAudioTrack} was switched off.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched off\n * @event RemoteAudioTrack#switchedOff\n */\n/**\n * A {@link RemoteAudioTrack} was switched on.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched on\n * @event RemoteAudioTrack#switchedOn\n */\nmodule.exports = RemoteAudioTrack;","map":{"version":3,"names":["AudioTrack","require","mixinRemoteMediaTrack","RemoteMediaAudioTrack","RemoteAudioTrack","_super","__extends","sid","mediaTrackReceiver","isEnabled","isSwitchedOff","setPriority","setRenderHint","options","call","prototype","toString","_instanceId","_start","_dummyEl","srcObject","priority","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/media/track/remoteaudiotrack.js"],"sourcesContent":["'use strict';\n\nconst AudioTrack = require('./audiotrack');\nconst mixinRemoteMediaTrack = require('./remotemediatrack');\n\nconst RemoteMediaAudioTrack = mixinRemoteMediaTrack(AudioTrack);\n\n/**\n * A {@link RemoteAudioTrack} represents an {@link AudioTrack} published to a\n * {@link Room} by a {@link RemoteParticipant}.\n * @extends AudioTrack\n * @property {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n * @property {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n * @property {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteAudioTrack}\n * @emits RemoteAudioTrack#disabled\n * @emits RemoteAudioTrack#enabled\n * @emits RemoteAudioTrack#started\n * @emits RemoteAudioTrack#switchedOff\n * @emits RemoteAudioTrack#switchedOn\n */\nclass RemoteAudioTrack extends RemoteMediaAudioTrack {\n  /**\n   * Construct a {@link RemoteAudioTrack}.\n   * @param {Track.SID} sid - The {@link RemoteAudioTrack}'s SID\n   * @param {MediaTrackReceiver} mediaTrackReceiver - An audio MediaStreamTrack container\n   * @param {boolean} isEnabled - Whether the {@link RemoteAudioTrack} is enabled\n   * @param {boolean} isSwitchedOff - Whether the {@link RemoteAudioTrack} is switched off\n   * @param {function(?Track.Priority): void} setPriority - Set or clear the subscribe\n   *  {@link Track.Priority} of the {@link RemoteAudioTrack}\n   * @param {function(ClientRenderHint): void} setRenderHint - Set render hints.\n   * @param {{log: Log}} options - The {@link RemoteTrack} options\n   */\n  constructor(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) {\n    super(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options);\n  }\n\n  toString() {\n    return `[RemoteAudioTrack #${this._instanceId}: ${this.sid}]`;\n  }\n\n  /**\n   * @private\n   */\n  _start() {\n    super._start();\n    if (this._dummyEl) {\n      // NOTE(mpatwardhan): To fix VIDEO-6336, clear dummy element after the\n      // RemoteAudioTrack has started.\n      this._dummyEl.srcObject = null;\n      this._dummyEl = null;\n    }\n  }\n\n  /**\n   * Update the subscribe {@link Track.Priority} of the {@link RemoteAudioTrack}.\n   * @param {?Track.Priority} priority - the new subscribe {@link Track.Priority};\n   *   Currently setPriority has no effect on audio tracks.\n   * @returns {this}\n   * @throws {RangeError}\n   */\n  setPriority(priority) {\n    return super.setPriority(priority);\n  }\n}\n\n/**\n * The {@link RemoteAudioTrack} was disabled, i.e. \"muted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   disabled\n * @event RemoteAudioTrack#disabled\n */\n\n/**\n * The {@link RemoteAudioTrack} was enabled, i.e. \"unmuted\".\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   enabled\n * @event RemoteAudioTrack#enabled\n */\n\n/**\n * The {@link RemoteAudioTrack} started. This means there is enough audio data\n * to begin playback.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that started\n * @event RemoteAudioTrack#started\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched off.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched off\n * @event RemoteAudioTrack#switchedOff\n */\n\n/**\n * A {@link RemoteAudioTrack} was switched on.\n * @param {RemoteAudioTrack} track - The {@link RemoteAudioTrack} that was\n *   switched on\n * @event RemoteAudioTrack#switchedOn\n */\n\nmodule.exports = RemoteAudioTrack;\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,IAAMC,qBAAqB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAE3D,IAAME,qBAAqB,GAAGD,qBAAqB,CAACF,UAAU,CAAC;AAE/D;;;;;;;;;;;;;;AAcA,IAAAI,gBAAA,0BAAAC,MAAA;EAA+BC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAC7B;;;;;;;;;;;EAWA,SAAAD,iBAAYG,GAAG,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,aAAa,EAAEC,WAAW,EAAEC,aAAa,EAAEC,OAAO;WAChGR,MAAA,CAAAS,IAAA,OAAMP,GAAG,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,aAAa,EAAEC,WAAW,EAAEC,aAAa,EAAEC,OAAO,CAAC;EAC/F;EAEAT,gBAAA,CAAAW,SAAA,CAAAC,QAAQ,GAAR;IACE,OAAO,wBAAsB,IAAI,CAACC,WAAW,UAAK,IAAI,CAACV,GAAG,MAAG;EAC/D,CAAC;EAED;;;EAGAH,gBAAA,CAAAW,SAAA,CAAAG,MAAM,GAAN;IACEb,MAAA,CAAAU,SAAA,CAAMG,MAAM,CAAAJ,IAAA,MAAE;IACd,IAAI,IAAI,CAACK,QAAQ,EAAE;MACjB;MACA;MACA,IAAI,CAACA,QAAQ,CAACC,SAAS,GAAG,IAAI;MAC9B,IAAI,CAACD,QAAQ,GAAG,IAAI;;EAExB,CAAC;EAED;;;;;;;EAOAf,gBAAA,CAAAW,SAAA,CAAAJ,WAAW,GAAX,UAAYU,QAAQ;IAClB,OAAOhB,MAAA,CAAAU,SAAA,CAAMJ,WAAW,CAAAG,IAAA,OAACO,QAAQ,CAAC;EACpC,CAAC;EACH,OAAAjB,gBAAC;AAAD,CAAC,CA3C8BD,qBAAqB;AA6CpD;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOAmB,MAAM,CAACC,OAAO,GAAGnB,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}