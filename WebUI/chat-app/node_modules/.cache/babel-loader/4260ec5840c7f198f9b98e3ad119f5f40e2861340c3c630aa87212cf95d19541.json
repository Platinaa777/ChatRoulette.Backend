{"ast":null,"code":"var _jsxFileName = \"/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/src/components/TwilioVideo.jsx\",\n  _s = $RefreshSig$();\nimport Video, { connect, createLocalVideoTrack } from 'twilio-video';\nimport axios from 'axios';\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport '../styles/TwilioVideo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TwilioVideo = () => {\n  _s();\n  const {\n    connect\n  } = require('twilio-video');\n  const [token, setToken] = useState('');\n  const [localVideoTrack, setLocalVideoTrack] = useState(null);\n  useEffect(() => {\n    // Получаем доступ к медиапотокам браузера\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      // Создаем видео трек из медиапотока\n      const videoTrack = new Video.LocalVideoTrack(mediaStream.getVideoTracks()[0]);\n      setLocalVideoTrack(videoTrack);\n    }).catch(error => {\n      console.error('Error accessing media devices:', error);\n    });\n  }, []);\n  const ShowVideo = () => {\n    createLocalVideoTrack().then(track => {\n      const localMediaContainer = document.getElementById('local-media');\n      localMediaContainer.appendChild(track.attach());\n    });\n  };\n  const ConnectTo = async () => {\n    const response = await fetch(`http://localhost:8003/Chat/find-room`);\n    if (!response.ok) {\n      console.error(`Unable to connect to Room: ${await response.json()}`);\n    }\n    const jsonData = await response.json();\n    if (!jsonData.isValid) {\n      console.error(jsonData.message);\n    }\n    setToken(jsonData.accessToken);\n    console.log(token);\n    console.log(jsonData);\n    console.log(jsonData.roomName);\n    connect(token, {\n      name: jsonData.roomName\n    }).then(room => {\n      console.log(`Successfully joined a Room: ${room}`);\n      room.on('participantConnected', participant => {\n        console.log(`A remote Participant connected: ${participant}`);\n      });\n    }, error => {\n      console.error(`Unable to connect to Room: ${error.message}`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Twilio Video Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => ConnectTo(),\n        children: \"Connect to Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"local-media\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(TwilioVideo, \"PiFMVv2PuK0pBLSbSsqtvdWj2ms=\");\n_c = TwilioVideo;\nexport default TwilioVideo;\nvar _c;\n$RefreshReg$(_c, \"TwilioVideo\");","map":{"version":3,"names":["Video","connect","createLocalVideoTrack","axios","React","useState","useEffect","jsxDEV","_jsxDEV","TwilioVideo","_s","require","token","setToken","localVideoTrack","setLocalVideoTrack","navigator","mediaDevices","getUserMedia","video","audio","then","mediaStream","videoTrack","LocalVideoTrack","getVideoTracks","catch","error","console","ShowVideo","track","localMediaContainer","document","getElementById","appendChild","attach","ConnectTo","response","fetch","ok","json","jsonData","isValid","message","accessToken","log","roomName","name","room","on","participant","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","_c","$RefreshReg$"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/src/components/TwilioVideo.jsx"],"sourcesContent":["import Video, {connect, createLocalVideoTrack} from 'twilio-video';\nimport axios from 'axios';\nimport React from \"react\";\nimport {useState, useEffect} from \"react\";\nimport '../styles/TwilioVideo.css'\n\nconst TwilioVideo = () => {\n    const { connect } = require('twilio-video');\n    const [token, setToken] = useState('');\n    const [localVideoTrack, setLocalVideoTrack] = useState(null);\n\n    useEffect(() => {\n        // Получаем доступ к медиапотокам браузера\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n            .then(mediaStream => {\n                // Создаем видео трек из медиапотока\n                const videoTrack = new Video.LocalVideoTrack(mediaStream.getVideoTracks()[0]);\n                setLocalVideoTrack(videoTrack);\n            })\n            .catch(error => {\n                console.error('Error accessing media devices:', error);\n            });\n    }, []);\n\n    const ShowVideo = () => {\n        \n        createLocalVideoTrack().then(track => {\n            const localMediaContainer = document.getElementById('local-media');\n            localMediaContainer.appendChild(track.attach());\n        });\n    }\n    \n    const ConnectTo = async () => {\n        \n        const response = await fetch(`http://localhost:8003/Chat/find-room`);\n        \n        if (!response.ok) {\n            console.error(`Unable to connect to Room: ${await response.json()}`);\n        }\n        \n        const jsonData = await response.json()\n        \n        if (!jsonData.isValid) {\n            console.error(jsonData.message);\n        }\n        \n        setToken(jsonData.accessToken);\n        console.log(token);\n        console.log(jsonData);\n        console.log(jsonData.roomName);\n        \n        connect(token, { name: jsonData.roomName })\n            .then(room => {\n                console.log(`Successfully joined a Room: ${room}`);\n                room.on('participantConnected', participant => {\n                console.log(`A remote Participant connected: ${participant}`);\n            });\n            }, error => {\n            console.error(`Unable to connect to Room: ${error.message}`);\n        });\n    }\n   \n    return (\n        <div>\n            <h1>Twilio Video Token</h1>\n            \n            <h1>\n                <button onClick={() => ConnectTo()}>Connect to Room</button>\n            </h1>\n            {/*<div id=\"video-container\">*/}\n            {/*    {localVideoTrack && <video ref={ref => localVideoTrack.attach(ref)} autoPlay={true} controls={true}></video>}*/}\n            {/*</div>*/}\n            <div id=\"local-media\">\n                \n            </div>\n        </div>\n    );\n};\n\nexport default TwilioVideo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}