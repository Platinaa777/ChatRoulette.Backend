{"ast":null,"code":"'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar guessBrowser = require('../webrtc/util').guessBrowser;\nvar IceReportFactory = require('./icereportfactory');\nvar PeerConnectionReport = require('./peerconnectionreport');\nvar ReceiverReportFactory = require('./receiverreportfactory');\nvar SenderReportFactory = require('./senderreportfactory');\n/**\n * @typedef {string} TrackId\n */\n/**\n * @typedef {string} StatsId\n */\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\nvar PeerConnectionReportFactory = /** @class */function () {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  function PeerConnectionReportFactory(pc) {\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n  PeerConnectionReportFactory.prototype.next = function () {\n    var _this = this;\n    var updatePromise = guessBrowser() === 'firefox' ? updateFirefox(this) : updateChrome(this);\n    return updatePromise.then(function () {\n      var audioSenderReportFactories = __spreadArray([], __read(_this.audio.send.values()));\n      var videoSenderReportFactories = __spreadArray([], __read(_this.video.send.values()));\n      var audioReceiverReportFactories = __spreadArray([], __read(_this.audio.recv.values()));\n      var videoReceiverReportFactories = __spreadArray([], __read(_this.video.recv.values()));\n      var report = new PeerConnectionReport(_this.ice.lastReport, {\n        send: audioSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: audioReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      }, {\n        send: videoSenderReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        }),\n        recv: videoReceiverReportFactories.map(function (factory) {\n          return factory.lastReport;\n        }).filter(function (report) {\n          return report;\n        })\n      });\n      _this.lastReport = report;\n      return report;\n    });\n  };\n  return PeerConnectionReportFactory;\n}();\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n    var trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(function (report) {\n      var e_1, _a;\n      try {\n        // NOTE(mroberts): We have to rewrite Ids due to this bug:\n        //\n        //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n        //\n        for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var stats = _c.value;\n          if (stats.type === 'inbound-rtp') {\n            stats.id = trackId + \"-\" + stats.id;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return [trackId, report];\n    });\n  })).then(function (pairs) {\n    return new Map(pairs);\n  });\n}\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */ /**\n    * @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n    * @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n    * @param {RTCStatsReport} report\n    * @param {RTCStats} stats\n    * @param {TrackId} [trackId]\n    * @returns {?ReceiverReportFactory}\n    */\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n  if (!trackId) {\n    var trackStats = report.get(stats.trackId);\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n    var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n  return null;\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.send,\n    video: factory.video.send\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.recv,\n    video: factory.video.recv\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_2, _a;\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n      if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n        if (guessBrowser() !== 'firefox' && !stats.trackId) {\n          continue;\n        }\n        var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (senderReportFactoryIdsToDelete) {\n          senderReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n        if (senderReportFactory) {\n          var remoteInboundStats = report.get(stats.remoteId);\n          senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  var e_3, _a;\n  try {\n    for (var _b = __values(report.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var stats = _c.value;\n      if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n        var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (receiverReportFactoryIdsToDelete) {\n          receiverReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n        if (receiverReportFactory) {\n          receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n        }\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  var _loop_1 = function (mediaType) {\n    var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) {\n      return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId);\n    });\n  };\n  for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    _loop_1(mediaType);\n  }\n}\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n  var e_4, _a, e_5, _b;\n  var selectedCandidatePair;\n  try {\n    for (var _c = __values(report.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var stats = _d.value;\n      if (stats.type === 'transport') {\n        selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n  try {\n    for (var _e = __values(report.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var stats = _f.value;\n      if (stats.type === 'candidate-pair' && stats.nominated && ('selected' in stats ? stats.selected : true)) {\n        ice.next(stats);\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateFirefox(factory) {\n  var senders = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track;\n  }).map(function (transceiver) {\n    return transceiver.sender;\n  });\n  var receivers = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/recv/);\n  }).map(function (transceiver) {\n    return transceiver.receiver;\n  });\n  return Promise.all([getSenderOrReceiverReports(senders), getSenderOrReceiverReports(receivers), factory.pc.getStats()]).then(function (_a) {\n    var _b = __read(_a, 3),\n      senderReports = _b[0],\n      receiverReports = _b[1],\n      pcReport = _b[2];\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach(function (report, trackId) {\n      return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach(function (report, trackId) {\n      return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(function (report) {\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, report);\n  });\n}\nmodule.exports = PeerConnectionReportFactory;","map":{"version":3,"names":["guessBrowser","require","IceReportFactory","PeerConnectionReport","ReceiverReportFactory","SenderReportFactory","PeerConnectionReportFactory","pc","Object","defineProperties","enumerable","value","ice","audio","send","Map","recv","video","lastReport","writable","prototype","next","_this","updatePromise","updateFirefox","updateChrome","then","audioSenderReportFactories","__spreadArray","__read","values","videoSenderReportFactories","audioReceiverReportFactories","videoReceiverReportFactories","report","map","factory","filter","getSenderOrReceiverReports","sendersOrReceivers","Promise","all","senderOrReceiver","trackId","track","id","getStats","_b","__values","_c","done","stats","type","pairs","getOrCreateSenderOrReceiverReportFactory","SenderOrReceiverReportFactory","sendersOrReceiversByMediaType","mediaType","trackStats","get","trackIdentifier","has","senderOrReceiverFactory","set","getSenderReportFactoriesByMediaType","getReceiverReportFactoriesByMediaType","getOrCreateSenderReportFactory","getOrCreateReceiverReportFactory","getSenderReportFactoryIdsByMediaType","Set","keys","getReceiverReportFactoryIdsByMediaType","updateSenderReports","senderReportFactoryIdsToDeleteByMediaType","isRemote","senderReportFactoryIdsToDelete","delete","senderReportFactory","remoteInboundStats","remoteId","updateReceiverReports","receiverReportFactoryIdsToDeleteByMediaType","receiverReportFactoryIdsToDelete","receiverReportFactory","deleteSenderOrReceiverReportFactories","senderOrReceiverReportFactoriesByMediaType","senderOrReceiverReportFactoryIdsByMediaType","senderOrReceiverReportFactories","senderOrReceiverReportFactoryIds","forEach","senderOrReceiverReportFactoryId","updateIceReport","selectedCandidatePair","_d","selectedCandidatePairId","_e","_f","nominated","selected","senders","getTransceivers","transceiver","currentDirection","match","sender","receivers","receiver","_a","senderReports","receiverReports","pcReport","senderReportFactoriesByMediaType","receiverReportFactoriesByMediaType","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/stats/peerconnectionreportfactory.js"],"sourcesContent":["'use strict';\n\nconst { guessBrowser } = require('../webrtc/util');\n\nconst IceReportFactory = require('./icereportfactory');\nconst PeerConnectionReport = require('./peerconnectionreport');\nconst ReceiverReportFactory = require('./receiverreportfactory');\nconst SenderReportFactory = require('./senderreportfactory');\n\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\nclass PeerConnectionReportFactory {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  constructor(pc) {\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n  next() {\n    const updatePromise = guessBrowser() === 'firefox'\n      ? updateFirefox(this)\n      : updateChrome(this);\n\n    return updatePromise.then(() => {\n      const audioSenderReportFactories = [...this.audio.send.values()];\n      const videoSenderReportFactories = [...this.video.send.values()];\n      const audioReceiverReportFactories = [...this.audio.recv.values()];\n      const videoReceiverReportFactories = [...this.video.recv.values()];\n\n      const report = new PeerConnectionReport(\n        this.ice.lastReport,\n        {\n          send: audioSenderReportFactories.map(factory => factory.lastReport).filter(report => report),\n          recv: audioReceiverReportFactories.map(factory => factory.lastReport).filter(report => report)\n        },\n        {\n          send: videoSenderReportFactories.map(factory => factory.lastReport).filter(report => report),\n          recv: videoReceiverReportFactories.map(factory => factory.lastReport).filter(report => report)\n        }\n      );\n\n      this.lastReport = report;\n\n      return report;\n    });\n  }\n}\n\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(senderOrReceiver => {\n    const trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(report => {\n      // NOTE(mroberts): We have to rewrite Ids due to this bug:\n      //\n      //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n      //\n      for (const stats of report.values()) {\n        if (stats.type === 'inbound-rtp') {\n          stats.id = `${trackId}-${stats.id}`;\n        }\n      }\n      return [trackId, report];\n    });\n  })).then(pairs => new Map(pairs));\n}\n\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n *//**\n * @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n * @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  const sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n  if (!trackId) {\n    const trackStats = report.get(stats.trackId);\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n    const senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n  return null;\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.send, video: factory.video.send };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.recv, video: factory.video.recv };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  for (const stats of report.values()) {\n    if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n      if (guessBrowser() !== 'firefox' && !stats.trackId) {\n        continue;\n      }\n      const senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n      if (senderReportFactoryIdsToDelete) {\n        senderReportFactoryIdsToDelete.delete(stats.id);\n      }\n      const senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n      if (senderReportFactory) {\n        const remoteInboundStats = report.get(stats.remoteId);\n        senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n      }\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  for (const stats of report.values()) {\n    if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n      const receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n      if (receiverReportFactoryIdsToDelete) {\n        receiverReportFactoryIdsToDelete.delete(stats.id);\n      }\n      const receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n      if (receiverReportFactory) {\n        receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n      }\n    }\n  }\n}\n\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  for (const mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    const senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    const senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(senderOrReceiverReportFactoryId => senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId));\n  }\n}\n\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n  let selectedCandidatePair;\n  for (const stats of report.values()) {\n    if (stats.type === 'transport') {\n      selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n    }\n  }\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n  for (const stats of report.values()) {\n    if (stats.type === 'candidate-pair'\n      && stats.nominated\n      && ('selected' in stats ? stats.selected : true)) {\n      ice.next(stats);\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateFirefox(factory) {\n  const senders = factory.pc.getTransceivers()\n    .filter(transceiver => transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track)\n    .map(transceiver => transceiver.sender);\n\n  const receivers = factory.pc.getTransceivers()\n    .filter(transceiver => transceiver.currentDirection && transceiver.currentDirection.match(/recv/))\n    .map(transceiver => transceiver.receiver);\n\n  return Promise.all([\n    getSenderOrReceiverReports(senders),\n    getSenderOrReceiverReports(receivers),\n    factory.pc.getStats()\n  ]).then(([senderReports, receiverReports, pcReport]) => {\n    const senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    const senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach((report, trackId) => updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId));\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    const receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    const receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach((report, trackId) => updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId));\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {Promise<PeerConnectionReport>}\n */\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(report => {\n    const senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    const senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    const receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    const receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEJ,IAAAA,YAAY,GAAKC,OAAO,CAAC,gBAAgB,CAAC,CAAAD,YAA9B;AAEpB,IAAME,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACtD,IAAME,oBAAoB,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAC9D,IAAMG,qBAAqB,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAChE,IAAMI,mBAAmB,GAAGJ,OAAO,CAAC,uBAAuB,CAAC;AAE5D;;;AAIA;;;AAIA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;;;AAOA,IAAAK,2BAAA;EACE;;;;EAIA,SAAAA,4BAAYC,EAAE;IACZC,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC5BF,EAAE,EAAE;QACFG,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAEJ;OACR;MACDK,GAAG,EAAE;QACHF,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE,IAAIT,gBAAgB;OAC5B;MACDW,KAAK,EAAE;QACLH,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE;UACLG,IAAI,EAAE,IAAIC,GAAG,EAAE;UACfC,IAAI,EAAE,IAAID,GAAG;;OAEhB;MACDE,KAAK,EAAE;QACLP,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE;UACLG,IAAI,EAAE,IAAIC,GAAG,EAAE;UACfC,IAAI,EAAE,IAAID,GAAG;;OAEhB;MACDG,UAAU,EAAE;QACVR,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE,IAAI;QACXQ,QAAQ,EAAE;;KAEb,CAAC;EACJ;EAEA;;;;EAIAb,2BAAA,CAAAc,SAAA,CAAAC,IAAI,GAAJ;IAAA,IAAAC,KAAA;IACE,IAAMC,aAAa,GAAGvB,YAAY,EAAE,KAAK,SAAS,GAC9CwB,aAAa,CAAC,IAAI,CAAC,GACnBC,YAAY,CAAC,IAAI,CAAC;IAEtB,OAAOF,aAAa,CAACG,IAAI,CAAC;MACxB,IAAMC,0BAA0B,GAAAC,aAAA,KAAAC,MAAA,CAAOP,KAAI,CAACT,KAAK,CAACC,IAAI,CAACgB,MAAM,EAAE,EAAC;MAChE,IAAMC,0BAA0B,GAAAH,aAAA,KAAAC,MAAA,CAAOP,KAAI,CAACL,KAAK,CAACH,IAAI,CAACgB,MAAM,EAAE,EAAC;MAChE,IAAME,4BAA4B,GAAAJ,aAAA,KAAAC,MAAA,CAAOP,KAAI,CAACT,KAAK,CAACG,IAAI,CAACc,MAAM,EAAE,EAAC;MAClE,IAAMG,4BAA4B,GAAAL,aAAA,KAAAC,MAAA,CAAOP,KAAI,CAACL,KAAK,CAACD,IAAI,CAACc,MAAM,EAAE,EAAC;MAElE,IAAMI,MAAM,GAAG,IAAI/B,oBAAoB,CACrCmB,KAAI,CAACV,GAAG,CAACM,UAAU,EACnB;QACEJ,IAAI,EAAEa,0BAA0B,CAACQ,GAAG,CAAC,UAAAC,OAAO;UAAI,OAAAA,OAAO,CAAClB,UAAU;QAAlB,CAAkB,CAAC,CAACmB,MAAM,CAAC,UAAAH,MAAM;UAAI,OAAAA,MAAM;QAAN,CAAM,CAAC;QAC5FlB,IAAI,EAAEgB,4BAA4B,CAACG,GAAG,CAAC,UAAAC,OAAO;UAAI,OAAAA,OAAO,CAAClB,UAAU;QAAlB,CAAkB,CAAC,CAACmB,MAAM,CAAC,UAAAH,MAAM;UAAI,OAAAA,MAAM;QAAN,CAAM;OAC9F,EACD;QACEpB,IAAI,EAAEiB,0BAA0B,CAACI,GAAG,CAAC,UAAAC,OAAO;UAAI,OAAAA,OAAO,CAAClB,UAAU;QAAlB,CAAkB,CAAC,CAACmB,MAAM,CAAC,UAAAH,MAAM;UAAI,OAAAA,MAAM;QAAN,CAAM,CAAC;QAC5FlB,IAAI,EAAEiB,4BAA4B,CAACE,GAAG,CAAC,UAAAC,OAAO;UAAI,OAAAA,OAAO,CAAClB,UAAU;QAAlB,CAAkB,CAAC,CAACmB,MAAM,CAAC,UAAAH,MAAM;UAAI,OAAAA,MAAM;QAAN,CAAM;OAC9F,CACF;MAEDZ,KAAI,CAACJ,UAAU,GAAGgB,MAAM;MAExB,OAAOA,MAAM;IACf,CAAC,CAAC;EACJ,CAAC;EACH,OAAA5B,2BAAC;AAAD,CAAC,CArED;AAuEA;;;;;;AAMA,SAASgC,0BAA0BA,CAACC,kBAAkB;EACpD,OAAOC,OAAO,CAACC,GAAG,CAACF,kBAAkB,CAACJ,GAAG,CAAC,UAAAO,gBAAgB;IACxD,IAAMC,OAAO,GAAGD,gBAAgB,CAACE,KAAK,CAACC,EAAE;IACzC,OAAOH,gBAAgB,CAACI,QAAQ,EAAE,CAACpB,IAAI,CAAC,UAAAQ,MAAM;;;QAC5C;QACA;QACA;QACA;QACA,KAAoB,IAAAa,EAAA,GAAAC,QAAA,CAAAd,MAAM,CAACJ,MAAM,EAAE,GAAAmB,EAAA,GAAAF,EAAA,CAAA1B,IAAA,KAAA4B,EAAA,CAAAC,IAAA,EAAAD,EAAA,GAAAF,EAAA,CAAA1B,IAAA,IAAE;UAAhC,IAAM8B,KAAK,GAAAF,EAAA,CAAAtC,KAAA;UACd,IAAIwC,KAAK,CAACC,IAAI,KAAK,aAAa,EAAE;YAChCD,KAAK,CAACN,EAAE,GAAMF,OAAO,SAAIQ,KAAK,CAACN,EAAI;;;;;;;;;;;;;;MAGvC,OAAO,CAACF,OAAO,EAAET,MAAM,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC,CAACR,IAAI,CAAC,UAAA2B,KAAK;IAAI,WAAItC,GAAG,CAACsC,KAAK,CAAC;EAAd,CAAc,CAAC;AACnC;AAEA;;;;;;;GAAA,CAOG;;;;;;;;AAQH,SAASC,wCAAwCA,CAACC,6BAA6B,EAAEC,6BAA6B,EAAEtB,MAAM,EAAEiB,KAAK,EAAER,OAAO;EACpI,IAAMJ,kBAAkB,GAAGiB,6BAA6B,CAACL,KAAK,CAACM,SAAS,CAAC;EACzE,IAAI,CAACd,OAAO,EAAE;IACZ,IAAMe,UAAU,GAAGxB,MAAM,CAACyB,GAAG,CAACR,KAAK,CAACR,OAAO,CAAC;IAC5C,IAAIe,UAAU,EAAE;MACdf,OAAO,GAAGe,UAAU,CAACE,eAAe;;;EAGxC,IAAIrB,kBAAkB,IAAII,OAAO,EAAE;IACjC,IAAIJ,kBAAkB,CAACsB,GAAG,CAACV,KAAK,CAACN,EAAE,CAAC,EAAE;MACpC,OAAON,kBAAkB,CAACoB,GAAG,CAACR,KAAK,CAACN,EAAE,CAAC;;IAEzC,IAAMiB,uBAAuB,GAAG,IAAIP,6BAA6B,CAACZ,OAAO,EAAEQ,KAAK,CAAC;IACjFZ,kBAAkB,CAACwB,GAAG,CAACZ,KAAK,CAACN,EAAE,EAAEiB,uBAAuB,CAAC;;EAE3D,OAAO,IAAI;AACb;AAEA;;;;AAIA,SAASE,mCAAmCA,CAAC5B,OAAO;EAClD,OAAO;IAAEvB,KAAK,EAAEuB,OAAO,CAACvB,KAAK,CAACC,IAAI;IAAEG,KAAK,EAAEmB,OAAO,CAACnB,KAAK,CAACH;EAAI,CAAE;AACjE;AAEA;;;;AAIA,SAASmD,qCAAqCA,CAAC7B,OAAO;EACpD,OAAO;IAAEvB,KAAK,EAAEuB,OAAO,CAACvB,KAAK,CAACG,IAAI;IAAEC,KAAK,EAAEmB,OAAO,CAACnB,KAAK,CAACD;EAAI,CAAE;AACjE;AAEA;;;;;;;AAOA,SAASkD,8BAA8BA,CAAC9B,OAAO,EAAEF,MAAM,EAAEiB,KAAK,EAAER,OAAO;EACrE,OAAOW,wCAAwC,CAACjD,mBAAmB,EAAE2D,mCAAmC,CAAC5B,OAAO,CAAC,EAAEF,MAAM,EAAEiB,KAAK,EAAER,OAAO,CAAC;AAC5I;AAEA;;;;;;;AAOA,SAASwB,gCAAgCA,CAAC/B,OAAO,EAAEF,MAAM,EAAEiB,KAAK,EAAER,OAAO;EACvE,OAAOW,wCAAwC,CAAClD,qBAAqB,EAAE6D,qCAAqC,CAAC7B,OAAO,CAAC,EAAEF,MAAM,EAAEiB,KAAK,EAAER,OAAO,CAAC;AAChJ;AAEA;;;;AAIA,SAASyB,oCAAoCA,CAAChC,OAAO;EACnD,OAAO;IACLvB,KAAK,EAAE,IAAIwD,GAAG,CAACjC,OAAO,CAACvB,KAAK,CAACC,IAAI,CAACwD,IAAI,EAAE,CAAC;IACzCrD,KAAK,EAAE,IAAIoD,GAAG,CAACjC,OAAO,CAACnB,KAAK,CAACH,IAAI,CAACwD,IAAI,EAAE;GACzC;AACH;AAEA;;;;AAIA,SAASC,sCAAsCA,CAACnC,OAAO;EACrD,OAAO;IACLvB,KAAK,EAAE,IAAIwD,GAAG,CAACjC,OAAO,CAACvB,KAAK,CAACG,IAAI,CAACsD,IAAI,EAAE,CAAC;IACzCrD,KAAK,EAAE,IAAIoD,GAAG,CAACjC,OAAO,CAACnB,KAAK,CAACD,IAAI,CAACsD,IAAI,EAAE;GACzC;AACH;AAEA;;;;;;;AAOA,SAASE,mBAAmBA,CAACpC,OAAO,EAAEF,MAAM,EAAEuC,yCAAyC,EAAE9B,OAAO;;;IAC9F,KAAoB,IAAAI,EAAA,GAAAC,QAAA,CAAAd,MAAM,CAACJ,MAAM,EAAE,GAAAmB,EAAA,GAAAF,EAAA,CAAA1B,IAAA,KAAA4B,EAAA,CAAAC,IAAA,EAAAD,EAAA,GAAAF,EAAA,CAAA1B,IAAA,IAAE;MAAhC,IAAM8B,KAAK,GAAAF,EAAA,CAAAtC,KAAA;MACd,IAAIwC,KAAK,CAACC,IAAI,KAAK,cAAc,IAAI,CAACD,KAAK,CAACuB,QAAQ,EAAE;QACpD,IAAI1E,YAAY,EAAE,KAAK,SAAS,IAAI,CAACmD,KAAK,CAACR,OAAO,EAAE;UAClD;;QAEF,IAAMgC,8BAA8B,GAAGF,yCAAyC,CAACtB,KAAK,CAACM,SAAS,CAAC;QACjG,IAAIkB,8BAA8B,EAAE;UAClCA,8BAA8B,CAACC,MAAM,CAACzB,KAAK,CAACN,EAAE,CAAC;;QAEjD,IAAMgC,mBAAmB,GAAGX,8BAA8B,CAAC9B,OAAO,EAAEF,MAAM,EAAEiB,KAAK,EAAER,OAAO,CAAC;QAC3F,IAAIkC,mBAAmB,EAAE;UACvB,IAAMC,kBAAkB,GAAG5C,MAAM,CAACyB,GAAG,CAACR,KAAK,CAAC4B,QAAQ,CAAC;UACrDF,mBAAmB,CAACxD,IAAI,CAACsB,OAAO,IAAIkC,mBAAmB,CAAClC,OAAO,EAAEQ,KAAK,EAAE2B,kBAAkB,CAAC;;;;;;;;;;;;;;;AAInG;AAEA;;;;;;;AAOA,SAASE,qBAAqBA,CAAC5C,OAAO,EAAEF,MAAM,EAAE+C,2CAA2C,EAAEtC,OAAO;;;IAClG,KAAoB,IAAAI,EAAA,GAAAC,QAAA,CAAAd,MAAM,CAACJ,MAAM,EAAE,GAAAmB,EAAA,GAAAF,EAAA,CAAA1B,IAAA,KAAA4B,EAAA,CAAAC,IAAA,EAAAD,EAAA,GAAAF,EAAA,CAAA1B,IAAA,IAAE;MAAhC,IAAM8B,KAAK,GAAAF,EAAA,CAAAtC,KAAA;MACd,IAAIwC,KAAK,CAACC,IAAI,KAAK,aAAa,IAAI,CAACD,KAAK,CAACuB,QAAQ,EAAE;QACnD,IAAMQ,gCAAgC,GAAGD,2CAA2C,CAAC9B,KAAK,CAACM,SAAS,CAAC;QACrG,IAAIyB,gCAAgC,EAAE;UACpCA,gCAAgC,CAACN,MAAM,CAACzB,KAAK,CAACN,EAAE,CAAC;;QAEnD,IAAMsC,qBAAqB,GAAGhB,gCAAgC,CAAC/B,OAAO,EAAEF,MAAM,EAAEiB,KAAK,EAAER,OAAO,CAAC;QAC/F,IAAIwC,qBAAqB,EAAE;UACzBA,qBAAqB,CAAC9D,IAAI,CAACsB,OAAO,IAAIwC,qBAAqB,CAACxC,OAAO,EAAEQ,KAAK,CAAC;;;;;;;;;;;;;;;AAInF;AAEA;;;;;AAKA,SAASiC,qCAAqCA,CAACC,0CAA0C,EAAEC,2CAA2C;0BACzH7B,SAAS;IAClB,IAAM8B,+BAA+B,GAAGF,0CAA0C,CAAC5B,SAAS,CAAC;IAC7F,IAAM+B,gCAAgC,GAAGF,2CAA2C,CAAC7B,SAAS,CAAC;IAC/F+B,gCAAgC,CAACC,OAAO,CAAC,UAAAC,+BAA+B;MAAI,OAAAH,+BAA+B,CAACX,MAAM,CAACc,+BAA+B,CAAC;IAAvE,CAAuE,CAAC;;EAHtJ,KAAK,IAAMjC,SAAS,IAAI6B,2CAA2C;YAAxD7B,SAAS;;AAKtB;AAEA;;;;;AAKA,SAASkC,eAAeA,CAAC/E,GAAG,EAAEsB,MAAM;;EAClC,IAAI0D,qBAAqB;;IACzB,KAAoB,IAAA3C,EAAA,GAAAD,QAAA,CAAAd,MAAM,CAACJ,MAAM,EAAE,GAAA+D,EAAA,GAAA5C,EAAA,CAAA5B,IAAA,KAAAwE,EAAA,CAAA3C,IAAA,EAAA2C,EAAA,GAAA5C,EAAA,CAAA5B,IAAA,IAAE;MAAhC,IAAM8B,KAAK,GAAA0C,EAAA,CAAAlF,KAAA;MACd,IAAIwC,KAAK,CAACC,IAAI,KAAK,WAAW,EAAE;QAC9BwC,qBAAqB,GAAG1D,MAAM,CAACyB,GAAG,CAACR,KAAK,CAAC2C,uBAAuB,CAAC;;;;;;;;;;;;;;EAGrE,IAAIF,qBAAqB,EAAE;IACzBhF,GAAG,CAACS,IAAI,CAACuE,qBAAqB,CAAC;IAC/B;;;IAEF,KAAoB,IAAAG,EAAA,GAAA/C,QAAA,CAAAd,MAAM,CAACJ,MAAM,EAAE,GAAAkE,EAAA,GAAAD,EAAA,CAAA1E,IAAA,KAAA2E,EAAA,CAAA9C,IAAA,EAAA8C,EAAA,GAAAD,EAAA,CAAA1E,IAAA,IAAE;MAAhC,IAAM8B,KAAK,GAAA6C,EAAA,CAAArF,KAAA;MACd,IAAIwC,KAAK,CAACC,IAAI,KAAK,gBAAgB,IAC9BD,KAAK,CAAC8C,SAAS,KACd,UAAU,IAAI9C,KAAK,GAAGA,KAAK,CAAC+C,QAAQ,GAAG,IAAI,CAAC,EAAE;QAClDtF,GAAG,CAACS,IAAI,CAAC8B,KAAK,CAAC;;;;;;;;;;;;;;AAGrB;AAEA;;;;AAIA,SAAS3B,aAAaA,CAACY,OAAO;EAC5B,IAAM+D,OAAO,GAAG/D,OAAO,CAAC7B,EAAE,CAAC6F,eAAe,EAAE,CACzC/D,MAAM,CAAC,UAAAgE,WAAW;IAAI,OAAAA,WAAW,CAACC,gBAAgB,IAAID,WAAW,CAACC,gBAAgB,CAACC,KAAK,CAAC,MAAM,CAAC,IAAIF,WAAW,CAACG,MAAM,CAAC5D,KAAK;EAAtG,CAAsG,CAAC,CAC7HT,GAAG,CAAC,UAAAkE,WAAW;IAAI,OAAAA,WAAW,CAACG,MAAM;EAAlB,CAAkB,CAAC;EAEzC,IAAMC,SAAS,GAAGrE,OAAO,CAAC7B,EAAE,CAAC6F,eAAe,EAAE,CAC3C/D,MAAM,CAAC,UAAAgE,WAAW;IAAI,OAAAA,WAAW,CAACC,gBAAgB,IAAID,WAAW,CAACC,gBAAgB,CAACC,KAAK,CAAC,MAAM,CAAC;EAA1E,CAA0E,CAAC,CACjGpE,GAAG,CAAC,UAAAkE,WAAW;IAAI,OAAAA,WAAW,CAACK,QAAQ;EAApB,CAAoB,CAAC;EAE3C,OAAOlE,OAAO,CAACC,GAAG,CAAC,CACjBH,0BAA0B,CAAC6D,OAAO,CAAC,EACnC7D,0BAA0B,CAACmE,SAAS,CAAC,EACrCrE,OAAO,CAAC7B,EAAE,CAACuC,QAAQ,EAAE,CACtB,CAAC,CAACpB,IAAI,CAAC,UAACiF,EAA0C;QAA1C5D,EAAA,GAAAlB,MAAA,CAAA8E,EAAA,IAA0C;MAAzCC,aAAa,GAAA7D,EAAA;MAAE8D,eAAe,GAAA9D,EAAA;MAAE+D,QAAQ,GAAA/D,EAAA;IAChD,IAAMgE,gCAAgC,GAAG/C,mCAAmC,CAAC5B,OAAO,CAAC;IACrF,IAAMqC,yCAAyC,GAAGL,oCAAoC,CAAChC,OAAO,CAAC;IAC/FwE,aAAa,CAACnB,OAAO,CAAC,UAACvD,MAAM,EAAES,OAAO;MAAK,OAAA6B,mBAAmB,CAACpC,OAAO,EAAEF,MAAM,EAAEuC,yCAAyC,EAAE9B,OAAO,CAAC;IAAxF,CAAwF,CAAC;IACpIyC,qCAAqC,CAAC2B,gCAAgC,EAAEtC,yCAAyC,CAAC;IAElH,IAAMuC,kCAAkC,GAAG/C,qCAAqC,CAAC7B,OAAO,CAAC;IACzF,IAAM6C,2CAA2C,GAAGV,sCAAsC,CAACnC,OAAO,CAAC;IACnGyE,eAAe,CAACpB,OAAO,CAAC,UAACvD,MAAM,EAAES,OAAO;MAAK,OAAAqC,qBAAqB,CAAC5C,OAAO,EAAEF,MAAM,EAAE+C,2CAA2C,EAAEtC,OAAO,CAAC;IAA5F,CAA4F,CAAC;IAC1IyC,qCAAqC,CAAC4B,kCAAkC,EAAE/B,2CAA2C,CAAC;IAEtHU,eAAe,CAACvD,OAAO,CAACxB,GAAG,EAAEkG,QAAQ,CAAC;EACxC,CAAC,CAAC;AACJ;AAEA;;;;AAIA,SAASrF,YAAYA,CAACW,OAAO;EAC3B,OAAOA,OAAO,CAAC7B,EAAE,CAACuC,QAAQ,EAAE,CAACpB,IAAI,CAAC,UAAAQ,MAAM;IACtC,IAAM6E,gCAAgC,GAAG/C,mCAAmC,CAAC5B,OAAO,CAAC;IACrF,IAAMqC,yCAAyC,GAAGL,oCAAoC,CAAChC,OAAO,CAAC;IAC/FoC,mBAAmB,CAACpC,OAAO,EAAEF,MAAM,EAAEuC,yCAAyC,CAAC;IAC/EW,qCAAqC,CAAC2B,gCAAgC,EAAEtC,yCAAyC,CAAC;IAElH,IAAMuC,kCAAkC,GAAG/C,qCAAqC,CAAC7B,OAAO,CAAC;IACzF,IAAM6C,2CAA2C,GAAGV,sCAAsC,CAACnC,OAAO,CAAC;IACnG4C,qBAAqB,CAAC5C,OAAO,EAAEF,MAAM,EAAE+C,2CAA2C,CAAC;IACnFG,qCAAqC,CAAC4B,kCAAkC,EAAE/B,2CAA2C,CAAC;IAEtHU,eAAe,CAACvD,OAAO,CAACxB,GAAG,EAAEsB,MAAM,CAAC;EACtC,CAAC,CAAC;AACJ;AAEA+E,MAAM,CAACC,OAAO,GAAG5G,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}