{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar StateMachine = require('../../statemachine');\nvar TwilioConnection = require('../../twilioconnection');\nvar DefaultBackoff = require('../../util/backoff');\nvar reconnectBackoffConfig = require('../../util/constants').reconnectBackoffConfig;\nvar Timeout = require('../../util/timeout');\nvar _a = require('../../util/constants'),\n  SDK_NAME = _a.SDK_NAME,\n  SDK_VERSION = _a.SDK_VERSION,\n  SDP_FORMAT = _a.SDP_FORMAT;\nvar _b = require('../../util'),\n  createBandwidthProfilePayload = _b.createBandwidthProfilePayload,\n  createMediaSignalingPayload = _b.createMediaSignalingPayload,\n  createMediaWarningsPayload = _b.createMediaWarningsPayload,\n  createSubscribePayload = _b.createSubscribePayload,\n  getUserAgent = _b.getUserAgent,\n  isNonArrayObject = _b.isNonArrayObject;\nvar _c = require('../../util/twilio-video-errors'),\n  createTwilioError = _c.createTwilioError,\n  RoomCompletedError = _c.RoomCompletedError,\n  SignalingConnectionError = _c.SignalingConnectionError,\n  SignalingServerBusyError = _c.SignalingServerBusyError;\nvar ICE_VERSION = 1;\nvar RSP_VERSION = 2;\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\nvar TwilioConnectionTransport = /** @class */function (_super) {\n  __extends(TwilioConnectionTransport, _super);\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n  function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    var _this = this;\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      TwilioConnection: TwilioConnection,\n      iceServers: null,\n      trackPriority: true,\n      trackSwitchOff: true,\n      renderHints: true,\n      userAgent: getUserAgent()\n    }, options);\n    _this = _super.call(this, 'connecting', states) || this;\n    Object.defineProperties(_this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _adaptiveSimulcast: {\n        value: options.adaptiveSimulcast\n      },\n      _eventObserver: {\n        value: options.eventObserver,\n        writable: false\n      },\n      _renderHints: {\n        value: options.renderHints\n      },\n      _iceServersStatus: {\n        value: Array.isArray(options.iceServers) ? 'overrode' : 'acquire'\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name\n      },\n      _networkQuality: {\n        value: isNonArrayObject(options.networkQuality) || options.networkQuality\n      },\n      _notifyWarnings: {\n        value: options.notifyWarnings\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0,\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: new options.Backoff(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n    setupTransport(_this);\n    return _this;\n  }\n  /**\n   * Create a Connect, Sync or Disconnect RSP message.\n   * @private\n   * @returns {?object}\n   */\n  TwilioConnectionTransport.prototype._createConnectOrSyncOrDisconnectMessage = function () {\n    if (this.state === 'connected') {\n      return null;\n    }\n    if (this.state === 'disconnected') {\n      return {\n        session: this._session,\n        type: 'disconnect',\n        version: RSP_VERSION\n      };\n    }\n    var type = {\n      connecting: 'connect',\n      syncing: 'sync'\n    }[this.state];\n    var message = {\n      name: this._name,\n      participant: this._localParticipant.getState(),\n      peer_connections: this._peerConnectionManager.getStates(),\n      type: type,\n      version: RSP_VERSION\n    };\n    if (message.type === 'connect') {\n      message.ice_servers = this._iceServersStatus;\n      message.publisher = {\n        name: SDK_NAME,\n        sdk_version: SDK_VERSION,\n        user_agent: this._userAgent\n      };\n      if (this._bandwidthProfile) {\n        message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n      }\n      if (this._notifyWarnings) {\n        message.participant.media_warnings = createMediaWarningsPayload(this._notifyWarnings);\n      }\n      message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff, this._adaptiveSimulcast, this._renderHints);\n      message.subscribe = createSubscribePayload(this._automaticSubscription);\n      message.format = SDP_FORMAT;\n      message.token = this._accessToken;\n    } else if (message.type === 'sync') {\n      message.session = this._session;\n      message.token = this._accessToken;\n    } else if (message.type === 'update') {\n      message.session = this._session;\n    }\n    return message;\n  };\n  /**\n   * Create an \"ice\" message.\n   * @private\n   */\n  TwilioConnectionTransport.prototype._createIceMessage = function () {\n    return {\n      edge: 'roaming',\n      token: this._accessToken,\n      type: 'ice',\n      version: ICE_VERSION\n    };\n  };\n  /**\n   * Send a Connect, Sync or Disconnect RSP message.\n   * @private\n   */\n  TwilioConnectionTransport.prototype._sendConnectOrSyncOrDisconnectMessage = function () {\n    var message = this._createConnectOrSyncOrDisconnectMessage();\n    if (message) {\n      this._twilioConnection.sendMessage(message);\n    }\n  };\n  /**\n   * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n   * in disconnection.\n   * @param {TwilioError} [error]\n   * @returns {boolean}\n   */\n  TwilioConnectionTransport.prototype.disconnect = function (error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n      this._sendConnectOrSyncOrDisconnectMessage();\n      this._twilioConnection.close();\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Publish an RSP Update. Returns true if calling the method resulted in\n   * publishing (or eventually publishing) the update.\n   * @param {object} update\n   * @returns {boolean}\n   */\n  TwilioConnectionTransport.prototype.publish = function (update) {\n    switch (this.state) {\n      case 'connected':\n        this._twilioConnection.sendMessage(Object.assign({\n          session: this._session,\n          type: 'update',\n          version: RSP_VERSION\n        }, update));\n        return true;\n      case 'connecting':\n      case 'syncing':\n        this._updatesToSend.push(update);\n        return true;\n      case 'disconnected':\n      default:\n        return false;\n    }\n  };\n  /**\n   * Publish (or queue) an event to the Insights gateway.\n   * @param {string} group - Event group name\n   * @param {string} name - Event name\n   * @param {string} level - Event level\n   * @param {object} payload - Event payload\n   * @returns {void}\n   */\n  TwilioConnectionTransport.prototype.publishEvent = function (group, name, level, payload) {\n    this._eventObserver.emit('event', {\n      group: group,\n      name: name,\n      level: level,\n      payload: payload\n    });\n  };\n  /**\n   * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n   * syncing.\n   * @returns {boolean}\n   */\n  TwilioConnectionTransport.prototype.sync = function () {\n    if (this.state === 'connected') {\n      this.preempt('syncing');\n      this._sendConnectOrSyncOrDisconnectMessage();\n      return true;\n    }\n    return false;\n  };\n  /**\n   * @private\n   * @returns {void}\n   */\n  TwilioConnectionTransport.prototype._setSession = function (session, sessionTimeout) {\n    this._session = session;\n    this._sessionTimeoutMS = sessionTimeout * 1000;\n  };\n  /**\n   * Determines if we should attempt reconnect.\n   * returns a Promise to wait on before attempting to\n   * reconnect. returns null if its not okay to reconnect.\n   * @private\n   * @returns {Promise<void>}\n   */\n  TwilioConnectionTransport.prototype._getReconnectTimer = function () {\n    var _this = this;\n    if (this._sessionTimeoutMS === 0) {\n      // this means either we have never connected.\n      // or we timed out while trying to reconnect\n      // In either case we do not want to reconnect.\n      return null;\n    }\n    // start session timer\n    if (!this._sessionTimer) {\n      this._sessionTimer = new Timeout(function () {\n        // ensure that _clearReconnectTimer wasn't\n        // called while we were waiting.\n        if (_this._sessionTimer) {\n          // do not allow any more reconnect attempts.\n          _this._sessionTimeoutMS = 0;\n        }\n      }, this._sessionTimeoutMS);\n    }\n    // return promise that waits with exponential backoff.\n    return new Promise(function (resolve) {\n      _this._reconnectBackoff.backoff(resolve);\n    });\n  };\n  /**\n   * clears the session reconnect timer.\n   *\n   * @private\n   * @returns {void}\n   */\n  TwilioConnectionTransport.prototype._clearReconnectTimer = function () {\n    this._reconnectBackoff.reset();\n    if (this._sessionTimer) {\n      this._sessionTimer.clear();\n      this._sessionTimer = null;\n    }\n  };\n  return TwilioConnectionTransport;\n}(StateMachine);\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update;\n    // First, reduce the top-level `description` property.\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    }\n    // Then, reduce the top-level `ice` property.\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    }\n    // Finally, update the map.\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    }\n    // Then, reduce the top-level `peer_connections` property.\n    /* eslint camelcase:0 */\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n    return reduced;\n  }, {});\n}\nfunction setupTransport(transport) {\n  function createOrResetTwilioConnection() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n    var _iceServersStatus = transport._iceServersStatus,\n      _options = transport._options,\n      _wsServer = transport._wsServer,\n      state = transport.state;\n    var TwilioConnection = _options.TwilioConnection;\n    var twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n      helloBody: state === 'connecting' && _iceServersStatus === 'acquire' ? transport._createIceMessage() : transport._createConnectOrSyncOrDisconnectMessage()\n    }, _options));\n    twilioConnection.once('close', function (reason) {\n      if (reason === TwilioConnection.CloseReason.LOCAL) {\n        disconnect();\n      } else {\n        disconnect(new Error(reason));\n      }\n    });\n    twilioConnection.on('message', handleMessage);\n    transport._twilioConnection = twilioConnection;\n  }\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n    var reconnectTimer = transport._getReconnectTimer();\n    if (!reconnectTimer) {\n      var twilioError = error.message === TwilioConnection.CloseReason.BUSY ? new SignalingServerBusyError() : new SignalingConnectionError();\n      transport.disconnect(twilioError);\n      return;\n    }\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n    reconnectTimer.then(createOrResetTwilioConnection);\n  }\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n          case 'warning':\n            transport.emit('message', message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'connecting':\n        switch (message.type) {\n          case 'iced':\n            transport._options.onIced(message.ice_servers).then(function () {\n              transport._sendConnectOrSyncOrDisconnectMessage();\n            });\n            return;\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'synced':\n            transport._clearReconnectTimer();\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      default:\n        // Impossible\n        return;\n    }\n  }\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          var updates = transport._updatesToSend.splice(0);\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n          transport._updatesReceived.splice(0).forEach(function (update) {\n            return transport.emit('message', update);\n          });\n          return;\n        }\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n      case 'syncing':\n        // Do nothing.\n        return;\n      default:\n        // Impossible\n        return;\n    }\n  });\n  var _options = transport._options,\n    _iceServersStatus = transport._iceServersStatus;\n  var iceServers = _options.iceServers,\n    onIced = _options.onIced;\n  if (_iceServersStatus === 'overrode') {\n    onIced(iceServers).then(createOrResetTwilioConnection);\n  } else {\n    createOrResetTwilioConnection();\n  }\n}\nmodule.exports = TwilioConnectionTransport;","map":{"version":3,"names":["StateMachine","require","TwilioConnection","DefaultBackoff","reconnectBackoffConfig","Timeout","_a","SDK_NAME","SDK_VERSION","SDP_FORMAT","_b","createBandwidthProfilePayload","createMediaSignalingPayload","createMediaWarningsPayload","createSubscribePayload","getUserAgent","isNonArrayObject","_c","createTwilioError","RoomCompletedError","SignalingConnectionError","SignalingServerBusyError","ICE_VERSION","RSP_VERSION","states","connecting","connected","syncing","disconnected","TwilioConnectionTransport","_super","__extends","name","accessToken","localParticipant","peerConnectionManager","wsServer","options","_this","Object","assign","Backoff","iceServers","trackPriority","trackSwitchOff","renderHints","userAgent","call","defineProperties","_accessToken","value","_automaticSubscription","automaticSubscription","_bandwidthProfile","bandwidthProfile","_dominantSpeaker","dominantSpeaker","_adaptiveSimulcast","adaptiveSimulcast","_eventObserver","eventObserver","writable","_renderHints","_iceServersStatus","Array","isArray","_localParticipant","_name","_networkQuality","networkQuality","_notifyWarnings","notifyWarnings","_options","_peerConnectionManager","_sessionTimer","_sessionTimeoutMS","_reconnectBackoff","_session","_trackPriority","_trackSwitchOff","_twilioConnection","_updatesReceived","_updatesToSend","_userAgent","_wsServer","setupTransport","prototype","_createConnectOrSyncOrDisconnectMessage","state","session","type","version","message","participant","getState","peer_connections","getStates","ice_servers","publisher","sdk_version","user_agent","bandwidth_profile","media_warnings","media_signaling","subscribe","format","token","_createIceMessage","edge","_sendConnectOrSyncOrDisconnectMessage","sendMessage","disconnect","error","preempt","close","publish","update","push","publishEvent","group","level","payload","emit","sync","_setSession","sessionTimeout","_getReconnectTimer","Promise","resolve","backoff","_clearReconnectTimer","reset","clear","reducePeerConnections","peerConnections","from","reduce","peerConnectionsById","reduced","get","id","description","revision","ice","set","Map","values","reduceUpdates","updates","concat","transport","createOrResetTwilioConnection","removeListener","handleMessage","twilioConnection","helloBody","once","reason","CloseReason","LOCAL","Error","on","reconnectTimer","twilioError","BUSY","then","code","status","onIced","session_timeout","stateChanged","splice","length","forEach","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/signaling/v2/twilioconnectiontransport.js"],"sourcesContent":["'use strict';\n\nconst StateMachine = require('../../statemachine');\nconst TwilioConnection = require('../../twilioconnection');\nconst DefaultBackoff = require('../../util/backoff');\nconst { reconnectBackoffConfig } = require('../../util/constants');\nconst Timeout = require('../../util/timeout');\nconst { SDK_NAME, SDK_VERSION, SDP_FORMAT } = require('../../util/constants');\n\nconst {\n  createBandwidthProfilePayload,\n  createMediaSignalingPayload,\n  createMediaWarningsPayload,\n  createSubscribePayload,\n  getUserAgent,\n  isNonArrayObject\n} = require('../../util');\n\nconst {\n  createTwilioError,\n  RoomCompletedError,\n  SignalingConnectionError,\n  SignalingServerBusyError,\n} = require('../../util/twilio-video-errors');\n\nconst ICE_VERSION = 1;\nconst RSP_VERSION = 2;\n\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nconst states = {\n  connecting: [\n    'connected',\n    'disconnected'\n  ],\n  connected: [\n    'disconnected',\n    'syncing'\n  ],\n  syncing: [\n    'connected',\n    'disconnected'\n  ],\n  disconnected: []\n};\n\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\nclass TwilioConnectionTransport extends StateMachine {\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n  constructor(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      TwilioConnection,\n      iceServers: null,\n      trackPriority: true,\n      trackSwitchOff: true,\n      renderHints: true,\n      userAgent: getUserAgent()\n    }, options);\n    super('connecting', states);\n\n\n    Object.defineProperties(this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _adaptiveSimulcast: {\n        value: options.adaptiveSimulcast\n      },\n      _eventObserver: {\n        value: options.eventObserver,\n        writable: false\n      },\n      _renderHints: {\n        value: options.renderHints\n      },\n      _iceServersStatus: {\n        value: Array.isArray(options.iceServers)\n          ? 'overrode'\n          : 'acquire'\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name,\n      },\n      _networkQuality: {\n        value: isNonArrayObject(options.networkQuality) || options.networkQuality\n      },\n      _notifyWarnings: {\n        value: options.notifyWarnings\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0, // initially 0, set only after 1st successful connection.\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: new options.Backoff(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n\n\n    setupTransport(this);\n  }\n\n  /**\n   * Create a Connect, Sync or Disconnect RSP message.\n   * @private\n   * @returns {?object}\n   */\n  _createConnectOrSyncOrDisconnectMessage() {\n    if (this.state === 'connected') {\n      return null;\n    }\n\n    if (this.state === 'disconnected') {\n      return {\n        session: this._session,\n        type: 'disconnect',\n        version: RSP_VERSION\n      };\n    }\n\n    const type = {\n      connecting: 'connect',\n      syncing: 'sync'\n    }[this.state];\n\n    const message = {\n      name: this._name,\n      participant: this._localParticipant.getState(),\n      peer_connections: this._peerConnectionManager.getStates(),\n      type,\n      version: RSP_VERSION\n    };\n\n    if (message.type === 'connect') {\n      message.ice_servers = this._iceServersStatus;\n\n      message.publisher = {\n        name: SDK_NAME,\n        sdk_version: SDK_VERSION,\n        user_agent: this._userAgent\n      };\n\n      if (this._bandwidthProfile) {\n        message.bandwidth_profile = createBandwidthProfilePayload(\n          this._bandwidthProfile);\n      }\n\n      if (this._notifyWarnings) {\n        message.participant.media_warnings = createMediaWarningsPayload(\n          this._notifyWarnings);\n      }\n\n      message.media_signaling = createMediaSignalingPayload(\n        this._dominantSpeaker,\n        this._networkQuality,\n        this._trackPriority,\n        this._trackSwitchOff,\n        this._adaptiveSimulcast,\n        this._renderHints);\n\n      message.subscribe = createSubscribePayload(this._automaticSubscription);\n      message.format = SDP_FORMAT;\n      message.token = this._accessToken;\n    } else if (message.type === 'sync') {\n      message.session = this._session;\n      message.token = this._accessToken;\n    } else if (message.type === 'update') {\n      message.session = this._session;\n    }\n\n    return message;\n  }\n\n  /**\n   * Create an \"ice\" message.\n   * @private\n   */\n  _createIceMessage() {\n    return {\n      edge: 'roaming', // roaming here means use same edge as signaling.\n      token: this._accessToken,\n      type: 'ice',\n      version: ICE_VERSION\n    };\n  }\n\n  /**\n   * Send a Connect, Sync or Disconnect RSP message.\n   * @private\n   */\n  _sendConnectOrSyncOrDisconnectMessage() {\n    const message = this._createConnectOrSyncOrDisconnectMessage();\n    if (message) {\n      this._twilioConnection.sendMessage(message);\n    }\n  }\n\n  /**\n   * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n   * in disconnection.\n   * @param {TwilioError} [error]\n   * @returns {boolean}\n   */\n  disconnect(error) {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected', null, [error]);\n      this._sendConnectOrSyncOrDisconnectMessage();\n      this._twilioConnection.close();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Publish an RSP Update. Returns true if calling the method resulted in\n   * publishing (or eventually publishing) the update.\n   * @param {object} update\n   * @returns {boolean}\n   */\n  publish(update) {\n    switch (this.state) {\n      case 'connected':\n        this._twilioConnection.sendMessage(Object.assign({\n          session: this._session,\n          type: 'update',\n          version: RSP_VERSION\n        }, update));\n        return true;\n      case 'connecting':\n      case 'syncing':\n        this._updatesToSend.push(update);\n        return true;\n      case 'disconnected':\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Publish (or queue) an event to the Insights gateway.\n   * @param {string} group - Event group name\n   * @param {string} name - Event name\n   * @param {string} level - Event level\n   * @param {object} payload - Event payload\n   * @returns {void}\n   */\n  publishEvent(group, name, level, payload) {\n    this._eventObserver.emit('event', { group, name, level, payload });\n  }\n\n  /**\n   * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n   * syncing.\n   * @returns {boolean}\n   */\n  sync() {\n    if (this.state === 'connected') {\n      this.preempt('syncing');\n      this._sendConnectOrSyncOrDisconnectMessage();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   * @returns {void}\n   */\n  _setSession(session, sessionTimeout) {\n    this._session = session;\n    this._sessionTimeoutMS = sessionTimeout * 1000;\n  }\n\n  /**\n   * Determines if we should attempt reconnect.\n   * returns a Promise to wait on before attempting to\n   * reconnect. returns null if its not okay to reconnect.\n   * @private\n   * @returns {Promise<void>}\n   */\n  _getReconnectTimer() {\n    if (this._sessionTimeoutMS === 0) {\n      // this means either we have never connected.\n      // or we timed out while trying to reconnect\n      // In either case we do not want to reconnect.\n      return null;\n    }\n\n    // start session timer\n    if (!this._sessionTimer) {\n      this._sessionTimer = new Timeout(() => {\n        // ensure that _clearReconnectTimer wasn't\n        // called while we were waiting.\n        if (this._sessionTimer) {\n          // do not allow any more reconnect attempts.\n          this._sessionTimeoutMS = 0;\n        }\n      }, this._sessionTimeoutMS);\n    }\n\n    // return promise that waits with exponential backoff.\n    return new Promise(resolve => {\n      this._reconnectBackoff.backoff(resolve);\n    });\n  }\n\n  /**\n   * clears the session reconnect timer.\n   *\n   * @private\n   * @returns {void}\n   */\n  _clearReconnectTimer() {\n    this._reconnectBackoff.reset();\n    if (this._sessionTimer) {\n      this._sessionTimer.clear();\n      this._sessionTimer = null;\n    }\n  }\n}\n\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} peerConnections\n */\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce((peerConnectionsById, update) => {\n    const reduced = peerConnectionsById.get(update.id) || update;\n\n    // First, reduce the top-level `description` property.\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    }\n\n    // Then, reduce the top-level `ice` property.\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    }\n\n    // Finally, update the map.\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce((reduced, update) => {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    }\n\n    // Then, reduce the top-level `peer_connections` property.\n    /* eslint camelcase:0 */\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(\n        reduced.peer_connections.concat(update.peer_connections));\n    }\n    return reduced;\n  }, {});\n}\n\nfunction setupTransport(transport) {\n  function createOrResetTwilioConnection() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n    const { _iceServersStatus, _options, _wsServer, state } = transport;\n    const { TwilioConnection } = _options;\n\n    const twilioConnection = new TwilioConnection(_wsServer, Object.assign({\n      helloBody: state === 'connecting' && _iceServersStatus === 'acquire'\n        ? transport._createIceMessage()\n        : transport._createConnectOrSyncOrDisconnectMessage()\n    }, _options));\n\n    twilioConnection.once('close', reason => {\n      if (reason === TwilioConnection.CloseReason.LOCAL) {\n        disconnect();\n      } else {\n        disconnect(new Error(reason));\n      }\n    });\n\n    twilioConnection.on('message', handleMessage);\n    transport._twilioConnection = twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    const reconnectTimer = transport._getReconnectTimer();\n    if (!reconnectTimer) {\n      const twilioError = error.message === TwilioConnection.CloseReason.BUSY\n        ? new SignalingServerBusyError()\n        : new SignalingConnectionError();\n      transport.disconnect(twilioError);\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(createOrResetTwilioConnection);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n          case 'warning':\n            transport.emit('message', message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed'\n              ? new RoomCompletedError()\n              : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'connecting':\n        switch (message.type) {\n          case 'iced':\n            transport._options.onIced(message.ice_servers).then(() => {\n              transport._sendConnectOrSyncOrDisconnectMessage();\n            });\n            return;\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed'\n              ? new RoomCompletedError()\n              : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'synced':\n            transport._clearReconnectTimer();\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed'\n              ? new RoomCompletedError()\n              : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected': {\n        const updates = transport._updatesToSend.splice(0);\n        if (updates.length) {\n          transport.publish(reduceUpdates(updates));\n        }\n        transport._updatesReceived.splice(0).forEach(update => transport.emit('message', update));\n        return;\n      }\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n      case 'syncing':\n        // Do nothing.\n        return;\n      default:\n        // Impossible\n        return;\n    }\n  });\n\n  const { _options, _iceServersStatus } = transport;\n  const { iceServers, onIced } = _options;\n\n  if (_iceServersStatus === 'overrode') {\n    onIced(iceServers).then(createOrResetTwilioConnection);\n  } else {\n    createOrResetTwilioConnection();\n  }\n}\n\nmodule.exports = TwilioConnectionTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}