{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n'use strict';\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLocalTracks = void 0;\nvar noisecancellationimpl_1 = require(\"./media/track/noisecancellationimpl\");\nvar buildLogLevels = require('./util').buildLogLevels;\nvar _a = require('./webrtc'),\n  getUserMedia = _a.getUserMedia,\n  MediaStreamTrack = _a.MediaStreamTrack;\nvar _b = require('./media/track/es5'),\n  LocalAudioTrack = _b.LocalAudioTrack,\n  LocalDataTrack = _b.LocalDataTrack,\n  LocalVideoTrack = _b.LocalVideoTrack;\nvar Log = require('./util/log');\nvar _c = require('./util/constants'),\n  DEFAULT_LOG_LEVEL = _c.DEFAULT_LOG_LEVEL,\n  DEFAULT_LOGGER_NAME = _c.DEFAULT_LOGGER_NAME,\n  INVALID_VALUE = _c.typeErrors.INVALID_VALUE;\nvar workaround180748 = require('./webaudio/workaround180748');\n// This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\nvar createLocalTrackCalls = 0;\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * Note that on mobile browsers, the camera can be reserved by only one {@link LocalVideoTrack}\n * at any given time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n *\n * @example\n * var Video = require('twilio-video');\n * var localTracks;\n *\n * // Pre-acquire tracks to display camera preview.\n * Video.createLocalTracks().then(function(tracks) {\n *  localTracks = tracks;\n *  var localVideoTrack = localTracks.find(track => track.kind === 'video');\n *  divContainer.appendChild(localVideoTrack.attach());\n * })\n *\n * // Later, join the Room with the pre-acquired LocalTracks.\n * Video.connect('token', {\n *   name: 'my-cool-room',\n *   tracks: localTracks\n * });\n *\n */\nfunction createLocalTracks(options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var isAudioVideoAbsent, fullOptions, logComponentName, logLevels, log, localTrackOptions, extraLocalTrackOptions, noiseCancellationOptions, mediaStreamConstraints, workaroundWebKitBug180748, mediaStream, mediaStreamTracks, error_1;\n    var _this = this;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n          fullOptions = __assign({\n            audio: isAudioVideoAbsent,\n            getUserMedia: getUserMedia,\n            loggerName: DEFAULT_LOGGER_NAME,\n            logLevel: DEFAULT_LOG_LEVEL,\n            LocalAudioTrack: LocalAudioTrack,\n            LocalDataTrack: LocalDataTrack,\n            LocalVideoTrack: LocalVideoTrack,\n            MediaStreamTrack: MediaStreamTrack,\n            Log: Log,\n            video: isAudioVideoAbsent\n          }, options);\n          logComponentName = \"[createLocalTracks #\" + ++createLocalTrackCalls + \"]\";\n          logLevels = buildLogLevels(fullOptions.logLevel);\n          log = new fullOptions.Log('default', logComponentName, logLevels, fullOptions.loggerName);\n          localTrackOptions = Object.assign({\n            log: log\n          }, fullOptions);\n          // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n          // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n          // \"options\" without the \"name\".\n          // NOTE(joma): CreateLocalTracksOptions type does not really have a \"name\" property when used publicly by customers.\n          // But we are passing this property when used internally by other JS files.\n          // We can update this \"any\" type once those JS files are converted to TS.\n          delete localTrackOptions.name;\n          if (fullOptions.audio === false && fullOptions.video === false) {\n            log.info('Neither audio nor video requested, so returning empty LocalTracks');\n            return [2 /*return*/, []];\n          }\n          if (fullOptions.tracks) {\n            log.info('Adding user-provided LocalTracks');\n            log.debug('LocalTracks:', fullOptions.tracks);\n            return [2 /*return*/, fullOptions.tracks];\n          }\n          extraLocalTrackOptions = {\n            audio: typeof fullOptions.audio === 'object' && fullOptions.audio.name ? {\n              name: fullOptions.audio.name\n            } : {\n              defaultDeviceCaptureMode: 'auto'\n            },\n            video: typeof fullOptions.video === 'object' && fullOptions.video.name ? {\n              name: fullOptions.video.name\n            } : {}\n          };\n          extraLocalTrackOptions.audio.isCreatedByCreateLocalTracks = true;\n          extraLocalTrackOptions.video.isCreatedByCreateLocalTracks = true;\n          if (typeof fullOptions.audio === 'object') {\n            if (typeof fullOptions.audio.workaroundWebKitBug1208516 === 'boolean') {\n              extraLocalTrackOptions.audio.workaroundWebKitBug1208516 = fullOptions.audio.workaroundWebKitBug1208516;\n            }\n            if ('noiseCancellationOptions' in fullOptions.audio) {\n              noiseCancellationOptions = fullOptions.audio.noiseCancellationOptions;\n              delete fullOptions.audio.noiseCancellationOptions;\n            }\n            if (!('defaultDeviceCaptureMode' in fullOptions.audio)) {\n              extraLocalTrackOptions.audio.defaultDeviceCaptureMode = 'auto';\n            } else if (['auto', 'manual'].every(function (mode) {\n              return mode !== fullOptions.audio.defaultDeviceCaptureMode;\n            })) {\n              // eslint-disable-next-line new-cap\n              throw INVALID_VALUE('CreateLocalAudioTrackOptions.defaultDeviceCaptureMode', ['auto', 'manual']);\n            } else {\n              extraLocalTrackOptions.audio.defaultDeviceCaptureMode = fullOptions.audio.defaultDeviceCaptureMode;\n            }\n          }\n          if (typeof fullOptions.video === 'object' && typeof fullOptions.video.workaroundWebKitBug1208516 === 'boolean') {\n            extraLocalTrackOptions.video.workaroundWebKitBug1208516 = fullOptions.video.workaroundWebKitBug1208516;\n          }\n          if (typeof fullOptions.audio === 'object') {\n            delete fullOptions.audio.name;\n          }\n          if (typeof fullOptions.video === 'object') {\n            delete fullOptions.video.name;\n          }\n          mediaStreamConstraints = {\n            audio: fullOptions.audio,\n            video: fullOptions.video\n          };\n          workaroundWebKitBug180748 = typeof fullOptions.audio === 'object' && fullOptions.audio.workaroundWebKitBug180748;\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 4,, 5]);\n          return [4 /*yield*/, workaroundWebKitBug180748 ? workaround180748(log, fullOptions.getUserMedia, mediaStreamConstraints) : fullOptions.getUserMedia(mediaStreamConstraints)];\n        case 2:\n          mediaStream = _a.sent();\n          mediaStreamTracks = __spreadArray(__spreadArray([], __read(mediaStream.getAudioTracks())), __read(mediaStream.getVideoTracks()));\n          log.info('Call to getUserMedia successful; got tracks:', mediaStreamTracks);\n          return [4 /*yield*/, Promise.all(mediaStreamTracks.map(function (mediaStreamTrack) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, cleanTrack, noiseCancellation;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    if (!(mediaStreamTrack.kind === 'audio' && noiseCancellationOptions)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, noisecancellationimpl_1.applyNoiseCancellation(mediaStreamTrack, noiseCancellationOptions, log)];\n                  case 1:\n                    _a = _b.sent(), cleanTrack = _a.cleanTrack, noiseCancellation = _a.noiseCancellation;\n                    return [2 /*return*/, new localTrackOptions.LocalAudioTrack(cleanTrack, __assign(__assign(__assign({}, extraLocalTrackOptions.audio), localTrackOptions), {\n                      noiseCancellation: noiseCancellation\n                    }))];\n                  case 2:\n                    if (mediaStreamTrack.kind === 'audio') {\n                      return [2 /*return*/, new localTrackOptions.LocalAudioTrack(mediaStreamTrack, __assign(__assign({}, extraLocalTrackOptions.audio), localTrackOptions))];\n                    }\n                    _b.label = 3;\n                  case 3:\n                    return [2 /*return*/, new localTrackOptions.LocalVideoTrack(mediaStreamTrack, __assign(__assign({}, extraLocalTrackOptions.video), localTrackOptions))];\n                }\n              });\n            });\n          }))];\n        case 3:\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          error_1 = _a.sent();\n          log.warn('Call to getUserMedia failed:', error_1);\n          throw error_1;\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nexports.createLocalTracks = createLocalTracks;","map":{"version":3,"names":["noisecancellationimpl_1","require","buildLogLevels","_a","getUserMedia","MediaStreamTrack","_b","LocalAudioTrack","LocalDataTrack","LocalVideoTrack","Log","_c","DEFAULT_LOG_LEVEL","DEFAULT_LOGGER_NAME","INVALID_VALUE","typeErrors","workaround180748","createLocalTrackCalls","createLocalTracks","options","isAudioVideoAbsent","fullOptions","__assign","audio","loggerName","logLevel","video","logComponentName","logLevels","log","localTrackOptions","Object","assign","name","info","tracks","debug","extraLocalTrackOptions","defaultDeviceCaptureMode","isCreatedByCreateLocalTracks","workaroundWebKitBug1208516","noiseCancellationOptions","every","mode","mediaStreamConstraints","workaroundWebKitBug180748","mediaStream","sent","mediaStreamTracks","__spreadArray","__read","getAudioTracks","getVideoTracks","Promise","all","map","mediaStreamTrack","__awaiter","_this","kind","applyNoiseCancellation","cleanTrack","noiseCancellation","warn","error_1","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/createlocaltracks.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n'use strict';\n\nimport {\n  CreateLocalAudioTrackOptions,\n  CreateLocalTrackOptions,\n  CreateLocalTracksOptions,\n  DefaultDeviceCaptureMode,\n  LocalTrack,\n  NoiseCancellationOptions\n} from '../tsdef';\n\nimport { applyNoiseCancellation } from './media/track/noisecancellationimpl';\n\nconst { buildLogLevels } = require('./util');\nconst { getUserMedia, MediaStreamTrack } = require('./webrtc');\n\nconst {\n  LocalAudioTrack,\n  LocalDataTrack,\n  LocalVideoTrack\n} = require('./media/track/es5');\n\nconst Log = require('./util/log');\nconst { DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME, typeErrors: { INVALID_VALUE } } = require('./util/constants');\nconst workaround180748 = require('./webaudio/workaround180748');\n\n// This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\nlet createLocalTrackCalls = 0;\n\n\ntype ExtraLocalTrackOption = CreateLocalTrackOptions & { isCreatedByCreateLocalTracks?: boolean };\ntype ExtraLocalAudioTrackOption = ExtraLocalTrackOption & { defaultDeviceCaptureMode? : DefaultDeviceCaptureMode };\ntype ExtraLocalTrackOptions = { audio: ExtraLocalAudioTrackOption; video: ExtraLocalTrackOption; };\n\ninterface InternalOptions extends CreateLocalTracksOptions {\n  getUserMedia: any;\n  LocalAudioTrack: any;\n  LocalDataTrack: any;\n  LocalVideoTrack: any;\n  MediaStreamTrack: any;\n  Log: any;\n}\n\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * Note that on mobile browsers, the camera can be reserved by only one {@link LocalVideoTrack}\n * at any given time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n *\n * @example\n * var Video = require('twilio-video');\n * var localTracks;\n *\n * // Pre-acquire tracks to display camera preview.\n * Video.createLocalTracks().then(function(tracks) {\n *  localTracks = tracks;\n *  var localVideoTrack = localTracks.find(track => track.kind === 'video');\n *  divContainer.appendChild(localVideoTrack.attach());\n * })\n *\n * // Later, join the Room with the pre-acquired LocalTracks.\n * Video.connect('token', {\n *   name: 'my-cool-room',\n *   tracks: localTracks\n * });\n *\n */\nexport async function createLocalTracks(options?: CreateLocalTracksOptions): Promise<LocalTrack[]> {\n  const isAudioVideoAbsent =\n    !(options && ('audio' in options || 'video' in options));\n\n  const fullOptions: InternalOptions = {\n    audio: isAudioVideoAbsent,\n    getUserMedia,\n    loggerName: DEFAULT_LOGGER_NAME,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack,\n    LocalDataTrack,\n    LocalVideoTrack,\n    MediaStreamTrack,\n    Log,\n    video: isAudioVideoAbsent,\n    ...options,\n  };\n\n  const logComponentName = `[createLocalTracks #${++createLocalTrackCalls}]`;\n  const logLevels = buildLogLevels(fullOptions.logLevel);\n  const log = new fullOptions.Log('default', logComponentName, logLevels, fullOptions.loggerName);\n\n  const localTrackOptions = Object.assign({ log }, fullOptions);\n\n  // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n  // NOTE(joma): CreateLocalTracksOptions type does not really have a \"name\" property when used publicly by customers.\n  // But we are passing this property when used internally by other JS files.\n  // We can update this \"any\" type once those JS files are converted to TS.\n  delete (localTrackOptions as any).name;\n\n  if (fullOptions.audio === false && fullOptions.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return [];\n  }\n\n  if (fullOptions.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', fullOptions.tracks);\n    return fullOptions.tracks;\n  }\n\n  const extraLocalTrackOptions: ExtraLocalTrackOptions = {\n    audio: typeof fullOptions.audio === 'object' && fullOptions.audio.name\n      ? { name: fullOptions.audio.name }\n      : { defaultDeviceCaptureMode: 'auto' },\n    video: typeof fullOptions.video === 'object' && fullOptions.video.name\n      ? { name: fullOptions.video.name }\n      : {}\n  };\n\n  extraLocalTrackOptions.audio.isCreatedByCreateLocalTracks = true;\n  extraLocalTrackOptions.video.isCreatedByCreateLocalTracks = true;\n\n  let noiseCancellationOptions: NoiseCancellationOptions | undefined;\n\n  if (typeof fullOptions.audio === 'object') {\n    if (typeof fullOptions.audio.workaroundWebKitBug1208516 === 'boolean') {\n      extraLocalTrackOptions.audio.workaroundWebKitBug1208516 = fullOptions.audio.workaroundWebKitBug1208516;\n    }\n\n    if ('noiseCancellationOptions' in fullOptions.audio) {\n      noiseCancellationOptions = fullOptions.audio.noiseCancellationOptions;\n      delete fullOptions.audio.noiseCancellationOptions;\n    }\n\n    if (!('defaultDeviceCaptureMode' in fullOptions.audio)) {\n      extraLocalTrackOptions.audio.defaultDeviceCaptureMode = 'auto';\n    } else if (['auto', 'manual'].every(mode => mode !== (fullOptions.audio as CreateLocalAudioTrackOptions).defaultDeviceCaptureMode)) {\n      // eslint-disable-next-line new-cap\n      throw INVALID_VALUE('CreateLocalAudioTrackOptions.defaultDeviceCaptureMode', ['auto', 'manual']);\n    } else {\n      extraLocalTrackOptions.audio.defaultDeviceCaptureMode = fullOptions.audio.defaultDeviceCaptureMode;\n    }\n  }\n\n  if (typeof fullOptions.video === 'object' && typeof fullOptions.video.workaroundWebKitBug1208516 === 'boolean') {\n    extraLocalTrackOptions.video.workaroundWebKitBug1208516 = fullOptions.video.workaroundWebKitBug1208516;\n  }\n\n  if (typeof fullOptions.audio === 'object') {\n    delete fullOptions.audio.name;\n  }\n  if (typeof fullOptions.video === 'object') {\n    delete fullOptions.video.name;\n  }\n\n  const mediaStreamConstraints = {\n    audio: fullOptions.audio,\n    video: fullOptions.video\n  };\n\n  const workaroundWebKitBug180748 = typeof fullOptions.audio === 'object' && fullOptions.audio.workaroundWebKitBug180748;\n\n  try {\n    const mediaStream = await (workaroundWebKitBug180748\n      ? workaround180748(log, fullOptions.getUserMedia, mediaStreamConstraints)\n      : fullOptions.getUserMedia(mediaStreamConstraints));\n\n    const mediaStreamTracks = [\n      ...mediaStream.getAudioTracks(),\n      ...mediaStream.getVideoTracks(),\n    ];\n\n    log.info('Call to getUserMedia successful; got tracks:', mediaStreamTracks);\n\n    return await Promise.all(\n      mediaStreamTracks.map(async mediaStreamTrack => {\n        if (mediaStreamTrack.kind === 'audio' && noiseCancellationOptions) {\n          const { cleanTrack, noiseCancellation } = await applyNoiseCancellation(mediaStreamTrack, noiseCancellationOptions, log);\n          return new localTrackOptions.LocalAudioTrack(cleanTrack, {\n            ...extraLocalTrackOptions.audio,\n            ...localTrackOptions,\n            noiseCancellation\n          });\n        } else if (mediaStreamTrack.kind === 'audio') {\n          return new localTrackOptions.LocalAudioTrack(mediaStreamTrack, {\n            ...extraLocalTrackOptions.audio,\n            ...localTrackOptions,\n          });\n        }\n        return new localTrackOptions.LocalVideoTrack(mediaStreamTrack, {\n          ...extraLocalTrackOptions.video,\n          ...localTrackOptions,\n        });\n      })\n    );\n  } catch (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  }\n}\n\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions|CreateLocalAudioTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\n *   Set the default log verbosity\n *   of logging. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\n *   See [examples](module-twilio-video.html#.connect) for details.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}