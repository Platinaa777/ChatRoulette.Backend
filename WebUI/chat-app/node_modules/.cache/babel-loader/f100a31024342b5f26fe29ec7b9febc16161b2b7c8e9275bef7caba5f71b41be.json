{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runPreflight = exports.PreflightTest = void 0;\nvar constants_1 = require(\"../util/constants\");\nvar timer_1 = require(\"./timer\");\nvar mos_1 = require(\"./mos\");\nvar getCombinedConnectionStats_1 = require(\"./getCombinedConnectionStats\");\nvar getturncredentials_1 = require(\"./getturncredentials\");\nvar makestat_1 = require(\"./makestat\");\nvar syntheticaudio_1 = require(\"./syntheticaudio\");\nvar syntheticvideo_1 = require(\"./syntheticvideo\");\nvar index_1 = require(\"../util/index\");\nvar WS_SERVER = require('../util/constants').WS_SERVER;\nvar Log = require('../util/log');\nvar EventEmitter = require('../eventemitter');\nvar MovingAverageDelta = require('../util/movingaveragedelta');\nvar EventObserver = require('../util/eventobserver');\nvar InsightsPublisher = require('../util/insightspublisher');\nvar _a = require('../util/sid'),\n  createSID = _a.createSID,\n  sessionSID = _a.sessionSID;\nvar _b = require('../util/twilio-video-errors'),\n  SignalingConnectionTimeoutError = _b.SignalingConnectionTimeoutError,\n  MediaConnectionError = _b.MediaConnectionError;\nvar SECOND = 1000;\nvar DEFAULT_TEST_DURATION = 10 * SECOND;\n/**\n * progress values that are sent by {@link PreflightTest#event:progress}\n * @enum {string}\n */\nvar PreflightProgress = {\n  /**\n   * {@link PreflightTest} has successfully generated synthetic tracks\n   */\n  mediaAcquired: 'mediaAcquired',\n  /**\n   * {@link PreflightTest} has successfully connected to twilio server and obtained turn credentials\n   */\n  connected: 'connected',\n  /**\n   * SubscriberParticipant successfully subscribed to media tracks.\n   */\n  mediaSubscribed: 'mediaSubscribed',\n  /**\n   * Media flow was detected.\n   */\n  mediaStarted: 'mediaStarted',\n  /**\n   * Established DTLS connection. This is measured from RTCDtlsTransport `connecting` to `connected` state.\n   * On Safari, Support for measuring this is missing, this event will be not be emitted on Safari.\n   */\n  dtlsConnected: 'dtlsConnected',\n  /**\n   * Established a PeerConnection, This is measured from PeerConnection `connecting` to `connected` state.\n   * On Firefox, Support for measuring this is missing, this event will be not be emitted on Firefox.\n   */\n  peerConnectionConnected: 'peerConnectionConnected',\n  /**\n   * Established ICE connection. This is measured from ICE connection `checking` to `connected` state.\n   */\n  iceConnected: 'iceConnected'\n};\nfunction notEmpty(value) {\n  return value !== null && typeof value !== 'undefined';\n}\nvar nInstances = 0;\n/**\n * A {@link PreflightTest} monitors progress of an ongoing preflight test.\n * <br><br>\n * Instance of {@link PreflightTest} is returned by calling {@link module:twilio-video.runPreflight}\n * @extends EventEmitter\n * @emits PreflightTest#completed\n * @emits PreflightTest#failed\n * @emits PreflightTest#progress\n */\nvar PreflightTest = /** @class */function (_super) {\n  __extends(PreflightTest, _super);\n  /**\n   * Constructs {@link PreflightTest}.\n   * @param {string} token\n   * @param {?PreflightOptions} [options]\n   */\n  function PreflightTest(token, options) {\n    var _this = _super.call(this) || this;\n    _this._testTiming = new timer_1.Timer();\n    _this._dtlsTiming = new timer_1.Timer();\n    _this._iceTiming = new timer_1.Timer();\n    _this._peerConnectionTiming = new timer_1.Timer();\n    _this._mediaTiming = new timer_1.Timer();\n    _this._connectTiming = new timer_1.Timer();\n    _this._sentBytesMovingAverage = new MovingAverageDelta();\n    _this._packetLossMovingAverage = new MovingAverageDelta();\n    _this._progressEvents = [];\n    _this._receivedBytesMovingAverage = new MovingAverageDelta();\n    var internalOptions = options;\n    var _a = internalOptions.environment,\n      environment = _a === void 0 ? 'prod' : _a,\n      _b = internalOptions.region,\n      region = _b === void 0 ? 'gll' : _b,\n      _c = internalOptions.duration,\n      duration = _c === void 0 ? DEFAULT_TEST_DURATION : _c;\n    // eslint-disable-next-line new-cap\n    var wsServer = internalOptions.wsServer || WS_SERVER(environment, region);\n    _this._log = new Log('default', _this, constants_1.DEFAULT_LOG_LEVEL, constants_1.DEFAULT_LOGGER_NAME);\n    _this._testDuration = duration;\n    _this._instanceId = nInstances++;\n    _this._testTiming.start();\n    _this._runPreflightTest(token, environment, wsServer);\n    return _this;\n  }\n  PreflightTest.prototype.toString = function () {\n    return \"[Preflight #\" + this._instanceId + \"]\";\n  };\n  /**\n   * stops ongoing tests and emits error\n   */\n  PreflightTest.prototype.stop = function () {\n    this._stopped = true;\n  };\n  PreflightTest.prototype._generatePreflightReport = function (collectedStats) {\n    this._testTiming.stop();\n    return {\n      testTiming: this._testTiming.getTimeMeasurement(),\n      networkTiming: {\n        dtls: this._dtlsTiming.getTimeMeasurement(),\n        ice: this._iceTiming.getTimeMeasurement(),\n        peerConnection: this._peerConnectionTiming.getTimeMeasurement(),\n        connect: this._connectTiming.getTimeMeasurement(),\n        media: this._mediaTiming.getTimeMeasurement()\n      },\n      stats: {\n        jitter: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.jitter),\n        rtt: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.rtt),\n        packetLoss: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.packetLoss)\n      },\n      selectedIceCandidatePairStats: collectedStats ? collectedStats.selectedIceCandidatePairStats : null,\n      iceCandidateStats: collectedStats ? collectedStats.iceCandidateStats : [],\n      progressEvents: this._progressEvents,\n      // NOTE(mpatwardhan): internal properties.\n      mos: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.mos)\n    };\n  };\n  PreflightTest.prototype._executePreflightStep = function (stepName, step, timeoutError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var MAX_STEP_DURATION, stepPromise, timer, timeoutPromise, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._log.debug('Executing step: ', stepName);\n            MAX_STEP_DURATION = this._testDuration + 10 * SECOND;\n            if (this._stopped) {\n              throw new Error('stopped');\n            }\n            stepPromise = Promise.resolve().then(step);\n            timer = null;\n            timeoutPromise = new Promise(function (_resolve, reject) {\n              timer = setTimeout(function () {\n                reject(timeoutError || new Error(stepName + \" timeout.\"));\n              }, MAX_STEP_DURATION);\n            });\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, Promise.race([timeoutPromise, stepPromise])];\n          case 2:\n            result = _a.sent();\n            return [2 /*return*/, result];\n          case 3:\n            if (timer !== null) {\n              clearTimeout(timer);\n            }\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectNetworkTimings = function (pc) {\n    var _this = this;\n    return new Promise(function (resolve) {\n      var dtlsTransport;\n      pc.addEventListener('iceconnectionstatechange', function () {\n        if (pc.iceConnectionState === 'checking') {\n          _this._iceTiming.start();\n        }\n        if (pc.iceConnectionState === 'connected') {\n          _this._iceTiming.stop();\n          _this._updateProgress(PreflightProgress.iceConnected);\n          if (!dtlsTransport || dtlsTransport && dtlsTransport.state === 'connected') {\n            resolve();\n          }\n        }\n      });\n      // firefox does not support connectionstatechange.\n      pc.addEventListener('connectionstatechange', function () {\n        if (pc.connectionState === 'connecting') {\n          _this._peerConnectionTiming.start();\n        }\n        if (pc.connectionState === 'connected') {\n          _this._peerConnectionTiming.stop();\n          _this._updateProgress(PreflightProgress.peerConnectionConnected);\n        }\n      });\n      // Safari does not expose sender.transport.\n      var senders = pc.getSenders();\n      var transport = senders.map(function (sender) {\n        return sender.transport;\n      }).find(notEmpty);\n      if (typeof transport !== 'undefined') {\n        dtlsTransport = transport;\n        dtlsTransport.addEventListener('statechange', function () {\n          if (dtlsTransport.state === 'connecting') {\n            _this._dtlsTiming.start();\n          }\n          if (dtlsTransport.state === 'connected') {\n            _this._dtlsTiming.stop();\n            _this._updateProgress(PreflightProgress.dtlsConnected);\n            if (pc.iceConnectionState === 'connected') {\n              resolve();\n            }\n          }\n        });\n      }\n    });\n  };\n  PreflightTest.prototype._setupInsights = function (_a) {\n    var token = _a.token,\n      _b = _a.environment,\n      environment = _b === void 0 ? constants_1.DEFAULT_ENVIRONMENT : _b,\n      _c = _a.realm,\n      realm = _c === void 0 ? constants_1.DEFAULT_REALM : _c;\n    var eventPublisherOptions = {};\n    var eventPublisher = new InsightsPublisher(token, constants_1.SDK_NAME, constants_1.SDK_VERSION, environment, realm, eventPublisherOptions);\n    // event publisher requires room sid/participant sid. supply fake ones.\n    eventPublisher.connect('PREFLIGHT_ROOM_SID', 'PREFLIGHT_PARTICIPANT');\n    var eventObserver = new EventObserver(eventPublisher, Date.now(), this._log);\n    // eslint-disable-next-line no-undefined\n    var undefinedValue = undefined;\n    return {\n      reportToInsights: function (_a) {\n        var _b, _c;\n        var report = _a.report;\n        var jitterStats = report.stats.jitter || undefinedValue;\n        var rttStats = report.stats.rtt || undefinedValue;\n        var packetLossStats = report.stats.packetLoss || undefinedValue;\n        var mosStats = report.mos || undefinedValue;\n        // stringify important info from ice candidates.\n        var candidateTypeToProtocols = new Map();\n        report.iceCandidateStats.forEach(function (candidateStats) {\n          if (candidateStats.candidateType && candidateStats.protocol) {\n            var protocols = candidateTypeToProtocols.get(candidateStats.candidateType) || [];\n            if (protocols.indexOf(candidateStats.protocol) < 0) {\n              protocols.push(candidateStats.protocol);\n            }\n            candidateTypeToProtocols.set(candidateStats.candidateType, protocols);\n          }\n        });\n        var iceCandidateStats = JSON.stringify(Object.fromEntries(candidateTypeToProtocols));\n        var insightsReport = {\n          name: 'report',\n          group: 'preflight',\n          level: report.error ? 'error' : 'info',\n          payload: {\n            sessionSID: sessionSID,\n            preflightSID: createSID('PF'),\n            progressEvents: JSON.stringify(report.progressEvents),\n            testTiming: report.testTiming,\n            dtlsTiming: report.networkTiming.dtls,\n            iceTiming: report.networkTiming.ice,\n            peerConnectionTiming: report.networkTiming.peerConnection,\n            connectTiming: report.networkTiming.connect,\n            mediaTiming: report.networkTiming.media,\n            selectedLocalCandidate: (_b = report.selectedIceCandidatePairStats) === null || _b === void 0 ? void 0 : _b.localCandidate,\n            selectedRemoteCandidate: (_c = report.selectedIceCandidatePairStats) === null || _c === void 0 ? void 0 : _c.remoteCandidate,\n            iceCandidateStats: iceCandidateStats,\n            jitterStats: jitterStats,\n            rttStats: rttStats,\n            packetLossStats: packetLossStats,\n            mosStats: mosStats,\n            error: report.error\n          }\n        };\n        eventObserver.emit('event', insightsReport);\n        setTimeout(function () {\n          return eventPublisher.disconnect();\n        }, 2000);\n      }\n    };\n  };\n  PreflightTest.prototype._runPreflightTest = function (token, environment, wsServer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var localTracks, pcs, reportToInsights, elements_1, iceServers, senderPC_1, receiverPC_1, remoteTracks_1, collectedStats_1, report, error_1, preflightReport;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            localTracks = [];\n            pcs = [];\n            reportToInsights = this._setupInsights({\n              token: token,\n              environment: environment\n            }).reportToInsights;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 8, 9, 10]);\n            elements_1 = [];\n            return [4 /*yield*/, this._executePreflightStep('Acquire media', function () {\n              return [syntheticaudio_1.syntheticAudio(), syntheticvideo_1.syntheticVideo({\n                width: 640,\n                height: 480\n              })];\n            })];\n          case 2:\n            localTracks = _a.sent();\n            this._updateProgress(PreflightProgress.mediaAcquired);\n            this.emit('debug', {\n              localTracks: localTracks\n            });\n            this._connectTiming.start();\n            return [4 /*yield*/, this._executePreflightStep('Get turn credentials', function () {\n              return getturncredentials_1.getTurnCredentials(token, wsServer);\n            }, new SignalingConnectionTimeoutError())];\n          case 3:\n            iceServers = _a.sent();\n            this._connectTiming.stop();\n            this._updateProgress(PreflightProgress.connected);\n            senderPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              iceTransportPolicy: 'relay',\n              bundlePolicy: 'max-bundle'\n            });\n            receiverPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              bundlePolicy: 'max-bundle'\n            });\n            pcs.push(senderPC_1);\n            pcs.push(receiverPC_1);\n            this._mediaTiming.start();\n            return [4 /*yield*/, this._executePreflightStep('Setup Peer Connections', function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var remoteTracksPromise, offer, updatedOffer, answer;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      senderPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && receiverPC_1.addIceCandidate(event.candidate);\n                      });\n                      receiverPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && senderPC_1.addIceCandidate(event.candidate);\n                      });\n                      localTracks.forEach(function (track) {\n                        return senderPC_1.addTrack(track);\n                      });\n                      remoteTracksPromise = new Promise(function (resolve) {\n                        var remoteTracks = [];\n                        receiverPC_1.addEventListener('track', function (event) {\n                          remoteTracks.push(event.track);\n                          if (remoteTracks.length === localTracks.length) {\n                            resolve(remoteTracks);\n                          }\n                        });\n                      });\n                      return [4 /*yield*/, senderPC_1.createOffer()];\n                    case 1:\n                      offer = _a.sent();\n                      updatedOffer = offer;\n                      return [4 /*yield*/, senderPC_1.setLocalDescription(updatedOffer)];\n                    case 2:\n                      _a.sent();\n                      return [4 /*yield*/, receiverPC_1.setRemoteDescription(updatedOffer)];\n                    case 3:\n                      _a.sent();\n                      return [4 /*yield*/, receiverPC_1.createAnswer()];\n                    case 4:\n                      answer = _a.sent();\n                      return [4 /*yield*/, receiverPC_1.setLocalDescription(answer)];\n                    case 5:\n                      _a.sent();\n                      return [4 /*yield*/, senderPC_1.setRemoteDescription(answer)];\n                    case 6:\n                      _a.sent();\n                      return [4 /*yield*/, this._collectNetworkTimings(senderPC_1)];\n                    case 7:\n                      _a.sent();\n                      return [2 /*return*/, remoteTracksPromise];\n                  }\n                });\n              });\n            }, new MediaConnectionError())];\n          case 4:\n            remoteTracks_1 = _a.sent();\n            this.emit('debug', {\n              remoteTracks: remoteTracks_1\n            });\n            remoteTracks_1.forEach(function (track) {\n              track.addEventListener('ended', function () {\n                return _this._log.warn(track.kind + ':ended');\n              });\n              track.addEventListener('mute', function () {\n                return _this._log.warn(track.kind + ':muted');\n              });\n              track.addEventListener('unmute', function () {\n                return _this._log.warn(track.kind + ':unmuted');\n              });\n            });\n            this._updateProgress(PreflightProgress.mediaSubscribed);\n            return [4 /*yield*/, this._executePreflightStep('Wait for tracks to start', function () {\n              return new Promise(function (resolve) {\n                var element = document.createElement('video');\n                element.autoplay = true;\n                element.playsInline = true;\n                element.muted = true;\n                element.srcObject = new MediaStream(remoteTracks_1);\n                elements_1.push(element);\n                _this.emit('debugElement', element);\n                element.oncanplay = resolve;\n              });\n            }, new MediaConnectionError())];\n          case 5:\n            _a.sent();\n            this._mediaTiming.stop();\n            this._updateProgress(PreflightProgress.mediaStarted);\n            return [4 /*yield*/, this._executePreflightStep('Collect stats for duration', function () {\n              return _this._collectRTCStatsForDuration(_this._testDuration, initCollectedStats(), senderPC_1, receiverPC_1);\n            })];\n          case 6:\n            collectedStats_1 = _a.sent();\n            return [4 /*yield*/, this._executePreflightStep('Generate report', function () {\n              return _this._generatePreflightReport(collectedStats_1);\n            })];\n          case 7:\n            report = _a.sent();\n            reportToInsights({\n              report: report\n            });\n            this.emit('completed', report);\n            return [3 /*break*/, 10];\n          case 8:\n            error_1 = _a.sent();\n            preflightReport = this._generatePreflightReport();\n            reportToInsights({\n              report: __assign(__assign({}, preflightReport), {\n                error: error_1 === null || error_1 === void 0 ? void 0 : error_1.toString()\n              })\n            });\n            this.emit('failed', error_1, preflightReport);\n            return [3 /*break*/, 10];\n          case 9:\n            pcs.forEach(function (pc) {\n              return pc.close();\n            });\n            localTracks.forEach(function (track) {\n              return track.stop();\n            });\n            return [7 /*endfinally*/];\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStats = function (collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var combinedStats, timestamp, bytesSent, bytesReceived, packets, packetsLost, roundTripTime, jitter, selectedIceCandidatePairStats, iceCandidateStats, hasLastData, fractionPacketLost, percentPacketsLost, score;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, getCombinedConnectionStats_1.getCombinedConnectionStats({\n              publisher: senderPC,\n              subscriber: receiverPC\n            })];\n          case 1:\n            combinedStats = _a.sent();\n            timestamp = combinedStats.timestamp, bytesSent = combinedStats.bytesSent, bytesReceived = combinedStats.bytesReceived, packets = combinedStats.packets, packetsLost = combinedStats.packetsLost, roundTripTime = combinedStats.roundTripTime, jitter = combinedStats.jitter, selectedIceCandidatePairStats = combinedStats.selectedIceCandidatePairStats, iceCandidateStats = combinedStats.iceCandidateStats;\n            hasLastData = collectedStats.jitter.length > 0;\n            collectedStats.jitter.push(jitter);\n            collectedStats.rtt.push(roundTripTime);\n            this._sentBytesMovingAverage.putSample(bytesSent, timestamp);\n            this._receivedBytesMovingAverage.putSample(bytesReceived, timestamp);\n            this._packetLossMovingAverage.putSample(packetsLost, packets);\n            if (hasLastData) {\n              // convert BytesMovingAverage which is in bytes/millisecond to bits/second\n              collectedStats.outgoingBitrate.push(this._sentBytesMovingAverage.get() * 1000 * 8);\n              collectedStats.incomingBitrate.push(this._receivedBytesMovingAverage.get() * 1000 * 8);\n              fractionPacketLost = this._packetLossMovingAverage.get();\n              percentPacketsLost = Math.min(100, fractionPacketLost * 100);\n              collectedStats.packetLoss.push(percentPacketsLost);\n              score = mos_1.calculateMOS(roundTripTime, jitter, fractionPacketLost);\n              collectedStats.mos.push(score);\n            }\n            if (!collectedStats.selectedIceCandidatePairStats) {\n              collectedStats.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n            }\n            if (collectedStats.iceCandidateStats.length === 0) {\n              collectedStats.iceCandidateStats = iceCandidateStats;\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStatsForDuration = function (duration, collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, STAT_INTERVAL, remainingDuration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            startTime = Date.now();\n            STAT_INTERVAL = Math.min(1000, duration);\n            return [4 /*yield*/, index_1.waitForSometime(STAT_INTERVAL)];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this._collectRTCStats(collectedStats, senderPC, receiverPC)];\n          case 2:\n            _a.sent();\n            remainingDuration = duration - (Date.now() - startTime);\n            if (!(remainingDuration > 0)) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._collectRTCStatsForDuration(remainingDuration, collectedStats, senderPC, receiverPC)];\n          case 3:\n            collectedStats = _a.sent();\n            _a.label = 4;\n          case 4:\n            return [2 /*return*/, collectedStats];\n        }\n      });\n    });\n  };\n  PreflightTest.prototype._updateProgress = function (name) {\n    var duration = Date.now() - this._testTiming.getTimeMeasurement().start;\n    this._progressEvents.push({\n      duration: duration,\n      name: name\n    });\n    this.emit('progress', name);\n  };\n  return PreflightTest;\n}(EventEmitter);\nexports.PreflightTest = PreflightTest;\nfunction initCollectedStats() {\n  return {\n    mos: [],\n    jitter: [],\n    rtt: [],\n    outgoingBitrate: [],\n    incomingBitrate: [],\n    packetLoss: [],\n    selectedIceCandidatePairStats: null,\n    iceCandidateStats: []\n  };\n}\n/**\n * Represents network timing measurements captured during preflight test\n * @typedef {object} NetworkTiming\n * @property {TimeMeasurement} [connect] - Time to establish signaling connection and acquire turn credentials\n * @property {TimeMeasurement} [media] - Time to start media. This is measured from calling connect to remote media getting started.\n * @property {TimeMeasurement} [dtls] - Time to establish dtls connection. This is measured from RTCDtlsTransport `connecting` to `connected` state. (Not available on Safari)\n * @property {TimeMeasurement} [ice] - Time to establish ice connectivity. This is measured from ICE connection `checking` to `connected` state.\n * @property {TimeMeasurement} [peerConnection] - Time to establish peer connectivity. This is measured from PeerConnection `connecting` to `connected` state. (Not available on Firefox)\n */\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} Stats\n * @property  {number} [average] - Average value observed.\n * @property  {number} [max] - Max value observed.\n * @property  {number} [min] - Min value observed.\n */\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} SelectedIceCandidatePairStats\n * @property  {RTCIceCandidateStats} [localCandidate] - Selected local ice candidate\n * @property  {RTCIceCandidateStats} [remoteCandidate] - Selected local ice candidate\n */\n/**\n * Represents RTC related stats that were observed during preflight test\n * @typedef {object} PreflightReportStats\n * @property {Stats} [jitter] - Packet delay variation in seconds\n * @property {Stats} [rtt] - Round trip time, to the server back to the client in milliseconds.\n * @property {Stats} [packetLoss] - Packet loss as a percent of total packets sent.\n*/\n/**\n * A {@link PreflightProgress} event with timing information.\n * @typedef {object} ProgressEvent\n * @property {number} [duration] - The duration of the event, measured from the start of the test.\n * @property {string} [name] - The {@link PreflightProgress} event name.\n */\n/**\n * Represents report generated by {@link PreflightTest}.\n * @typedef {object} PreflightTestReport\n * @property {TimeMeasurement} [testTiming] - Time measurements of test run time.\n * @property {NetworkTiming} [networkTiming] - Network related time measurements.\n * @property {PreflightReportStats} [stats] - RTC related stats captured during the test.\n * @property {Array<RTCIceCandidateStats>} [iceCandidateStats] - List of gathered ice candidates.\n * @property {SelectedIceCandidatePairStats} selectedIceCandidatePairStats - Stats for the ice candidates that were used for the connection.\n * @property {Array<ProgressEvent>} [progressEvents] - {@link ProgressEvent} events detected during the test.\n * Use this information to determine which steps were completed and which ones were not.\n */\n/**\n * You may pass these options to {@link module:twilio-video.testPreflight} in order to override the\n * default behavior.\n * @typedef {object} PreflightOptions\n * @property {string} [region='gll'] - Preferred signaling region; By default, you will be connected to the\n *   nearest signaling server determined by latency based routing. Setting a value other\n *   than <code style=\"padding:0 0\">gll</code> bypasses routing and guarantees that signaling traffic will be\n *   terminated in the region that you prefer. Please refer to this <a href=\"https://www.twilio.com/docs/video/ip-address-whitelisting#signaling-communication\" target=\"_blank\">table</a>\n *   for the list of supported signaling regions.\n * @property {number} [duration=10000] - number of milliseconds to run test for.\n *   once connected test will run for this duration before generating the stats report.\n */\n/**\n * Preflight test has completed successfully.\n * @param {PreflightTestReport} report - Results of the test.\n * @event PreflightTest#completed\n */\n/**\n * Preflight test has encountered a failure and is now stopped.\n * @param {TwilioError|Error} error - A TwilioError or a DOMException.\n * Possible TwilioErrors include Signaling and Media related errors which can be found\n * <a href=\"https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices#connection-errors\" target=\"_blank\">here</a>.\n * @param {PreflightTestReport} report - Partial results gathered during the test. Use this information to help determine the cause of failure.\n * @event PreflightTest#failed\n */\n/**\n * Emitted to indicate progress of the test\n * @param {PreflightProgress} progress - Indicates the status completed.\n * @event PreflightTest#progress\n */\n/**\n * @method\n * @name runPreflight\n * @description Run a preflight test. This method will start a test to check the quality of network connection.\n * @memberof module:twilio-video\n * @param {string} token - The Access Token string\n * @param {PreflightOptions} options - Options for the test\n * @returns {PreflightTest} preflightTest - An instance to be used to monitor progress of the test.\n * @example\n * var { runPreflight } = require('twilio-video');\n * var preflight = runPreflight(token, preflightOptions);\n * preflightTest.on('progress', progress => {\n *   console.log('preflight progress:', progress);\n * });\n *\n * preflightTest.on('failed', (error, report) => {\n *   console.error('preflight error:', error, report);\n * });\n *\n * preflightTest.on('completed', report => {\n *   console.log('preflight completed:', report));\n * });\n*/\nfunction runPreflight(token, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var preflight = new PreflightTest(token, options);\n  return preflight;\n}\nexports.runPreflight = runPreflight;","map":{"version":3,"names":["constants_1","require","timer_1","mos_1","getCombinedConnectionStats_1","getturncredentials_1","makestat_1","syntheticaudio_1","syntheticvideo_1","index_1","WS_SERVER","Log","EventEmitter","MovingAverageDelta","EventObserver","InsightsPublisher","_a","createSID","sessionSID","_b","SignalingConnectionTimeoutError","MediaConnectionError","SECOND","DEFAULT_TEST_DURATION","PreflightProgress","mediaAcquired","connected","mediaSubscribed","mediaStarted","dtlsConnected","peerConnectionConnected","iceConnected","notEmpty","value","nInstances","PreflightTest","_super","__extends","token","options","_this","call","_testTiming","Timer","_dtlsTiming","_iceTiming","_peerConnectionTiming","_mediaTiming","_connectTiming","_sentBytesMovingAverage","_packetLossMovingAverage","_progressEvents","_receivedBytesMovingAverage","internalOptions","environment","region","_c","duration","wsServer","_log","DEFAULT_LOG_LEVEL","DEFAULT_LOGGER_NAME","_testDuration","_instanceId","start","_runPreflightTest","prototype","toString","stop","_stopped","_generatePreflightReport","collectedStats","testTiming","getTimeMeasurement","networkTiming","dtls","ice","peerConnection","connect","media","stats","jitter","makeStat","rtt","packetLoss","selectedIceCandidatePairStats","iceCandidateStats","progressEvents","mos","_executePreflightStep","stepName","step","timeoutError","debug","MAX_STEP_DURATION","Error","stepPromise","Promise","resolve","then","timer","timeoutPromise","_resolve","reject","setTimeout","race","result","sent","clearTimeout","_collectNetworkTimings","pc","dtlsTransport","addEventListener","iceConnectionState","_updateProgress","state","connectionState","senders","getSenders","transport","map","sender","find","_setupInsights","DEFAULT_ENVIRONMENT","realm","DEFAULT_REALM","eventPublisherOptions","eventPublisher","SDK_NAME","SDK_VERSION","eventObserver","Date","now","undefinedValue","undefined","reportToInsights","report","jitterStats","rttStats","packetLossStats","mosStats","candidateTypeToProtocols","Map","forEach","candidateStats","candidateType","protocol","protocols","get","indexOf","push","set","JSON","stringify","Object","fromEntries","insightsReport","name","group","level","error","payload","preflightSID","dtlsTiming","iceTiming","peerConnectionTiming","connectTiming","mediaTiming","selectedLocalCandidate","localCandidate","selectedRemoteCandidate","remoteCandidate","emit","disconnect","localTracks","pcs","elements_1","syntheticAudio","syntheticVideo","width","height","getTurnCredentials","iceServers","senderPC_1","RTCPeerConnection","iceTransportPolicy","bundlePolicy","receiverPC_1","__awaiter","event","candidate","addIceCandidate","track","addTrack","remoteTracksPromise","remoteTracks","length","createOffer","offer","updatedOffer","setLocalDescription","setRemoteDescription","createAnswer","answer","remoteTracks_1","warn","kind","element","document","createElement","autoplay","playsInline","muted","srcObject","MediaStream","oncanplay","_collectRTCStatsForDuration","initCollectedStats","collectedStats_1","preflightReport","__assign","error_1","close","_collectRTCStats","senderPC","receiverPC","getCombinedConnectionStats","publisher","subscriber","combinedStats","timestamp","bytesSent","bytesReceived","packets","packetsLost","roundTripTime","hasLastData","putSample","outgoingBitrate","incomingBitrate","fractionPacketLost","percentPacketsLost","Math","min","score","calculateMOS","startTime","STAT_INTERVAL","waitForSometime","remainingDuration","exports","runPreflight","preflight"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/preflight/preflighttest.ts"],"sourcesContent":["import { DEFAULT_ENVIRONMENT, DEFAULT_LOGGER_NAME, DEFAULT_LOG_LEVEL, DEFAULT_REALM, SDK_NAME, SDK_VERSION } from '../util/constants';\nimport { PreflightOptions, PreflightTestReport, ProgressEvent, RTCIceCandidateStats, SelectedIceCandidatePairStats, Stats } from '../../tsdef/PreflightTypes';\nimport { StatsReport } from '../../tsdef/types';\nimport { Timer } from './timer';\nimport { TwilioError } from '../../tsdef/TwilioError';\nimport { calculateMOS } from './mos';\nimport { getCombinedConnectionStats } from './getCombinedConnectionStats';\nimport { getTurnCredentials } from './getturncredentials';\nimport { makeStat } from './makestat';\nimport { syntheticAudio } from './syntheticaudio';\nimport { syntheticVideo } from './syntheticvideo';\nimport { waitForSometime } from '../util/index';\n\nconst { WS_SERVER } = require('../util/constants');\nconst Log = require('../util/log');\nconst EventEmitter = require('../eventemitter');\nconst MovingAverageDelta = require('../util/movingaveragedelta');\nconst EventObserver = require('../util/eventobserver');\nconst InsightsPublisher = require('../util/insightspublisher');\nconst { createSID, sessionSID } = require('../util/sid');\nconst {\n  SignalingConnectionTimeoutError,\n  MediaConnectionError\n} = require('../util/twilio-video-errors');\n\nconst SECOND = 1000;\nconst DEFAULT_TEST_DURATION = 10 * SECOND;\n\n/**\n * progress values that are sent by {@link PreflightTest#event:progress}\n * @enum {string}\n */\nconst PreflightProgress = {\n  /**\n   * {@link PreflightTest} has successfully generated synthetic tracks\n   */\n  mediaAcquired: 'mediaAcquired',\n\n  /**\n   * {@link PreflightTest} has successfully connected to twilio server and obtained turn credentials\n   */\n  connected: 'connected',\n\n  /**\n   * SubscriberParticipant successfully subscribed to media tracks.\n   */\n  mediaSubscribed: 'mediaSubscribed',\n\n  /**\n   * Media flow was detected.\n   */\n  mediaStarted: 'mediaStarted',\n\n  /**\n   * Established DTLS connection. This is measured from RTCDtlsTransport `connecting` to `connected` state.\n   * On Safari, Support for measuring this is missing, this event will be not be emitted on Safari.\n   */\n  dtlsConnected: 'dtlsConnected',\n\n  /**\n   * Established a PeerConnection, This is measured from PeerConnection `connecting` to `connected` state.\n   * On Firefox, Support for measuring this is missing, this event will be not be emitted on Firefox.\n   */\n  peerConnectionConnected: 'peerConnectionConnected',\n\n  /**\n   * Established ICE connection. This is measured from ICE connection `checking` to `connected` state.\n   */\n  iceConnected: 'iceConnected'\n};\n\ndeclare interface PreflightStats {\n  jitter: number[],\n  rtt: number[],\n  outgoingBitrate: number[],\n  incomingBitrate: number[],\n  packetLoss: number[], // fraction of packets lost.\n  mos: number[],\n  selectedIceCandidatePairStats: SelectedIceCandidatePairStats | null,\n  iceCandidateStats: RTCIceCandidateStats[],\n}\n\ndeclare interface PreflightTestReportInternal extends PreflightTestReport {\n  error?: string,\n  mos?: Stats|null\n}\n\ndeclare interface PreflightOptionsInternal extends PreflightOptions {\n  environment?: string;\n  wsServer?: string;\n}\n\nfunction notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && typeof value !== 'undefined';\n}\n\nlet nInstances = 0;\n\n/**\n * A {@link PreflightTest} monitors progress of an ongoing preflight test.\n * <br><br>\n * Instance of {@link PreflightTest} is returned by calling {@link module:twilio-video.runPreflight}\n * @extends EventEmitter\n * @emits PreflightTest#completed\n * @emits PreflightTest#failed\n * @emits PreflightTest#progress\n */\nexport class PreflightTest extends EventEmitter {\n\n  private _testTiming = new Timer();\n  private _dtlsTiming = new Timer();\n  private _iceTiming = new Timer();\n  private _peerConnectionTiming = new Timer();\n  private _mediaTiming = new Timer();\n  private _connectTiming = new Timer();\n  private _sentBytesMovingAverage = new MovingAverageDelta();\n  private _packetLossMovingAverage = new MovingAverageDelta();\n  private _progressEvents: ProgressEvent[] = [];\n  private _receivedBytesMovingAverage = new MovingAverageDelta();\n  private _log: typeof Log;\n  private _testDuration: number;\n  private _instanceId: number;\n\n  /**\n   * Constructs {@link PreflightTest}.\n   * @param {string} token\n   * @param {?PreflightOptions} [options]\n   */\n  constructor(token: string, options: PreflightOptions) {\n    super();\n    const internalOptions = options as PreflightOptionsInternal;\n    const { environment = 'prod', region = 'gll', duration = DEFAULT_TEST_DURATION } = internalOptions;\n    // eslint-disable-next-line new-cap\n    const wsServer = internalOptions.wsServer || WS_SERVER(environment, region);\n\n    this._log = new Log('default', this, DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME);\n    this._testDuration = duration;\n    this._instanceId = nInstances++;\n    this._testTiming.start();\n    this._runPreflightTest(token, environment, wsServer);\n  }\n\n  toString(): string {\n    return `[Preflight #${this._instanceId}]`;\n  }\n\n  /**\n   * stops ongoing tests and emits error\n   */\n  stop():void {\n    this._stopped = true;\n  }\n\n  private _generatePreflightReport(collectedStats?: PreflightStats) : PreflightTestReportInternal  {\n    this._testTiming.stop();\n    return {\n      testTiming: this._testTiming.getTimeMeasurement(),\n      networkTiming: {\n        dtls: this._dtlsTiming.getTimeMeasurement(),\n        ice: this._iceTiming.getTimeMeasurement(),\n        peerConnection: this._peerConnectionTiming.getTimeMeasurement(),\n        connect: this._connectTiming.getTimeMeasurement(),\n        media: this._mediaTiming.getTimeMeasurement()\n      },\n      stats: {\n        jitter: makeStat(collectedStats?.jitter),\n        rtt: makeStat(collectedStats?.rtt),\n        packetLoss: makeStat(collectedStats?.packetLoss),\n      },\n      selectedIceCandidatePairStats: collectedStats ? collectedStats.selectedIceCandidatePairStats : null,\n      iceCandidateStats: collectedStats ? collectedStats.iceCandidateStats : [],\n      progressEvents: this._progressEvents,\n      // NOTE(mpatwardhan): internal properties.\n      mos: makeStat(collectedStats?.mos),\n    };\n  }\n\n  private async _executePreflightStep<T>(stepName: string, step: () => T|Promise<T>, timeoutError?: TwilioError|Error) : Promise<T> {\n    this._log.debug('Executing step: ', stepName);\n    const MAX_STEP_DURATION = this._testDuration + 10 * SECOND;\n    if (this._stopped) {\n      throw new Error('stopped');\n    }\n\n    const stepPromise = Promise.resolve().then(step);\n    let timer: number | null = null;\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      timer = setTimeout(() => {\n        reject(timeoutError || new Error(`${stepName} timeout.`));\n      }, MAX_STEP_DURATION) as unknown as number;\n    });\n    try {\n      const result = await Promise.race([timeoutPromise, stepPromise]);\n      return result as T;\n    } finally {\n      if (timer !== null) {\n        clearTimeout(timer);\n      }\n    }\n  }\n\n  private _collectNetworkTimings(pc: RTCPeerConnection): Promise<void> {\n    return new Promise(resolve => {\n      let dtlsTransport: RTCDtlsTransport;\n\n      pc.addEventListener('iceconnectionstatechange', () => {\n        if (pc.iceConnectionState === 'checking') {\n          this._iceTiming.start();\n        }\n        if (pc.iceConnectionState === 'connected') {\n          this._iceTiming.stop();\n          this._updateProgress(PreflightProgress.iceConnected);\n          if (!dtlsTransport || dtlsTransport && dtlsTransport.state === 'connected') {\n            resolve();\n          }\n        }\n      });\n\n      // firefox does not support connectionstatechange.\n      pc.addEventListener('connectionstatechange', () => {\n        if (pc.connectionState === 'connecting') {\n          this._peerConnectionTiming.start();\n        }\n        if (pc.connectionState === 'connected') {\n          this._peerConnectionTiming.stop();\n          this._updateProgress(PreflightProgress.peerConnectionConnected);\n        }\n      });\n\n      // Safari does not expose sender.transport.\n      let senders = pc.getSenders();\n      let transport = senders.map(sender => sender.transport).find(notEmpty);\n      if (typeof transport !== 'undefined') {\n        dtlsTransport = transport as RTCDtlsTransport;\n        dtlsTransport.addEventListener('statechange', () => {\n          if (dtlsTransport.state === 'connecting') {\n            this._dtlsTiming.start();\n          }\n          if (dtlsTransport.state === 'connected') {\n            this._dtlsTiming.stop();\n            this._updateProgress(PreflightProgress.dtlsConnected);\n            if (pc.iceConnectionState === 'connected') {\n              resolve();\n            }\n          }\n        });\n      }\n    });\n  }\n\n  private _setupInsights({ token, environment = DEFAULT_ENVIRONMENT, realm = DEFAULT_REALM } : {\n    token: string,\n    environment?: string,\n    realm?: string\n  }) {\n    const eventPublisherOptions = {};\n    const eventPublisher = new InsightsPublisher(\n      token,\n      SDK_NAME,\n      SDK_VERSION,\n      environment,\n      realm,\n      eventPublisherOptions);\n\n    // event publisher requires room sid/participant sid. supply fake ones.\n    eventPublisher.connect('PREFLIGHT_ROOM_SID', 'PREFLIGHT_PARTICIPANT');\n    const eventObserver = new EventObserver(eventPublisher, Date.now(), this._log);\n\n    // eslint-disable-next-line no-undefined\n    const undefinedValue = undefined;\n    return {\n      reportToInsights: ({ report }: { report: PreflightTestReportInternal }) => {\n        const jitterStats = report.stats.jitter || undefinedValue;\n        const rttStats = report.stats.rtt || undefinedValue;\n        const packetLossStats = report.stats.packetLoss || undefinedValue;\n        const mosStats  = report.mos || undefinedValue;\n\n        // stringify important info from ice candidates.\n        const candidateTypeToProtocols = new Map<string, string[]>();\n        report.iceCandidateStats.forEach(candidateStats => {\n          if (candidateStats.candidateType && candidateStats.protocol) {\n            let protocols = candidateTypeToProtocols.get(candidateStats.candidateType) || [];\n            if (protocols.indexOf(candidateStats.protocol) < 0) {\n              protocols.push(candidateStats.protocol);\n            }\n            candidateTypeToProtocols.set(candidateStats.candidateType, protocols);\n          }\n        });\n        const iceCandidateStats = JSON.stringify(Object.fromEntries(candidateTypeToProtocols));\n\n        const insightsReport  = {\n          name: 'report',\n          group: 'preflight',\n          level: report.error ? 'error' : 'info',\n          payload: {\n            sessionSID,\n            preflightSID: createSID('PF'),\n            progressEvents: JSON.stringify(report.progressEvents),\n            testTiming: report.testTiming,\n            dtlsTiming: report.networkTiming.dtls,\n            iceTiming: report.networkTiming.ice,\n            peerConnectionTiming: report.networkTiming.peerConnection,\n            connectTiming: report.networkTiming.connect,\n            mediaTiming: report.networkTiming.media,\n            selectedLocalCandidate: report.selectedIceCandidatePairStats?.localCandidate,\n            selectedRemoteCandidate: report.selectedIceCandidatePairStats?.remoteCandidate,\n            iceCandidateStats,\n            jitterStats,\n            rttStats,\n            packetLossStats,\n            mosStats,\n            error: report.error\n          }\n        };\n        eventObserver.emit('event', insightsReport);\n        setTimeout(() => eventPublisher.disconnect(), 2000);\n      }\n    };\n  }\n\n  private async _runPreflightTest(token: string, environment: string, wsServer: string) {\n    let localTracks: MediaStreamTrack[] = [];\n    let pcs: RTCPeerConnection[] = [];\n    const { reportToInsights } = this._setupInsights({ token, environment });\n    try {\n      let elements = [];\n      localTracks = await this._executePreflightStep('Acquire media', () => [syntheticAudio(), syntheticVideo({ width: 640, height: 480 })]);\n\n      this._updateProgress(PreflightProgress.mediaAcquired);\n      this.emit('debug', { localTracks });\n\n      this._connectTiming.start();\n      let iceServers = await this._executePreflightStep('Get turn credentials', () => getTurnCredentials(token, wsServer), new SignalingConnectionTimeoutError());\n\n      this._connectTiming.stop();\n      this._updateProgress(PreflightProgress.connected);\n\n      const senderPC: RTCPeerConnection = new RTCPeerConnection({ iceServers, iceTransportPolicy: 'relay', bundlePolicy: 'max-bundle' });\n      const receiverPC: RTCPeerConnection = new RTCPeerConnection({ iceServers, bundlePolicy: 'max-bundle' });\n      pcs.push(senderPC);\n      pcs.push(receiverPC);\n\n      this._mediaTiming.start();\n      const remoteTracks = await this._executePreflightStep('Setup Peer Connections', async () => {\n        senderPC.addEventListener('icecandidate', (event: RTCPeerConnectionIceEvent) => event.candidate && receiverPC.addIceCandidate(event.candidate));\n        receiverPC.addEventListener('icecandidate', (event: RTCPeerConnectionIceEvent) => event.candidate && senderPC.addIceCandidate(event.candidate));\n\n        localTracks.forEach(track => senderPC.addTrack(track));\n\n        const remoteTracksPromise: Promise<MediaStreamTrack[]> = new Promise(resolve => {\n          let remoteTracks: MediaStreamTrack[] = [];\n          receiverPC.addEventListener('track', event => {\n            remoteTracks.push(event.track);\n            if (remoteTracks.length === localTracks.length) {\n              resolve(remoteTracks);\n            }\n          });\n        });\n\n        const offer = await senderPC.createOffer();\n        const updatedOffer = offer;\n        await senderPC.setLocalDescription(updatedOffer);\n        await receiverPC.setRemoteDescription(updatedOffer);\n\n        const answer = await receiverPC.createAnswer();\n        await receiverPC.setLocalDescription(answer);\n        await senderPC.setRemoteDescription(answer);\n        await this._collectNetworkTimings(senderPC);\n\n        return remoteTracksPromise;\n      }, new MediaConnectionError());\n      this.emit('debug', { remoteTracks });\n      remoteTracks.forEach(track => {\n        track.addEventListener('ended', () => this._log.warn(track.kind + ':ended'));\n        track.addEventListener('mute', () => this._log.warn(track.kind + ':muted'));\n        track.addEventListener('unmute', () => this._log.warn(track.kind + ':unmuted'));\n      });\n      this._updateProgress(PreflightProgress.mediaSubscribed);\n\n      await this._executePreflightStep('Wait for tracks to start', () => {\n        return new Promise(resolve => {\n          const element = document.createElement('video');\n          element.autoplay = true;\n          element.playsInline = true;\n          element.muted = true;\n          element.srcObject = new MediaStream(remoteTracks);\n          elements.push(element);\n          this.emit('debugElement', element);\n          element.oncanplay = resolve;\n        });\n      }, new MediaConnectionError());\n      this._mediaTiming.stop();\n      this._updateProgress(PreflightProgress.mediaStarted);\n\n      const collectedStats = await this._executePreflightStep('Collect stats for duration',\n        () => this._collectRTCStatsForDuration(this._testDuration, initCollectedStats(), senderPC, receiverPC));\n\n      const report = await this._executePreflightStep('Generate report', () => this._generatePreflightReport(collectedStats));\n      reportToInsights({ report });\n      this.emit('completed', report);\n\n    } catch (error) {\n      const preflightReport = this._generatePreflightReport();\n      reportToInsights({ report: { ...preflightReport, error: error?.toString() } });\n      this.emit('failed', error, preflightReport);\n    } finally {\n      pcs.forEach(pc => pc.close());\n      localTracks.forEach(track => track.stop());\n    }\n  }\n\n  private async _collectRTCStats(collectedStats: PreflightStats, senderPC: RTCPeerConnection, receiverPC: RTCPeerConnection) {\n    const combinedStats = await getCombinedConnectionStats({ publisher: senderPC, subscriber: receiverPC });\n    const { timestamp, bytesSent, bytesReceived, packets, packetsLost, roundTripTime, jitter, selectedIceCandidatePairStats, iceCandidateStats } = combinedStats;\n    const hasLastData = collectedStats.jitter.length > 0;\n    collectedStats.jitter.push(jitter);\n    collectedStats.rtt.push(roundTripTime);\n\n    this._sentBytesMovingAverage.putSample(bytesSent, timestamp);\n    this._receivedBytesMovingAverage.putSample(bytesReceived, timestamp);\n    this._packetLossMovingAverage.putSample(packetsLost, packets);\n    if (hasLastData) {\n      // convert BytesMovingAverage which is in bytes/millisecond to bits/second\n      collectedStats.outgoingBitrate.push(this._sentBytesMovingAverage.get() * 1000 * 8);\n      collectedStats.incomingBitrate.push(this._receivedBytesMovingAverage.get() * 1000 * 8);\n      const fractionPacketLost = this._packetLossMovingAverage.get();\n      const percentPacketsLost = Math.min(100, fractionPacketLost * 100);\n\n      collectedStats.packetLoss.push(percentPacketsLost);\n\n      const score = calculateMOS(roundTripTime, jitter, fractionPacketLost);\n      collectedStats.mos.push(score);\n    }\n\n    if (!collectedStats.selectedIceCandidatePairStats) {\n      collectedStats.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n    }\n\n    if (collectedStats.iceCandidateStats.length === 0) {\n      collectedStats.iceCandidateStats = iceCandidateStats;\n    }\n  }\n\n  private async _collectRTCStatsForDuration(duration: number, collectedStats: PreflightStats, senderPC: RTCPeerConnection, receiverPC: RTCPeerConnection) : Promise<PreflightStats> {\n    const startTime = Date.now();\n    const STAT_INTERVAL = Math.min(1000, duration);\n\n    await waitForSometime(STAT_INTERVAL);\n\n    await this._collectRTCStats(collectedStats, senderPC, receiverPC);\n\n    const remainingDuration = duration - (Date.now() - startTime);\n\n    if (remainingDuration > 0) {\n      collectedStats = await this._collectRTCStatsForDuration(remainingDuration, collectedStats, senderPC, receiverPC);\n    }\n    return collectedStats;\n  }\n\n  private _updateProgress(name: string): void {\n    const duration = Date.now() - this._testTiming.getTimeMeasurement().start;\n    this._progressEvents.push({ duration, name });\n    this.emit('progress', name);\n  }\n}\n\n\nexport interface InternalStatsReport extends StatsReport {\n  activeIceCandidatePair: {\n    timestamp: number;\n    bytesSent: number;\n    bytesReceived: number;\n    currentRoundTripTime?: number;\n    localCandidate: RTCIceCandidateStats;\n    remoteCandidate: RTCIceCandidateStats;\n  }\n}\n\nfunction initCollectedStats() : PreflightStats {\n  return {\n    mos: [],\n    jitter: [],\n    rtt: [],\n    outgoingBitrate: [],\n    incomingBitrate: [],\n    packetLoss: [],\n    selectedIceCandidatePairStats: null,\n    iceCandidateStats: [],\n  };\n}\n\n/**\n * Represents network timing measurements captured during preflight test\n * @typedef {object} NetworkTiming\n * @property {TimeMeasurement} [connect] - Time to establish signaling connection and acquire turn credentials\n * @property {TimeMeasurement} [media] - Time to start media. This is measured from calling connect to remote media getting started.\n * @property {TimeMeasurement} [dtls] - Time to establish dtls connection. This is measured from RTCDtlsTransport `connecting` to `connected` state. (Not available on Safari)\n * @property {TimeMeasurement} [ice] - Time to establish ice connectivity. This is measured from ICE connection `checking` to `connected` state.\n * @property {TimeMeasurement} [peerConnection] - Time to establish peer connectivity. This is measured from PeerConnection `connecting` to `connected` state. (Not available on Firefox)\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} Stats\n * @property  {number} [average] - Average value observed.\n * @property  {number} [max] - Max value observed.\n * @property  {number} [min] - Min value observed.\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} SelectedIceCandidatePairStats\n * @property  {RTCIceCandidateStats} [localCandidate] - Selected local ice candidate\n * @property  {RTCIceCandidateStats} [remoteCandidate] - Selected local ice candidate\n */\n\n/**\n * Represents RTC related stats that were observed during preflight test\n * @typedef {object} PreflightReportStats\n * @property {Stats} [jitter] - Packet delay variation in seconds\n * @property {Stats} [rtt] - Round trip time, to the server back to the client in milliseconds.\n * @property {Stats} [packetLoss] - Packet loss as a percent of total packets sent.\n*/\n\n/**\n * A {@link PreflightProgress} event with timing information.\n * @typedef {object} ProgressEvent\n * @property {number} [duration] - The duration of the event, measured from the start of the test.\n * @property {string} [name] - The {@link PreflightProgress} event name.\n */\n\n/**\n * Represents report generated by {@link PreflightTest}.\n * @typedef {object} PreflightTestReport\n * @property {TimeMeasurement} [testTiming] - Time measurements of test run time.\n * @property {NetworkTiming} [networkTiming] - Network related time measurements.\n * @property {PreflightReportStats} [stats] - RTC related stats captured during the test.\n * @property {Array<RTCIceCandidateStats>} [iceCandidateStats] - List of gathered ice candidates.\n * @property {SelectedIceCandidatePairStats} selectedIceCandidatePairStats - Stats for the ice candidates that were used for the connection.\n * @property {Array<ProgressEvent>} [progressEvents] - {@link ProgressEvent} events detected during the test.\n * Use this information to determine which steps were completed and which ones were not.\n */\n\n/**\n * You may pass these options to {@link module:twilio-video.testPreflight} in order to override the\n * default behavior.\n * @typedef {object} PreflightOptions\n * @property {string} [region='gll'] - Preferred signaling region; By default, you will be connected to the\n *   nearest signaling server determined by latency based routing. Setting a value other\n *   than <code style=\"padding:0 0\">gll</code> bypasses routing and guarantees that signaling traffic will be\n *   terminated in the region that you prefer. Please refer to this <a href=\"https://www.twilio.com/docs/video/ip-address-whitelisting#signaling-communication\" target=\"_blank\">table</a>\n *   for the list of supported signaling regions.\n * @property {number} [duration=10000] - number of milliseconds to run test for.\n *   once connected test will run for this duration before generating the stats report.\n */\n\n/**\n * Preflight test has completed successfully.\n * @param {PreflightTestReport} report - Results of the test.\n * @event PreflightTest#completed\n */\n\n/**\n * Preflight test has encountered a failure and is now stopped.\n * @param {TwilioError|Error} error - A TwilioError or a DOMException.\n * Possible TwilioErrors include Signaling and Media related errors which can be found\n * <a href=\"https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices#connection-errors\" target=\"_blank\">here</a>.\n * @param {PreflightTestReport} report - Partial results gathered during the test. Use this information to help determine the cause of failure.\n * @event PreflightTest#failed\n */\n\n/**\n * Emitted to indicate progress of the test\n * @param {PreflightProgress} progress - Indicates the status completed.\n * @event PreflightTest#progress\n */\n\n/**\n * @method\n * @name runPreflight\n * @description Run a preflight test. This method will start a test to check the quality of network connection.\n * @memberof module:twilio-video\n * @param {string} token - The Access Token string\n * @param {PreflightOptions} options - Options for the test\n * @returns {PreflightTest} preflightTest - An instance to be used to monitor progress of the test.\n * @example\n * var { runPreflight } = require('twilio-video');\n * var preflight = runPreflight(token, preflightOptions);\n * preflightTest.on('progress', progress => {\n *   console.log('preflight progress:', progress);\n * });\n *\n * preflightTest.on('failed', (error, report) => {\n *   console.error('preflight error:', error, report);\n * });\n *\n * preflightTest.on('completed', report => {\n *   console.log('preflight completed:', report));\n * });\n*/\nexport function runPreflight(token: string, options: PreflightOptions = {}): PreflightTest {\n  const preflight = new PreflightTest(token, options);\n  return preflight;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}