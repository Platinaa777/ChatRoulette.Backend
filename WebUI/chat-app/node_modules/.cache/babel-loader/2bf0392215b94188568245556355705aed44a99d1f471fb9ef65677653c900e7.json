{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar StateMachine = require('./statemachine');\nvar _a = require('./util'),\n  buildLogLevels = _a.buildLogLevels,\n  makeUUID = _a.makeUUID;\nvar Log = require('./util/log');\nvar NetworkMonitor = require('./util/networkmonitor');\nvar Timeout = require('./util/timeout');\nvar nInstances = 0;\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\nvar states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\nvar events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\nvar TCMP_VERSION = 2;\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_OPEN_TIMEOUT = 15000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar OUTGOING_HEARTBEAT_OFFSET = 200;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\nvar WS_CLOSE_NETWORK_CHANGED = 3004;\nvar WS_CLOSE_BUSY_WAIT = 3005;\nvar WS_CLOSE_SERVER_BUSY = 3006;\nvar WS_CLOSE_OPEN_TIMEOUT = 3007;\n// NOTE(joma): If you want to use close code 3008, please increment\n// the close code in test/integration/spec/docker/reconnection.js\n// line number 492.\nvar toplevel = globalThis;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\nvar wsCloseCodesToCloseReasons = new Map([[WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT], [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT], [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED], [WS_CLOSE_SEND_FAILED, CloseReason.FAILED], [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT], [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY], [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]]);\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\nvar TwilioConnection = /** @class */function (_super) {\n  __extends(TwilioConnection, _super);\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n  function TwilioConnection(serverUrl, options) {\n    var _this = _super.call(this, 'early', states) || this;\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log: Log,\n      WebSocket: WebSocket\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', _this, logLevels, options.loggerName);\n    var networkMonitor = options.networkMonitor ? new NetworkMonitor(function () {\n      var type = networkMonitor.type;\n      var reason = \"Network changed\" + (type ? \" to \" + type : '');\n      log.debug(reason);\n      _this._close({\n        code: WS_CLOSE_NETWORK_CHANGED,\n        reason: reason\n      });\n    }) : null;\n    Object.defineProperties(_this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n    var eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n    _this.on('stateChanged', function (state) {\n      var args = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n      if (state in events) {\n        _this.emit.apply(_this, __spreadArray([events[state]], __read(args)));\n      }\n      var event = {\n        name: state,\n        group: 'signaling',\n        level: eventsToLevels[_this.state]\n      };\n      if (state === 'closed') {\n        var _a = __read(args, 1),\n          reason = _a[0];\n        event.payload = {\n          reason: reason\n        };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n      _this._eventObserver.emit('event', event);\n    });\n    _this._eventObserver.emit('event', {\n      name: _this.state,\n      group: 'signaling',\n      level: eventsToLevels[_this.state]\n    });\n    _this._connect();\n    return _this;\n  }\n  TwilioConnection.prototype.toString = function () {\n    return \"[TwilioConnection #\" + this._instanceId + \": \" + this._ws.url + \"]\";\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @param {{code: number, reason: string}} event\n   * @private\n   */\n  TwilioConnection.prototype._close = function (_a) {\n    var code = _a.code,\n      reason = _a.reason;\n    if (this.state === 'closed') {\n      return;\n    }\n    if (this._openTimeout) {\n      this._openTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    if (this._heartbeatTimeout) {\n      this._heartbeatTimeout.clear();\n    }\n    if (this._sendHeartbeatTimeout) {\n      this._sendHeartbeatTimeout.clear();\n    }\n    if (this._networkMonitor) {\n      this._networkMonitor.stop();\n    }\n    if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n      this._busyWaitTimeout.clear();\n    }\n    this._messageQueue.splice(0);\n    var log = this._log;\n    if (code === WS_CLOSE_NORMAL) {\n      log.debug('Closed');\n      this.transition('closed', null, [CloseReason.LOCAL]);\n    } else {\n      log.warn(\"Closed: \" + code + \" - \" + reason);\n      if (code !== WS_CLOSE_BUSY_WAIT) {\n        this.transition('closed', null, [wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE]);\n      }\n    }\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n    if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n      this._ws.close(code, reason);\n    }\n  };\n  /**\n   * Connect to the TCMP server.\n   * @private\n   */\n  TwilioConnection.prototype._connect = function () {\n    var _this = this;\n    var log = this._log;\n    if (this.state === 'waiting') {\n      this.transition('early');\n    } else if (this.state !== 'early') {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for connecting to the\" + ' TCMP server.');\n      return;\n    }\n    this._ws = new this._options.WebSocket(this._serverUrl);\n    var ws = this._ws;\n    log.debug('Created a new WebSocket:', ws);\n    ws.addEventListener('close', function (event) {\n      return _this._close(event);\n    });\n    var openTimeout = this._options.openTimeout;\n    // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n    this._openTimeout = new Timeout(function () {\n      var reason = \"Failed to open in \" + openTimeout + \" ms\";\n      _this._close({\n        code: WS_CLOSE_OPEN_TIMEOUT,\n        reason: reason\n      });\n    }, openTimeout);\n    ws.addEventListener('open', function () {\n      log.debug('WebSocket opened:', ws);\n      _this._openTimeout.clear();\n      _this._startHandshake();\n      if (_this._networkMonitor) {\n        _this._networkMonitor.start();\n      }\n    });\n    ws.addEventListener('message', function (message) {\n      log.debug(\"Incoming: \" + message.data);\n      try {\n        message = JSON.parse(message.data);\n      } catch (error) {\n        _this.emit('error', error);\n        return;\n      }\n      switch (message.type) {\n        case 'bad':\n          _this._handleBad(message);\n          break;\n        case 'busy':\n          _this._handleBusy(message);\n          break;\n        case 'bye':\n          // Do nothing.\n          break;\n        case 'msg':\n          _this._handleMessage(message);\n        // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n        // heartbeat intentionally falling through to 'heartbeat' case.\n        // eslint-disable-next-line no-fallthrough\n        case 'heartbeat':\n          _this._handleHeartbeat();\n          break;\n        case 'welcome':\n          _this._handleWelcome(message);\n          break;\n        default:\n          _this._log.debug(\"Unknown message type: \" + message.type);\n          _this.emit('error', new Error(\"Unknown message type: \" + message.type));\n          break;\n      }\n    });\n  };\n  /**\n   * Handle an incoming \"bad\" message.\n   * @param {{reason: string}} message\n   * @private\n   */\n  TwilioConnection.prototype._handleBad = function (_a) {\n    var reason = _a.reason;\n    var log = this._log;\n    if (!['connecting', 'open'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"bad\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n    if (this.state === 'connecting') {\n      log.warn(\"Closing: \" + WS_CLOSE_HELLO_FAILED + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_HELLO_FAILED,\n        reason: reason\n      });\n      return;\n    }\n    log.debug(\"Error: \" + reason);\n    this.emit('error', new Error(reason));\n  };\n  /**\n   * Handle an incoming \"busy\" message.\n   * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n   * @private\n   */\n  TwilioConnection.prototype._handleBusy = function (_a) {\n    var _this = this;\n    var cookie = _a.cookie,\n      keepAlive = _a.keepAlive,\n      retryAfter = _a.retryAfter;\n    var log = this._log;\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"busy\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n    if (this._busyWaitTimeout) {\n      this._busyWaitTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    var reason = retryAfter < 0 ? 'Received terminal \"busy\" message' : \"Received \\\"busy\\\" message, retrying after \" + retryAfter + \" ms\";\n    if (retryAfter < 0) {\n      log.warn(\"Closing: \" + WS_CLOSE_SERVER_BUSY + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_SERVER_BUSY,\n        reason: reason\n      });\n      return;\n    }\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    this._hellosLeft = maxConsecutiveFailedHellos;\n    this._cookie = cookie || null;\n    if (keepAlive) {\n      log.warn(reason);\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._startHandshake();\n      }, retryAfter);\n    } else {\n      log.warn(\"Closing: \" + WS_CLOSE_BUSY_WAIT + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_BUSY_WAIT,\n        reason: reason\n      });\n      this._busyWaitTimeout = new Timeout(function () {\n        return _this._connect();\n      }, retryAfter);\n    }\n    this.transition('waiting', null, [keepAlive, retryAfter]);\n  };\n  /**\n   * Handle an incoming \"heartbeat\" message.\n   * @private\n   */\n  TwilioConnection.prototype._handleHeartbeat = function () {\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"heartbeat\\\"\" + ' message from the TCMP server.');\n      return;\n    }\n    this._heartbeatTimeout.reset();\n  };\n  /**\n   * Handle a missed \"heartbeat\" message.\n   * @private\n   */\n  TwilioConnection.prototype._handleHeartbeatTimeout = function () {\n    if (this.state !== 'open') {\n      return;\n    }\n    var log = this._log;\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    log.debug(\"Consecutive heartbeats missed: \" + maxConsecutiveMissedHeartbeats);\n    var reason = \"Missed \" + maxConsecutiveMissedHeartbeats + \" \\\"heartbeat\\\" messages\";\n    log.warn(\"Closing: \" + WS_CLOSE_HEARTBEATS_MISSED + \" - \" + reason);\n    this._close({\n      code: WS_CLOSE_HEARTBEATS_MISSED,\n      reason: reason\n    });\n  };\n  /**\n   * Handle an incoming \"msg\" message.\n   * @param {{body: object}} message\n   * @private\n   */\n  TwilioConnection.prototype._handleMessage = function (_a) {\n    var body = _a.body;\n    if (this.state !== 'open') {\n      this._log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"msg\\\" message\" + ' from the TCMP server.');\n      return;\n    }\n    this.emit('message', body);\n  };\n  /**\n   * Handle an incoming \"welcome\" message.\n   * @param {{ negotiatedTimeout: number }} message\n   * @private\n   */\n  TwilioConnection.prototype._handleWelcome = function (_a) {\n    var _this = this;\n    var negotiatedTimeout = _a.negotiatedTimeout;\n    var log = this._log;\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(\"Unexpected state \\\"\" + this.state + \"\\\" for handling a \\\"welcome\\\"\" + ' message from the TCMP server.');\n      return;\n    }\n    if (this.state === 'waiting') {\n      log.debug('Received \"welcome\" message, no need to retry connection.');\n      this._busyWaitTimeout.clear();\n    }\n    var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n    var heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n    var outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n    this._welcomeTimeout.clear();\n    this._heartbeatTimeout = new Timeout(function () {\n      return _this._handleHeartbeatTimeout();\n    }, heartbeatTimeout);\n    this._messageQueue.splice(0).forEach(function (message) {\n      return _this._send(message);\n    });\n    this._sendHeartbeatTimeout = new Timeout(function () {\n      return _this._sendHeartbeat();\n    }, outgoingHeartbeatTimeout);\n    this.transition('open');\n  };\n  /**\n   * Handle a missed \"welcome\" message.\n   * @private\n   */\n  TwilioConnection.prototype._handleWelcomeTimeout = function () {\n    if (this.state !== 'connecting') {\n      return;\n    }\n    var log = this._log;\n    if (this._hellosLeft <= 0) {\n      var reason = 'All handshake attempts failed';\n      log.warn(\"Closing: \" + WS_CLOSE_WELCOME_TIMEOUT + \" - \" + reason);\n      this._close({\n        code: WS_CLOSE_WELCOME_TIMEOUT,\n        reason: reason\n      });\n      return;\n    }\n    var maxConsecutiveFailedHellos = this._options.maxConsecutiveFailedHellos;\n    log.warn(\"Handshake attempt \" + (maxConsecutiveFailedHellos - this._hellosLeft) + \" failed\");\n    this._startHandshake();\n  };\n  /**\n   * Send a message to the TCMP server.\n   * @param {*} message\n   * @private\n   */\n  TwilioConnection.prototype._send = function (message) {\n    var readyState = this._ws.readyState;\n    var WebSocket = this._options.WebSocket;\n    if (readyState === WebSocket.OPEN) {\n      var data = JSON.stringify(message);\n      this._log.debug(\"Outgoing: \" + data);\n      try {\n        this._ws.send(data);\n        if (this._sendHeartbeatTimeout) {\n          // Each outgoing message is to be treated as an outgoing heartbeat.\n          this._sendHeartbeatTimeout.reset();\n        }\n      } catch (error) {\n        var reason = 'Failed to send message';\n        this._log.warn(\"Closing: \" + WS_CLOSE_SEND_FAILED + \" - \" + reason);\n        this._close({\n          code: WS_CLOSE_SEND_FAILED,\n          reason: reason\n        });\n      }\n    }\n  };\n  /**\n   * Send a \"heartbeat\" message.\n   * @private\n   */\n  TwilioConnection.prototype._sendHeartbeat = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._send({\n      type: 'heartbeat'\n    });\n  };\n  /**\n   * Send a \"hello\" message.\n   * @private\n   */\n  TwilioConnection.prototype._sendHello = function () {\n    var _a = this._options,\n      helloBody = _a.helloBody,\n      timeout = _a.requestedHeartbeatTimeout;\n    var hello = {\n      id: makeUUID(),\n      timeout: timeout,\n      type: 'hello',\n      version: TCMP_VERSION\n    };\n    if (this._cookie) {\n      hello.cookie = this._cookie;\n    }\n    if (helloBody) {\n      hello.body = helloBody;\n    }\n    this._send(hello);\n  };\n  /**\n   * Send or enqueue a message.\n   * @param {*} message\n   * @private\n   */\n  TwilioConnection.prototype._sendOrEnqueue = function (message) {\n    var _this = this;\n    if (this.state === 'closed') {\n      return;\n    }\n    var sendOrEnqueue = this.state === 'open' ? function (message) {\n      return _this._send(message);\n    } : function (message) {\n      return _this._messageQueue.push(message);\n    };\n    sendOrEnqueue(message);\n  };\n  /**\n   * Start the TCMP handshake.\n   * @private\n   */\n  TwilioConnection.prototype._startHandshake = function () {\n    var _this = this;\n    if (['early', 'waiting'].includes(this.state)) {\n      this.transition('connecting');\n    }\n    if (this.state !== 'connecting') {\n      return;\n    }\n    this._hellosLeft--;\n    this._sendHello();\n    var welcomeTimeout = this._options.welcomeTimeout;\n    this._welcomeTimeout = new Timeout(function () {\n      return _this._handleWelcomeTimeout();\n    }, welcomeTimeout);\n  };\n  /**\n   * Close the {@link TwilioConnection}.\n   * @returns {void}\n   */\n  TwilioConnection.prototype.close = function () {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._sendOrEnqueue({\n      type: 'bye'\n    });\n    this._close({\n      code: WS_CLOSE_NORMAL,\n      reason: 'Normal'\n    });\n  };\n  /**\n   * Send a \"msg\" message.\n   * @param {*} body\n   * @returns {void}\n   */\n  TwilioConnection.prototype.sendMessage = function (body) {\n    this._sendOrEnqueue({\n      body: body,\n      type: 'msg'\n    });\n  };\n  return TwilioConnection;\n}(StateMachine);\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\nTwilioConnection.CloseReason = CloseReason;\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\nmodule.exports = TwilioConnection;","map":{"version":3,"names":["StateMachine","require","_a","buildLogLevels","makeUUID","Log","NetworkMonitor","Timeout","nInstances","states","closed","connecting","early","open","waiting","events","TCMP_VERSION","DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS","DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS","DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT","DEFAULT_OPEN_TIMEOUT","DEFAULT_WELCOME_TIMEOUT","OUTGOING_HEARTBEAT_OFFSET","WS_CLOSE_NORMAL","WS_CLOSE_WELCOME_TIMEOUT","WS_CLOSE_HEARTBEATS_MISSED","WS_CLOSE_HELLO_FAILED","WS_CLOSE_SEND_FAILED","WS_CLOSE_NETWORK_CHANGED","WS_CLOSE_BUSY_WAIT","WS_CLOSE_SERVER_BUSY","WS_CLOSE_OPEN_TIMEOUT","toplevel","globalThis","WebSocket","CloseReason","BUSY","FAILED","LOCAL","REMOTE","TIMEOUT","wsCloseCodesToCloseReasons","Map","TwilioConnection","_super","__extends","serverUrl","options","_this","call","Object","assign","helloBody","maxConsecutiveFailedHellos","maxConsecutiveMissedHeartbeats","requestedHeartbeatTimeout","openTimeout","welcomeTimeout","logLevels","logLevel","log","loggerName","networkMonitor","type","reason","debug","_close","code","defineProperties","_busyWaitTimeout","value","writable","_consecutiveHeartbeatsMissed","_cookie","_eventObserver","eventObserver","_heartbeatTimeout","_hellosLeft","_instanceId","_log","_messageQueue","_networkMonitor","_options","_openTimeout","_sendHeartbeatTimeout","_serverUrl","_welcomeTimeout","_ws","eventsToLevels","on","state","args","_i","arguments","length","emit","apply","__spreadArray","__read","event","name","group","level","payload","_connect","prototype","toString","url","clear","stop","splice","transition","warn","get","readyState","CLOSING","CLOSED","close","ws","addEventListener","_startHandshake","start","message","data","JSON","parse","error","_handleBad","_handleBusy","_handleMessage","_handleHeartbeat","_handleWelcome","Error","includes","cookie","keepAlive","retryAfter","reset","_handleHeartbeatTimeout","body","negotiatedTimeout","heartbeatTimeout","outgoingHeartbeatTimeout","forEach","_send","_sendHeartbeat","_handleWelcomeTimeout","OPEN","stringify","send","_sendHello","timeout","hello","id","version","_sendOrEnqueue","sendOrEnqueue","push","sendMessage","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/twilioconnection.js"],"sourcesContent":["'use strict';\n\nconst StateMachine = require('./statemachine');\nconst { buildLogLevels, makeUUID } = require('./util');\nconst Log = require('./util/log');\nconst NetworkMonitor = require('./util/networkmonitor');\nconst Timeout = require('./util/timeout');\n\nlet nInstances = 0;\n\n/*\n  TwilioConnection states\n  -----------------------\n\n       ------------------------------------------\n       |                                        |\n       |                                        v\n  +---------+       +--------------+       +----------+\n  |  early  | ----> |  connecting  | ----> |  closed  |\n  +---------+       +--------------+       +----------+\n    ^                     | ^ |                 ^ ^\n    | --------------------- | |                 | |\n    | | --------------------- |                 | |\n    | | | --------------------|------------------ |\n    | v | |                   v                   |\n  +----------+           +--------+               |\n  | waiting  | --------> |  open  | ---------------\n  +----------+           +--------+\n */\n\nconst states = {\n  closed: [],\n  connecting: ['closed', 'open', 'waiting'],\n  early: ['closed', 'connecting'],\n  open: ['closed'],\n  waiting: ['closed', 'connecting', 'early', 'open']\n};\n\nconst events = {\n  closed: 'close',\n  open: 'open',\n  waiting: 'waiting'\n};\n\nconst TCMP_VERSION = 2;\n\nconst DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nconst DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS = 3;\nconst DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nconst DEFAULT_OPEN_TIMEOUT = 15000;\nconst DEFAULT_WELCOME_TIMEOUT = 5000;\nconst OUTGOING_HEARTBEAT_OFFSET = 200;\n\nconst WS_CLOSE_NORMAL = 1000;\nconst WS_CLOSE_WELCOME_TIMEOUT = 3000;\nconst WS_CLOSE_HEARTBEATS_MISSED = 3001;\nconst WS_CLOSE_HELLO_FAILED = 3002;\nconst WS_CLOSE_SEND_FAILED = 3003;\nconst WS_CLOSE_NETWORK_CHANGED = 3004;\nconst WS_CLOSE_BUSY_WAIT = 3005;\nconst WS_CLOSE_SERVER_BUSY = 3006;\nconst WS_CLOSE_OPEN_TIMEOUT = 3007;\n\n// NOTE(joma): If you want to use close code 3008, please increment\n// the close code in test/integration/spec/docker/reconnection.js\n// line number 492.\n\nconst toplevel = globalThis;\nconst WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\nconst CloseReason = {\n  BUSY: 'busy',\n  FAILED: 'failed',\n  LOCAL: 'local',\n  REMOTE: 'remote',\n  TIMEOUT: 'timeout'\n};\n\nconst wsCloseCodesToCloseReasons = new Map([\n  [WS_CLOSE_WELCOME_TIMEOUT, CloseReason.TIMEOUT],\n  [WS_CLOSE_HEARTBEATS_MISSED, CloseReason.TIMEOUT],\n  [WS_CLOSE_HELLO_FAILED, CloseReason.FAILED],\n  [WS_CLOSE_SEND_FAILED, CloseReason.FAILED],\n  [WS_CLOSE_NETWORK_CHANGED, CloseReason.TIMEOUT],\n  [WS_CLOSE_SERVER_BUSY, CloseReason.BUSY],\n  [WS_CLOSE_OPEN_TIMEOUT, CloseReason.TIMEOUT]\n]);\n\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n * @fires TwilioConnection#waiting\n */\nclass TwilioConnection extends StateMachine {\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n  constructor(serverUrl, options) {\n    super('early', states);\n\n    options = Object.assign({\n      helloBody: null,\n      maxConsecutiveFailedHellos: DEFAULT_MAX_CONSECUTIVE_FAILED_HELLOS,\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      openTimeout: DEFAULT_OPEN_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log,\n      WebSocket\n    }, options);\n\n    const logLevels = buildLogLevels(options.logLevel);\n    const log = new options.Log('default', this, logLevels, options.loggerName);\n\n    const networkMonitor = options.networkMonitor ? new NetworkMonitor(() => {\n      const { type } = networkMonitor;\n      const reason = `Network changed${type ? ` to ${type}` : ''}`;\n      log.debug(reason);\n      this._close({ code: WS_CLOSE_NETWORK_CHANGED, reason });\n    }) : null;\n\n    Object.defineProperties(this, {\n      _busyWaitTimeout: {\n        value: null,\n        writable: true\n      },\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _cookie: {\n        value: null,\n        writable: true\n      },\n      _eventObserver: {\n        value: options.eventObserver\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _hellosLeft: {\n        value: options.maxConsecutiveFailedHellos,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _networkMonitor: {\n        value: networkMonitor\n      },\n      _options: {\n        value: options\n      },\n      _openTimeout: {\n        value: null,\n        writable: true\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _serverUrl: {\n        value: serverUrl\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n\n    const eventsToLevels = {\n      connecting: 'info',\n      early: 'info',\n      open: 'info',\n      waiting: 'warning',\n      closed: 'info'\n    };\n\n    this.on('stateChanged', (state, ...args) => {\n      if (state in events) {\n        this.emit(events[state], ...args);\n      }\n      const event = { name: state, group: 'signaling', level: eventsToLevels[this.state] };\n      if (state === 'closed') {\n        const [reason] = args;\n        event.payload = { reason };\n        event.level = reason === CloseReason.LOCAL ? 'info' : 'error';\n      }\n      this._eventObserver.emit('event', event);\n    });\n\n    this._eventObserver.emit('event', { name: this.state, group: 'signaling', level: eventsToLevels[this.state] });\n    this._connect();\n  }\n\n  toString() {\n    return `[TwilioConnection #${this._instanceId}: ${this._ws.url}]`;\n  }\n\n  /**\n   * Close the {@link TwilioConnection}.\n   * @param {{code: number, reason: string}} event\n   * @private\n   */\n  _close({ code, reason }) {\n    if (this.state === 'closed') {\n      return;\n    }\n    if (this._openTimeout) {\n      this._openTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    if (this._heartbeatTimeout) {\n      this._heartbeatTimeout.clear();\n    }\n    if (this._sendHeartbeatTimeout) {\n      this._sendHeartbeatTimeout.clear();\n    }\n    if (this._networkMonitor) {\n      this._networkMonitor.stop();\n    }\n    if (this._busyWaitTimeout && code !== WS_CLOSE_BUSY_WAIT) {\n      this._busyWaitTimeout.clear();\n    }\n    this._messageQueue.splice(0);\n    const log = this._log;\n\n    if (code === WS_CLOSE_NORMAL) {\n      log.debug('Closed');\n      this.transition('closed', null, [CloseReason.LOCAL]);\n    } else {\n      log.warn(`Closed: ${code} - ${reason}`);\n      if (code !== WS_CLOSE_BUSY_WAIT) {\n        this.transition('closed', null, [\n          wsCloseCodesToCloseReasons.get(code) || CloseReason.REMOTE\n        ]);\n      }\n    }\n    const { readyState } = this._ws;\n    const { WebSocket } = this._options;\n\n    if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  /**\n   * Connect to the TCMP server.\n   * @private\n   */\n  _connect() {\n    const log = this._log;\n    if (this.state === 'waiting') {\n      this.transition('early');\n    } else if (this.state !== 'early') {\n      log.warn(`Unexpected state \"${this.state}\" for connecting to the`\n        + ' TCMP server.');\n      return;\n    }\n    this._ws = new this._options.WebSocket(this._serverUrl);\n    const ws = this._ws;\n    log.debug('Created a new WebSocket:', ws);\n    ws.addEventListener('close', event => this._close(event));\n\n    const { openTimeout } = this._options;\n    // Add a timeout for getting the onopen event on the WebSocket (15 sec). After that, attempt to reconnect only if this is not the first attempt.\n    this._openTimeout = new Timeout(() => {\n      const reason = `Failed to open in ${openTimeout} ms`;\n      this._close({ code: WS_CLOSE_OPEN_TIMEOUT, reason });\n    }, openTimeout);\n\n    ws.addEventListener('open', () => {\n      log.debug('WebSocket opened:', ws);\n      this._openTimeout.clear();\n      this._startHandshake();\n      if (this._networkMonitor) {\n        this._networkMonitor.start();\n      }\n    });\n\n    ws.addEventListener('message', message => {\n      log.debug(`Incoming: ${message.data}`);\n      try {\n        message = JSON.parse(message.data);\n      } catch (error) {\n        this.emit('error', error);\n        return;\n      }\n\n      switch (message.type) {\n        case 'bad':\n          this._handleBad(message);\n          break;\n        case 'busy':\n          this._handleBusy(message);\n          break;\n        case 'bye':\n          // Do nothing.\n          break;\n        case 'msg':\n          this._handleMessage(message);\n          // NOTE(mpatwardhan): Each incoming message should be treated as an incoming\n          // heartbeat intentionally falling through to 'heartbeat' case.\n          // eslint-disable-next-line no-fallthrough\n        case 'heartbeat':\n          this._handleHeartbeat();\n          break;\n        case 'welcome':\n          this._handleWelcome(message);\n          break;\n        default:\n          this._log.debug(`Unknown message type: ${message.type}`);\n          this.emit('error', new Error(`Unknown message type: ${message.type}`));\n          break;\n      }\n    });\n  }\n\n  /**\n   * Handle an incoming \"bad\" message.\n   * @param {{reason: string}} message\n   * @private\n   */\n  _handleBad({ reason }) {\n    const log = this._log;\n    if (!['connecting', 'open'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"bad\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    if (this.state === 'connecting') {\n      log.warn(`Closing: ${WS_CLOSE_HELLO_FAILED} - ${reason}`);\n      this._close({ code: WS_CLOSE_HELLO_FAILED, reason });\n      return;\n    }\n    log.debug(`Error: ${reason}`);\n    this.emit('error', new Error(reason));\n  }\n\n  /**\n   * Handle an incoming \"busy\" message.\n   * @param {{cookie: ?string, keepAlive: boolean, retryAfter: number}} message\n   * @private\n   */\n  _handleBusy({ cookie, keepAlive, retryAfter }) {\n    const log = this._log;\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"busy\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    if (this._busyWaitTimeout) {\n      this._busyWaitTimeout.clear();\n    }\n    if (this._welcomeTimeout) {\n      this._welcomeTimeout.clear();\n    }\n    const reason = retryAfter < 0\n      ? 'Received terminal \"busy\" message'\n      : `Received \"busy\" message, retrying after ${retryAfter} ms`;\n\n    if (retryAfter < 0) {\n      log.warn(`Closing: ${WS_CLOSE_SERVER_BUSY} - ${reason}`);\n      this._close({ code: WS_CLOSE_SERVER_BUSY, reason });\n      return;\n    }\n    const { maxConsecutiveFailedHellos } = this._options;\n    this._hellosLeft = maxConsecutiveFailedHellos;\n    this._cookie = cookie || null;\n\n    if (keepAlive) {\n      log.warn(reason);\n      this._busyWaitTimeout = new Timeout(() => this._startHandshake(), retryAfter);\n    } else {\n      log.warn(`Closing: ${WS_CLOSE_BUSY_WAIT} - ${reason}`);\n      this._close({ code: WS_CLOSE_BUSY_WAIT, reason });\n      this._busyWaitTimeout = new Timeout(() => this._connect(), retryAfter);\n    }\n\n    this.transition('waiting', null, [keepAlive, retryAfter]);\n  }\n\n  /**\n   * Handle an incoming \"heartbeat\" message.\n   * @private\n   */\n  _handleHeartbeat() {\n    if (this.state !== 'open') {\n      this._log.warn(`Unexpected state \"${this.state}\" for handling a \"heartbeat\"`\n        + ' message from the TCMP server.');\n      return;\n    }\n    this._heartbeatTimeout.reset();\n  }\n\n  /**\n   * Handle a missed \"heartbeat\" message.\n   * @private\n   */\n  _handleHeartbeatTimeout() {\n    if (this.state !== 'open') {\n      return;\n    }\n    const log = this._log;\n    const { maxConsecutiveMissedHeartbeats } = this._options;\n\n    log.debug(`Consecutive heartbeats missed: ${maxConsecutiveMissedHeartbeats}`);\n    const reason = `Missed ${maxConsecutiveMissedHeartbeats} \"heartbeat\" messages`;\n    log.warn(`Closing: ${WS_CLOSE_HEARTBEATS_MISSED} - ${reason}`);\n    this._close({ code: WS_CLOSE_HEARTBEATS_MISSED, reason });\n  }\n\n  /**\n   * Handle an incoming \"msg\" message.\n   * @param {{body: object}} message\n   * @private\n   */\n  _handleMessage({ body }) {\n    if (this.state !== 'open') {\n      this._log.warn(`Unexpected state \"${this.state}\" for handling a \"msg\" message`\n        + ' from the TCMP server.');\n      return;\n    }\n    this.emit('message', body);\n  }\n\n  /**\n   * Handle an incoming \"welcome\" message.\n   * @param {{ negotiatedTimeout: number }} message\n   * @private\n   */\n  _handleWelcome({ negotiatedTimeout }) {\n    const log = this._log;\n\n    if (!['connecting', 'waiting'].includes(this.state)) {\n      log.warn(`Unexpected state \"${this.state}\" for handling a \"welcome\"`\n        + ' message from the TCMP server.');\n      return;\n    }\n\n    if (this.state === 'waiting') {\n      log.debug('Received \"welcome\" message, no need to retry connection.');\n      this._busyWaitTimeout.clear();\n    }\n\n    const { maxConsecutiveMissedHeartbeats } = this._options;\n    const heartbeatTimeout = negotiatedTimeout * maxConsecutiveMissedHeartbeats;\n    const outgoingHeartbeatTimeout = negotiatedTimeout - OUTGOING_HEARTBEAT_OFFSET;\n\n    this._welcomeTimeout.clear();\n    this._heartbeatTimeout = new Timeout(() => this._handleHeartbeatTimeout(), heartbeatTimeout);\n    this._messageQueue.splice(0).forEach(message => this._send(message));\n    this._sendHeartbeatTimeout = new Timeout(() => this._sendHeartbeat(), outgoingHeartbeatTimeout);\n    this.transition('open');\n  }\n\n  /**\n   * Handle a missed \"welcome\" message.\n   * @private\n   */\n  _handleWelcomeTimeout() {\n    if (this.state !== 'connecting') {\n      return;\n    }\n    const log = this._log;\n\n    if (this._hellosLeft <= 0) {\n      const reason = 'All handshake attempts failed';\n      log.warn(`Closing: ${WS_CLOSE_WELCOME_TIMEOUT} - ${reason}`);\n      this._close({ code: WS_CLOSE_WELCOME_TIMEOUT, reason });\n      return;\n    }\n\n    const { maxConsecutiveFailedHellos } = this._options;\n    log.warn(`Handshake attempt ${maxConsecutiveFailedHellos - this._hellosLeft} failed`);\n    this._startHandshake();\n  }\n\n  /**\n   * Send a message to the TCMP server.\n   * @param {*} message\n   * @private\n   */\n  _send(message) {\n    const { readyState } = this._ws;\n    const { WebSocket } = this._options;\n    if (readyState === WebSocket.OPEN) {\n      const data = JSON.stringify(message);\n      this._log.debug(`Outgoing: ${data}`);\n      try {\n        this._ws.send(data);\n        if (this._sendHeartbeatTimeout) {\n          // Each outgoing message is to be treated as an outgoing heartbeat.\n          this._sendHeartbeatTimeout.reset();\n        }\n      } catch (error) {\n        const reason = 'Failed to send message';\n        this._log.warn(`Closing: ${WS_CLOSE_SEND_FAILED} - ${reason}`);\n        this._close({ code: WS_CLOSE_SEND_FAILED, reason });\n      }\n    }\n  }\n\n  /**\n   * Send a \"heartbeat\" message.\n   * @private\n   */\n  _sendHeartbeat() {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._send({ type: 'heartbeat' });\n  }\n\n  /**\n   * Send a \"hello\" message.\n   * @private\n   */\n  _sendHello() {\n    const { helloBody, requestedHeartbeatTimeout: timeout } = this._options;\n    const hello = {\n      id: makeUUID(),\n      timeout,\n      type: 'hello',\n      version: TCMP_VERSION\n    };\n    if (this._cookie) {\n      hello.cookie = this._cookie;\n    }\n    if (helloBody) {\n      hello.body = helloBody;\n    }\n    this._send(hello);\n  }\n\n  /**\n   * Send or enqueue a message.\n   * @param {*} message\n   * @private\n   */\n  _sendOrEnqueue(message) {\n    if (this.state === 'closed') {\n      return;\n    }\n    const sendOrEnqueue = this.state === 'open'\n      ? message => this._send(message)\n      : message => this._messageQueue.push(message);\n\n    sendOrEnqueue(message);\n  }\n\n  /**\n   * Start the TCMP handshake.\n   * @private\n   */\n  _startHandshake() {\n    if (['early', 'waiting'].includes(this.state)) {\n      this.transition('connecting');\n    }\n    if (this.state !== 'connecting') {\n      return;\n    }\n    this._hellosLeft--;\n    this._sendHello();\n    const { welcomeTimeout } = this._options;\n    this._welcomeTimeout = new Timeout(() => this._handleWelcomeTimeout(), welcomeTimeout);\n  }\n\n  /**\n   * Close the {@link TwilioConnection}.\n   * @returns {void}\n   */\n  close() {\n    if (this.state === 'closed') {\n      return;\n    }\n    this._sendOrEnqueue({ type: 'bye' });\n    this._close({ code: WS_CLOSE_NORMAL, reason: 'Normal' });\n  }\n\n  /**\n   * Send a \"msg\" message.\n   * @param {*} body\n   * @returns {void}\n   */\n  sendMessage(body) {\n    this._sendOrEnqueue({ body, type: 'msg' });\n  }\n}\n\n/**\n * A unique string depicting the reason for the {@link TwilioConnection} being closed.\n * @enum {string}\n */\nTwilioConnection.CloseReason = CloseReason;\n\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {CloseReason} reason - The reason for the {@link TwilioConnection} being closed\n */\n\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n\n/**\n * A {@link TwilioConnection} received a \"busy\" message from the TCMP server.\n * @event TwilioConnection#waiting\n * @param {boolean} keepAlive - true if the WebSocket connection is retained\n * @param {number} retryAfter - delay in milliseconds after which a retry is attempted\n */\n\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {EventObserver} [eventObserver] - Optional event observer\n * @property {*} [helloBody=null] - Optional body for \"hello\" message\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveFailedHellos=3] - Max. number of consecutive failed \"hello\"s\n * @property {number} [maxConsecutiveMissedHeartbeats=3] - Max. number of (effective) consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\n\nmodule.exports = TwilioConnection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}