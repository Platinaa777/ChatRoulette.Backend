{"ast":null,"code":"'use strict';\n\nvar getMediaSections = require('./').getMediaSections;\n/**\n * An {@link TrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\nvar TrackMatcher = /** @class */function () {\n  /**\n   * Construct an {@link TrackMatcher}.\n   */\n  function TrackMatcher() {\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n  TrackMatcher.prototype.match = function (event) {\n    return this._midsToTrackIds.get(event.transceiver.mid) || null;\n  };\n  /**\n   * Update the {@link TrackMatcher} with a new SDP.\n   * @param {string} sdp\n   */\n  TrackMatcher.prototype.update = function (sdp) {\n    var sections = getMediaSections(sdp, '(audio|video)');\n    this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n      var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n      var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n      var mid = midMatches[1];\n      var trackId = trackIdMatches[1];\n      return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n    }, this._midsToTrackIds);\n  };\n  return TrackMatcher;\n}();\nmodule.exports = TrackMatcher;","map":{"version":3,"names":["getMediaSections","require","TrackMatcher","Object","defineProperties","_midsToTrackIds","value","Map","writable","prototype","match","event","get","transceiver","mid","update","sdp","sections","reduce","midsToTrackIds","section","midMatches","trackIdMatches","trackId","set","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/util/sdp/trackmatcher.js"],"sourcesContent":["'use strict';\n\nconst { getMediaSections } = require('./');\n\n/**\n * An {@link TrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\nclass TrackMatcher {\n  /**\n   * Construct an {@link TrackMatcher}.\n   */\n  constructor() {\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n  match(event) {\n    return this._midsToTrackIds.get(event.transceiver.mid) || null;\n  }\n\n  /**\n   * Update the {@link TrackMatcher} with a new SDP.\n   * @param {string} sdp\n   */\n  update(sdp) {\n    const sections = getMediaSections(sdp, '(audio|video)');\n    this._midsToTrackIds = sections.reduce((midsToTrackIds, section) => {\n      const midMatches = section.match(/^a=mid:(.+)$/m) || [];\n      const trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n      const mid = midMatches[1];\n      const trackId = trackIdMatches[1];\n      return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n    }, this._midsToTrackIds);\n  }\n}\n\nmodule.exports = TrackMatcher;\n"],"mappings":"AAAA,YAAY;;AAEJ,IAAAA,gBAAgB,GAAKC,OAAO,CAAC,IAAI,CAAC,CAAAD,gBAAlB;AAExB;;;;AAIA,IAAAE,YAAA;EACE;;;EAGA,SAAAA,aAAA;IACEC,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC5BC,eAAe,EAAE;QACfC,KAAK,EAAE,IAAIC,GAAG,EAAE;QAChBC,QAAQ,EAAE;;KAEb,CAAC;EACJ;EAEA;;;;;EAKAN,YAAA,CAAAO,SAAA,CAAAC,KAAK,GAAL,UAAMC,KAAK;IACT,OAAO,IAAI,CAACN,eAAe,CAACO,GAAG,CAACD,KAAK,CAACE,WAAW,CAACC,GAAG,CAAC,IAAI,IAAI;EAChE,CAAC;EAED;;;;EAIAZ,YAAA,CAAAO,SAAA,CAAAM,MAAM,GAAN,UAAOC,GAAG;IACR,IAAMC,QAAQ,GAAGjB,gBAAgB,CAACgB,GAAG,EAAE,eAAe,CAAC;IACvD,IAAI,CAACX,eAAe,GAAGY,QAAQ,CAACC,MAAM,CAAC,UAACC,cAAc,EAAEC,OAAO;MAC7D,IAAMC,UAAU,GAAGD,OAAO,CAACV,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE;MACvD,IAAMY,cAAc,GAAGF,OAAO,CAACV,KAAK,CAAC,mBAAmB,CAAC,IAAI,EAAE;MAC/D,IAAMI,GAAG,GAAGO,UAAU,CAAC,CAAC,CAAC;MACzB,IAAME,OAAO,GAAGD,cAAc,CAAC,CAAC,CAAC;MACjC,OAAOR,GAAG,IAAIS,OAAO,GAAGJ,cAAc,CAACK,GAAG,CAACV,GAAG,EAAES,OAAO,CAAC,GAAGJ,cAAc;IAC3E,CAAC,EAAE,IAAI,CAACd,eAAe,CAAC;EAC1B,CAAC;EACH,OAAAH,YAAC;AAAD,CAAC,CApCD;AAsCAuB,MAAM,CAACC,OAAO,GAAGxB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}