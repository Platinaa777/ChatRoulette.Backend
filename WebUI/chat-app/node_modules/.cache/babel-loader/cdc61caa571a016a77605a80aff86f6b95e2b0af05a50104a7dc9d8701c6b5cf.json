{"ast":null,"code":"/* eslint new-cap:0 */\n'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nvar defaultGetLogger = require('../vendor/loglevel').getLogger;\nvar constants = require('./constants');\nvar DEFAULT_LOG_LEVEL = constants.DEFAULT_LOG_LEVEL,\n  DEFAULT_LOGGER_NAME = constants.DEFAULT_LOGGER_NAME;\nvar E = require('./constants').typeErrors;\nvar deprecationWarningsByComponentConstructor;\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n  var deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n/**\n * Selectively outputs messages to console based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\nvar Log = /** @class */function () {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   * @param {String} loggerName - Name of the logger instance. Used when calling getLogger from loglevel module\n   * @param {Function} [getLogger] - optional method used internally.\n   */\n  function Log(moduleName, component, logLevels, loggerName, getLogger) {\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n    if (typeof logLevels !== 'object') {\n      logLevels = {};\n    }\n    getLogger = getLogger || defaultGetLogger;\n    validateLogLevels(logLevels);\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      _loggerName: {\n        get: function get() {\n          var name = loggerName && typeof loggerName === 'string' ? loggerName : DEFAULT_LOGGER_NAME;\n          if (!this._logLevelsEqual) {\n            name = name + \"-\" + moduleName;\n          }\n          return name;\n        }\n      },\n      _logger: {\n        get: function get() {\n          var logger = getLogger(this._loggerName);\n          var level = this._logLevels[moduleName] || DEFAULT_LOG_LEVEL;\n          // There is no 'off' in the logger module. It uses 'silent' instead\n          level = level === 'off' ? 'silent' : level;\n          logger.setDefaultLevel(level);\n          return logger;\n        }\n      },\n      _logLevelsEqual: {\n        get: function get() {\n          // True if all levels are the same\n          return new Set(Object.values(this._logLevels)).size === 1;\n        }\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: {\n        get: component.toString.bind(component)\n      }\n    });\n  }\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n  Log.getLevelByName = function (name) {\n    if (!isNaN(name)) {\n      return parseInt(name, 10);\n    }\n    name = name.toUpperCase();\n    validateLogLevel(name);\n    return Log[name];\n  };\n  /**\n   * Create a child {@link Log} instance with this._logLevels\n   * @param moduleName - Name of the logging module\n   * @param component - Component owning this instance of {@link Log}\n   * @returns {Log} this\n   */\n  Log.prototype.createLog = function (moduleName, component) {\n    var name = this._loggerName;\n    // Grab the original logger name\n    if (!this._logLevelsEqual) {\n      name = name.substring(0, name.lastIndexOf('-'));\n    }\n    return new Log(moduleName, component, this._logLevels, name);\n  };\n  /**\n   * Set new log levels.\n   * This changes the levels for all its ancestors,\n   * siblings, and children and descendants instances of {@link Log}.\n   * @param {LogLevels} levels - New log levels\n   * @throws {TwilioError} INVALID_ARGUMENT\n   * @returns {Log} this\n   */\n  Log.prototype.setLevels = function (levels) {\n    validateLogLevels(levels);\n    Object.assign(this._logLevels, levels);\n    return this;\n  };\n  /**\n   * Log a message using the logger method appropriate for the specified logLevel\n   * @param {Number} logLevel - Log level of the message being logged\n   * @param {Array} messages - Message(s) to log\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  Log.prototype.log = function (logLevel, messages) {\n    var name = Log._levels[logLevel];\n    // eslint-disable-next-line no-use-before-define\n    if (!name) {\n      throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES);\n    }\n    name = name.toLowerCase();\n    var prefix = [new Date().toISOString(), name, this.name];\n    (this._logger[name] || function noop() {}).apply(void 0, __spreadArray([], __read(prefix.concat(messages))));\n    return this;\n  };\n  /**\n   * Log a debug message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  Log.prototype.debug = function () {\n    return this.log(Log.DEBUG, [].slice.call(arguments));\n  };\n  /**\n   * Log a deprecation warning. Deprecation warnings are logged as warnings and\n   * they are only ever logged once.\n   * @param {String} deprecationWarning - The deprecation warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  Log.prototype.deprecated = function (deprecationWarning) {\n    var deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n    if (deprecationWarnings.has(deprecationWarning)) {\n      return this;\n    }\n    deprecationWarnings.add(deprecationWarning);\n    return this.warn(deprecationWarning);\n  };\n  /**\n   * Log an info message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  Log.prototype.info = function () {\n    return this.log(Log.INFO, [].slice.call(arguments));\n  };\n  /**\n   * Log a warn message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  Log.prototype.warn = function () {\n    return this.log(Log.WARN, [].slice.call(arguments));\n  };\n  /**\n   * Log a warning once.\n   * @param {String} warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  Log.prototype.warnOnce = function (warning) {\n    if (this._warnings.has(warning)) {\n      return this;\n    }\n    this._warnings.add(warning);\n    return this.warn(warning);\n  };\n  /**\n   * Log an error message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  Log.prototype.error = function () {\n    return this.log(Log.ERROR, [].slice.call(arguments));\n  };\n  /**\n   * Log an error message and throw an exception\n   * @param {TwilioError} error - Error to throw\n   * @param {String} customMessage - Custom message for the error\n   * @public\n   */\n  Log.prototype.throw = function (error, customMessage) {\n    if (error.clone) {\n      error = error.clone(customMessage);\n    }\n    this.log(Log.ERROR, error);\n    throw error;\n  };\n  return Log;\n}();\n// Singleton Constants\n/* eslint key-spacing:0 */\n/* istanbul ignore next */\nObject.defineProperties(Log, {\n  DEBUG: {\n    value: 0\n  },\n  INFO: {\n    value: 1\n  },\n  WARN: {\n    value: 2\n  },\n  ERROR: {\n    value: 3\n  },\n  OFF: {\n    value: 4\n  },\n  _levels: {\n    value: ['DEBUG', 'INFO', 'WARN', 'ERROR', 'OFF']\n  }\n});\nvar LOG_LEVELS_SET = {};\nvar LOG_LEVEL_VALUES = [];\nvar LOG_LEVEL_NAMES = Log._levels.map(function (level, i) {\n  LOG_LEVELS_SET[level] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level;\n});\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(function (moduleName) {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\nmodule.exports = Log;","map":{"version":3,"names":["defaultGetLogger","require","getLogger","constants","DEFAULT_LOG_LEVEL","DEFAULT_LOGGER_NAME","E","typeErrors","deprecationWarningsByComponentConstructor","getDeprecationWarnings","componentConstructor","Map","has","get","deprecationWarnings","Set","set","Log","moduleName","component","logLevels","loggerName","INVALID_TYPE","REQUIRED_ARGUMENT","validateLogLevels","Object","defineProperties","_component","value","_logLevels","_warnings","_loggerName","name","_logLevelsEqual","_logger","logger","level","setDefaultLevel","values","size","logLevel","getLevelByName","toString","bind","isNaN","parseInt","toUpperCase","validateLogLevel","prototype","createLog","substring","lastIndexOf","setLevels","levels","assign","log","messages","_levels","INVALID_VALUE","LOG_LEVEL_VALUES","toLowerCase","prefix","Date","toISOString","noop","apply","__spreadArray","__read","concat","debug","DEBUG","slice","call","arguments","deprecated","deprecationWarning","constructor","add","warn","info","INFO","WARN","warnOnce","warning","error","ERROR","throw","customMessage","clone","OFF","LOG_LEVELS_SET","LOG_LEVEL_NAMES","map","i","push","keys","forEach","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/util/log.js"],"sourcesContent":["/* eslint new-cap:0 */\n'use strict';\n\nconst defaultGetLogger = require('../vendor/loglevel').getLogger;\nconst constants = require('./constants');\nconst { DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_NAME } = constants;\nconst E = require('./constants').typeErrors;\n\nlet deprecationWarningsByComponentConstructor;\n\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n  const deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n\n/**\n * Selectively outputs messages to console based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\nclass Log {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   * @param {String} loggerName - Name of the logger instance. Used when calling getLogger from loglevel module\n   * @param {Function} [getLogger] - optional method used internally.\n   */\n  constructor(moduleName, component, logLevels, loggerName, getLogger) {\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n\n    if (typeof logLevels !== 'object') {\n      logLevels = {};\n    }\n\n    getLogger = getLogger || defaultGetLogger;\n\n    validateLogLevels(logLevels);\n\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      _loggerName: {\n        get: function get() {\n          let name = loggerName && typeof loggerName === 'string' ? loggerName : DEFAULT_LOGGER_NAME;\n\n          if (!this._logLevelsEqual) {\n            name = `${name}-${moduleName}`;\n          }\n          return name;\n        }\n      },\n      _logger: {\n        get: function get() {\n          const logger = getLogger(this._loggerName);\n          let level = this._logLevels[moduleName] || DEFAULT_LOG_LEVEL;\n\n          // There is no 'off' in the logger module. It uses 'silent' instead\n          level = level === 'off' ? 'silent' : level;\n\n          logger.setDefaultLevel(level);\n          return logger;\n        }\n      },\n      _logLevelsEqual: {\n        get: function get() {\n          // True if all levels are the same\n          return (new Set(Object.values(this._logLevels)).size) === 1;\n        }\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: { get: component.toString.bind(component) }\n    });\n  }\n\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n  static getLevelByName(name) {\n    if (!isNaN(name)) {\n      return parseInt(name, 10);\n    }\n    name = name.toUpperCase();\n    validateLogLevel(name);\n    return Log[name];\n  }\n\n  /**\n   * Create a child {@link Log} instance with this._logLevels\n   * @param moduleName - Name of the logging module\n   * @param component - Component owning this instance of {@link Log}\n   * @returns {Log} this\n   */\n  createLog(moduleName, component) {\n    let name = this._loggerName;\n    // Grab the original logger name\n    if (!this._logLevelsEqual) {\n      name = name.substring(0, name.lastIndexOf('-'));\n    }\n    return new Log(moduleName, component, this._logLevels, name);\n  }\n\n  /**\n   * Set new log levels.\n   * This changes the levels for all its ancestors,\n   * siblings, and children and descendants instances of {@link Log}.\n   * @param {LogLevels} levels - New log levels\n   * @throws {TwilioError} INVALID_ARGUMENT\n   * @returns {Log} this\n   */\n  setLevels(levels) {\n    validateLogLevels(levels);\n    Object.assign(this._logLevels, levels);\n    return this;\n  }\n\n  /**\n   * Log a message using the logger method appropriate for the specified logLevel\n   * @param {Number} logLevel - Log level of the message being logged\n   * @param {Array} messages - Message(s) to log\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  log(logLevel, messages) {\n    let name = Log._levels[logLevel];\n    // eslint-disable-next-line no-use-before-define\n    if (!name) { throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES); }\n\n    name = name.toLowerCase();\n    const prefix = [new Date().toISOString(), name, this.name];\n\n    (this._logger[name] || function noop() {})(...prefix.concat(messages));\n\n    return this;\n  }\n\n  /**\n   * Log a debug message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  debug() {\n    return this.log(Log.DEBUG, [].slice.call(arguments));\n  }\n\n  /**\n   * Log a deprecation warning. Deprecation warnings are logged as warnings and\n   * they are only ever logged once.\n   * @param {String} deprecationWarning - The deprecation warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  deprecated(deprecationWarning) {\n    const deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n    if (deprecationWarnings.has(deprecationWarning)) {\n      return this;\n    }\n    deprecationWarnings.add(deprecationWarning);\n    return this.warn(deprecationWarning);\n  }\n\n  /**\n   * Log an info message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  info() {\n    return this.log(Log.INFO, [].slice.call(arguments));\n  }\n\n  /**\n   * Log a warn message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  warn() {\n    return this.log(Log.WARN, [].slice.call(arguments));\n  }\n\n  /**\n   * Log a warning once.\n   * @param {String} warning\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  warnOnce(warning) {\n    if (this._warnings.has(warning)) {\n      return this;\n    }\n    this._warnings.add(warning);\n    return this.warn(warning);\n  }\n\n  /**\n   * Log an error message\n   * @param {...String} messages - Message(s) to pass to the logger\n   * @returns {Log} This instance of {@link Log}\n   * @public\n   */\n  error() {\n    return this.log(Log.ERROR, [].slice.call(arguments));\n  }\n\n  /**\n   * Log an error message and throw an exception\n   * @param {TwilioError} error - Error to throw\n   * @param {String} customMessage - Custom message for the error\n   * @public\n   */\n  throw(error, customMessage) {\n    if (error.clone) {\n      error = error.clone(customMessage);\n    }\n\n    this.log(Log.ERROR, error);\n    throw error;\n  }\n}\n\n// Singleton Constants\n/* eslint key-spacing:0 */\n/* istanbul ignore next */\nObject.defineProperties(Log, {\n  DEBUG: { value: 0 },\n  INFO:  { value: 1 },\n  WARN:  { value: 2 },\n  ERROR: { value: 3 },\n  OFF:   { value: 4 },\n  _levels: {\n    value: [\n      'DEBUG',\n      'INFO',\n      'WARN',\n      'ERROR',\n      'OFF',\n    ]\n  }\n});\n\nconst LOG_LEVELS_SET = {};\nconst LOG_LEVEL_VALUES = [];\n\nconst LOG_LEVEL_NAMES = Log._levels.map((level, i) => {\n  LOG_LEVELS_SET[level] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level;\n});\n\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\n\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(moduleName => {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\n\nmodule.exports = Log;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}