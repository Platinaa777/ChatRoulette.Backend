{"ast":null,"code":"/* eslint-disable no-console */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar DominantSpeakerSignaling = require('./dominantspeakersignaling');\nvar NetworkQualityMonitor = require('./networkqualitymonitor');\nvar NetworkQualitySignaling = require('./networkqualitysignaling');\nvar RecordingV2 = require('./recording');\nvar RoomSignaling = require('../room');\nvar RemoteParticipantV2 = require('./remoteparticipant');\nvar StatsReport = require('../../stats/statsreport');\nvar TrackPrioritySignaling = require('./trackprioritysignaling');\nvar TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\nvar RenderHintsSignaling = require('./renderhintssignaling');\nvar PublisherHintsSignaling = require('./publisherhintsignaling.js');\nvar _a = require('../../util'),\n  DEFAULT_SESSION_TIMEOUT_SEC = _a.constants.DEFAULT_SESSION_TIMEOUT_SEC,\n  createBandwidthProfilePayload = _a.createBandwidthProfilePayload,\n  defer = _a.defer,\n  difference = _a.difference,\n  filterObject = _a.filterObject,\n  flatMap = _a.flatMap,\n  oncePerTick = _a.oncePerTick;\nvar MovingAverageDelta = require('../../util/movingaveragedelta');\nvar createTwilioError = require('../../util/twilio-video-errors').createTwilioError;\nvar STATS_PUBLISH_INTERVAL_MS = 10000;\n/**\n * @extends RoomSignaling\n */\nvar RoomV2 = /** @class */function (_super) {\n  __extends(RoomV2, _super);\n  function RoomV2(localParticipant, initialState, transport, peerConnectionManager, options) {\n    var _this = this;\n    initialState.options = Object.assign({\n      session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n    }, initialState.options);\n    options = Object.assign({\n      DominantSpeakerSignaling: DominantSpeakerSignaling,\n      NetworkQualityMonitor: NetworkQualityMonitor,\n      NetworkQualitySignaling: NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2: RemoteParticipantV2,\n      TrackPrioritySignaling: TrackPrioritySignaling,\n      TrackSwitchOffSignaling: TrackSwitchOffSignaling,\n      bandwidthProfile: null,\n      sessionTimeout: initialState.options.session_timeout * 1000,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n    localParticipant.setBandwidthProfile(options.bandwidthProfile);\n    var _a = initialState.options,\n      signalingRegion = _a.signaling_region,\n      _b = _a.audio_processors,\n      audioProcessors = _b === void 0 ? [] : _b;\n    localParticipant.setSignalingRegion(signalingRegion);\n    if (audioProcessors.includes('krisp')) {\n      // Note(mpatwardhan): we add rnnoise as allowed_processor to enable testing our pipeline e2e.\n      audioProcessors.push('rnnoise');\n    }\n    localParticipant.setAudioProcessors(audioProcessors);\n    peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n    _this = _super.call(this, localParticipant, initialState.sid, initialState.name, options) || this;\n    var getTrackReceiver = function (id) {\n      return _this._getTrackReceiver(id);\n    };\n    var log = _this._log;\n    Object.defineProperties(_this, {\n      _disconnectedParticipantRevisions: {\n        value: new Map()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _lastBandwidthProfileRevision: {\n        value: localParticipant.bandwidthProfileRevision,\n        writable: true\n      },\n      _mediaStatesWarningsRevision: {\n        value: 0,\n        writable: true\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityConfiguration: {\n        value: localParticipant.networkQualityConfiguration\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _dominantSpeakerSignaling: {\n        value: new options.DominantSpeakerSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _networkQualitySignaling: {\n        value: new options.NetworkQualitySignaling(getTrackReceiver, localParticipant.networkQualityConfiguration, {\n          log: log\n        })\n      },\n      _renderHintsSignaling: {\n        value: new RenderHintsSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _publisherHintsSignaling: {\n        value: new PublisherHintsSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackPrioritySignaling: {\n        value: new options.TrackPrioritySignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _trackSwitchOffSignaling: {\n        value: new options.TrackSwitchOffSignaling(getTrackReceiver, {\n          log: log\n        })\n      },\n      _pendingSwitchOffStates: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: initialState.options.media_region || null\n      }\n    });\n    _this._initTrackSwitchOffSignaling();\n    _this._initDominantSpeakerSignaling();\n    _this._initNetworkQualityMonitorSignaling();\n    _this._initPublisherHintSignaling();\n    handleLocalParticipantEvents(_this, localParticipant);\n    handlePeerConnectionEvents(_this, peerConnectionManager);\n    handleTransportEvents(_this, transport);\n    periodicallyPublishStats(_this, transport, options.statsPublishIntervalMs);\n    _this._update(initialState);\n    // NOTE(mpatwardhan) after initial state we know if publisher_hints are enabled or not\n    // if they are not enabled. we need to undo simulcast that was enabled with initial offer.\n    _this._peerConnectionManager.setEffectiveAdaptiveSimulcast(_this._publisherHintsSignaling.isSetup);\n    return _this;\n  }\n  Object.defineProperty(RoomV2.prototype, \"connectionState\", {\n    /**\n     * The PeerConnection state.\n     * @property {RTCPeerConnectionState}\n     */\n    get: function () {\n      return this._peerConnectionManager.connectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"signalingConnectionState\", {\n    /**\n     * The Signaling Connection State.\n     * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n     */\n    get: function () {\n      return this._transport.state === 'syncing' ? 'reconnecting' : this._transport.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RoomV2.prototype, \"iceConnectionState\", {\n    /**\n     * The Ice Connection State.\n     * @property {RTCIceConnectionState}\n     */\n    get: function () {\n      return this._peerConnectionManager.iceConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @private\n   */\n  RoomV2.prototype._deleteTrackReceiverDeferred = function (id) {\n    return this._trackReceiverDeferreds.delete(id);\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getOrCreateTrackReceiverDeferred = function (id) {\n    var deferred = this._trackReceiverDeferreds.get(id) || defer();\n    var trackReceivers = this._peerConnectionManager.getTrackReceivers();\n    // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n    // for the given Track ID already exists, for example, when a Track is removed\n    // and added back. If that is the case, then we should resolve 'deferred'.\n    var trackReceiver = trackReceivers.find(function (trackReceiver) {\n      return trackReceiver.id === id && trackReceiver.readyState !== 'ended';\n    });\n    if (trackReceiver) {\n      deferred.resolve(trackReceiver);\n    } else {\n      // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n      // resolved. This will prevent old copies of the MediaStreamTrack from\n      // being used when the remote peer removes and re-adds a MediaStreamTrack.\n      this._trackReceiverDeferreds.set(id, deferred);\n    }\n    return deferred;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._addTrackReceiver = function (trackReceiver) {\n    var deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n    deferred.resolve(trackReceiver);\n    return this;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._disconnect = function (error) {\n    var didDisconnect = _super.prototype._disconnect.call(this, error);\n    if (didDisconnect) {\n      this._teardownNetworkQualityMonitor();\n      this._transport.disconnect();\n      this._peerConnectionManager.close();\n    }\n    this.localParticipant.tracks.forEach(function (track) {\n      track.publishFailed(error || new Error('LocalParticipant disconnected'));\n    });\n    return didDisconnect;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getTrackReceiver = function (id) {\n    var _this = this;\n    return this._getOrCreateTrackReceiverDeferred(id).promise.then(function (trackReceiver) {\n      _this._deleteTrackReceiverDeferred(id);\n      return trackReceiver;\n    });\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getInitialTrackSwitchOffState = function (trackSid) {\n    var initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n    this._pendingSwitchOffStates.delete(trackSid);\n    if (initiallySwitchedOff) {\n      this._log.warn(\"[\" + trackSid + \"] was initially switched off! \");\n    }\n    return initiallySwitchedOff;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getTrackSidsToTrackSignalings = function () {\n    var trackSidsToTrackSignalings = flatMap(this.participants, function (participant) {\n      return Array.from(participant.tracks);\n    });\n    return new Map(trackSidsToTrackSignalings);\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getOrCreateRemoteParticipant = function (participantState) {\n    var _this = this;\n    var RemoteParticipantV2 = this._RemoteParticipantV2;\n    var participant = this.participants.get(participantState.sid);\n    var self = this;\n    if (!participant) {\n      participant = new RemoteParticipantV2(participantState, function (trackSid) {\n        return _this._getInitialTrackSwitchOffState(trackSid);\n      }, function (trackSid, priority) {\n        return _this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority);\n      }, function (trackSid, hint) {\n        return _this._renderHintsSignaling.setTrackHint(trackSid, hint);\n      }, function (trackSid) {\n        return _this._renderHintsSignaling.clearTrackHint(trackSid);\n      });\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n          self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n        }\n      });\n      this.connectParticipant(participant);\n    }\n    return participant;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._getState = function () {\n    return {\n      participant: this.localParticipant.getState()\n    };\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._maybeAddBandwidthProfile = function (update) {\n    var _a = this.localParticipant,\n      bandwidthProfile = _a.bandwidthProfile,\n      bandwidthProfileRevision = _a.bandwidthProfileRevision;\n    if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n      this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n      return Object.assign({\n        bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n      }, update);\n    }\n    return update;\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._publishNewLocalParticipantState = function () {\n    this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._publishPeerConnectionState = function (peerConnectionState) {\n    /* eslint camelcase:0 */\n    this._transport.publish(Object.assign({\n      peer_connections: [peerConnectionState]\n    }, this._getState()));\n  };\n  /**\n   * @private\n   */\n  RoomV2.prototype._update = function (roomState) {\n    var _this = this;\n    if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n      this._subscribedRevision = roomState.subscribed.revision;\n      roomState.subscribed.tracks.forEach(function (trackState) {\n        if (trackState.id) {\n          _this._subscriptionFailures.delete(trackState.sid);\n          _this._subscribed.set(trackState.sid, trackState.id);\n        } else if (trackState.error && !_this._subscriptionFailures.has(trackState.sid)) {\n          _this._subscriptionFailures.set(trackState.sid, trackState.error);\n        }\n      });\n      var subscribedTrackSids_1 = new Set(roomState.subscribed.tracks.filter(function (trackState) {\n        return !!trackState.id;\n      }).map(function (trackState) {\n        return trackState.sid;\n      }));\n      this._subscribed.forEach(function (trackId, trackSid) {\n        if (!subscribedTrackSids_1.has(trackSid)) {\n          _this._subscribed.delete(trackSid);\n        }\n      });\n    }\n    var participantsToKeep = new Set();\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    (roomState.participants || []).forEach(function (participantState) {\n      if (participantState.sid === _this.localParticipant.sid) {\n        return;\n      }\n      // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n      // equal to the revision when it was disconnected, then the state is old and can be ignored.\n      // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n      // stopped publishing media, and hence needs to be re-added.\n      var disconnectedParticipantRevision = _this._disconnectedParticipantRevisions.get(participantState.sid);\n      if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n        return;\n      }\n      if (disconnectedParticipantRevision) {\n        _this._disconnectedParticipantRevisions.delete(participantState.sid);\n      }\n      var participant = _this._getOrCreateRemoteParticipant(participantState);\n      participant.update(participantState);\n      participantsToKeep.add(participant);\n    });\n    if (roomState.type === 'synced') {\n      this.participants.forEach(function (participant) {\n        if (!participantsToKeep.has(participant)) {\n          participant.disconnect();\n        }\n      });\n    }\n    handleSubscriptions(this);\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    /* eslint camelcase:0 */\n    if (roomState.peer_connections) {\n      this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n    }\n    if (roomState.recording) {\n      this.recording.update(roomState.recording);\n    }\n    if (roomState.published && roomState.published.revision > this._publishedRevision) {\n      this._publishedRevision = roomState.published.revision;\n      roomState.published.tracks.forEach(function (track) {\n        if (track.sid) {\n          _this._published.set(track.id, track.sid);\n        }\n      });\n      this.localParticipant.update(roomState.published);\n    }\n    if (roomState.participant) {\n      this.localParticipant.connect(roomState.participant.sid, roomState.participant.identity);\n    }\n    [this._dominantSpeakerSignaling, this._networkQualitySignaling, this._trackPrioritySignaling, this._trackSwitchOffSignaling, this._renderHintsSignaling, this._publisherHintsSignaling].forEach(function (mediaSignaling) {\n      var channel = mediaSignaling.channel;\n      if (!mediaSignaling.isSetup && roomState.media_signaling && roomState.media_signaling[channel] && roomState.media_signaling[channel].transport && roomState.media_signaling[channel].transport.type === 'data-channel') {\n        mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n      }\n    });\n    if (roomState.type === 'warning' && roomState.states && roomState.states.revision > this._mediaStatesWarningsRevision) {\n      this._mediaStatesWarningsRevision = roomState.states.revision;\n      this.localParticipant.updateMediaStates(roomState.states);\n    }\n    return this;\n  };\n  RoomV2.prototype._initPublisherHintSignaling = function () {\n    var _this = this;\n    this._publisherHintsSignaling.on('updated', function (hints, id) {\n      Promise.all(hints.map(function (hint) {\n        return _this.localParticipant.setPublisherHint(hint.track, hint.encodings).then(function (result) {\n          return {\n            track: hint.track,\n            result: result\n          };\n        });\n      })).then(function (hintResponses) {\n        _this._publisherHintsSignaling.sendHintResponse({\n          id: id,\n          hints: hintResponses\n        });\n      });\n    });\n    var handleReplaced = function (track) {\n      if (track.kind === 'video') {\n        track.trackTransceiver.on('replaced', function () {\n          _this._publisherHintsSignaling.sendTrackReplaced({\n            trackSid: track.sid\n          });\n        });\n      }\n    };\n    // hook up for any existing and new tracks getting replaced.\n    Array.from(this.localParticipant.tracks.values()).forEach(function (track) {\n      return handleReplaced(track);\n    });\n    this.localParticipant.on('trackAdded', function (track) {\n      return handleReplaced(track);\n    });\n  };\n  RoomV2.prototype._initTrackSwitchOffSignaling = function () {\n    var _this = this;\n    this._trackSwitchOffSignaling.on('updated', function (tracksOff, tracksOn) {\n      try {\n        _this._log.debug('received trackSwitch: ', {\n          tracksOn: tracksOn,\n          tracksOff: tracksOff\n        });\n        var trackUpdates_1 = new Map();\n        tracksOn.forEach(function (trackSid) {\n          return trackUpdates_1.set(trackSid, true);\n        });\n        tracksOff.forEach(function (trackSid) {\n          if (trackUpdates_1.get(trackSid)) {\n            // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n            _this._log.warn(trackSid + \" is DUPLICATED in both tracksOff and tracksOn list\");\n          }\n          trackUpdates_1.set(trackSid, false);\n        });\n        _this.participants.forEach(function (participant) {\n          participant.tracks.forEach(function (track) {\n            var isOn = trackUpdates_1.get(track.sid);\n            if (typeof isOn !== 'undefined') {\n              track.setSwitchedOff(!isOn);\n              trackUpdates_1.delete(track.sid);\n            }\n          });\n        });\n        // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n        trackUpdates_1.forEach(function (isOn, trackSid) {\n          return _this._pendingSwitchOffStates.set(trackSid, !isOn);\n        });\n      } catch (ex) {\n        _this._log.error('error processing track switch off:', ex);\n      }\n    });\n  };\n  RoomV2.prototype._initDominantSpeakerSignaling = function () {\n    var _this = this;\n    this._dominantSpeakerSignaling.on('updated', function () {\n      return _this.setDominantSpeaker(_this._dominantSpeakerSignaling.loudestParticipantSid);\n    });\n  };\n  RoomV2.prototype._initNetworkQualityMonitorSignaling = function () {\n    var _this = this;\n    this._networkQualitySignaling.on('ready', function () {\n      var networkQualityMonitor = new _this._NetworkQualityMonitor(_this._peerConnectionManager, _this._networkQualitySignaling);\n      _this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', function () {\n        if (_this.iceConnectionState === 'failed') {\n          return;\n        }\n        _this.localParticipant.setNetworkQualityLevel(networkQualityMonitor.level, networkQualityMonitor.levels);\n        _this.participants.forEach(function (participant) {\n          var levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n          if (levels) {\n            participant.setNetworkQualityLevel(levels.level, levels);\n          }\n        });\n      });\n      networkQualityMonitor.start();\n    });\n    this._networkQualitySignaling.on('teardown', function () {\n      return _this._teardownNetworkQualityMonitor();\n    });\n  };\n  RoomV2.prototype._teardownNetworkQualityMonitor = function () {\n    if (this._networkQualityMonitor) {\n      this._networkQualityMonitor.stop();\n      this._networkQualityMonitor = null;\n    }\n  };\n  /**\n   * Get the {@link RoomV2}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n  RoomV2.prototype.getStats = function () {\n    var _this = this;\n    return this._peerConnectionManager.getStats().then(function (responses) {\n      return new Map(Array.from(responses).map(function (_a) {\n        var _b = __read(_a, 2),\n          id = _b[0],\n          response = _b[1];\n        return [id, Object.assign({}, response, {\n          localAudioTrackStats: filterAndAddLocalTrackSids(_this, response.localAudioTrackStats),\n          localVideoTrackStats: filterAndAddLocalTrackSids(_this, response.localVideoTrackStats),\n          remoteAudioTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteAudioTrackStats),\n          remoteVideoTrackStats: filterAndAddRemoteTrackSids(_this, response.remoteVideoTrackStats)\n        })];\n      }));\n    });\n  };\n  return RoomV2;\n}(RoomSignaling);\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var trackSid = idToSid.get(trackStat.trackId);\n    return trackSid ? [Object.assign({}, trackStat, {\n      trackSid: trackSid\n    })].concat(trackStats) : trackStats;\n  }, []);\n}\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  var idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(function (_a) {\n    var _b = __read(_a, 2),\n      sid = _b[0],\n      id = _b[1];\n    return [id, sid];\n  }));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  var localParticipantUpdated = oncePerTick(function () {\n    roomV2._publishNewLocalParticipantState();\n  });\n  var renegotiate = oncePerTick(function () {\n    var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n      return trackV2.trackTransceiver;\n    });\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n  roomV2.on('signalingConnectionStateChanged', function () {\n    var localParticipant = roomV2.localParticipant,\n      signalingConnectionState = roomV2.signalingConnectionState;\n    var identity = localParticipant.identity,\n      sid = localParticipant.sid;\n    switch (signalingConnectionState) {\n      case 'connected':\n        localParticipant.connect(sid, identity);\n        break;\n      case 'reconnecting':\n        localParticipant.reconnecting();\n        break;\n    }\n  });\n}\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n  peerConnectionManager.on('connectionStateChanged', function () {\n    roomV2.emit('connectionStateChanged');\n  });\n  peerConnectionManager.on('iceConnectionStateChanged', function () {\n    roomV2.emit('iceConnectionStateChanged');\n    if (roomV2.iceConnectionState === 'failed') {\n      if (roomV2.localParticipant.networkQualityLevel !== null) {\n        roomV2.localParticipant.setNetworkQualityLevel(0);\n      }\n      roomV2.participants.forEach(function (participant) {\n        if (participant.networkQualityLevel !== null) {\n          participant.setNetworkQualityLevel(0);\n        }\n      });\n    }\n  });\n}\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n      transport.removeListener('stateChanged', stateChanged);\n    }\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n  var movingAverageDeltas = new Map();\n  var oddPublishCount = false;\n  var interval = setInterval(function () {\n    roomV2.getStats().then(function (stats) {\n      oddPublishCount = !oddPublishCount;\n      stats.forEach(function (response, id) {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add zeros to properties that do not exist.\n        var report = new StatsReport(id, response, true /* prepareForInsights */);\n        // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n        // we add them to the insights payload here.\n        transport.publishEvent('quality', 'stats-report', 'info', {\n          audioTrackStats: report.remoteAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localAudioTrackStats: report.localAudioTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas);\n          }),\n          localVideoTrackStats: report.localVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas);\n          }),\n          peerConnectionId: report.peerConnectionId,\n          videoTrackStats: report.remoteVideoTrackStats.map(function (trackStat, i) {\n            return addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas);\n          })\n        });\n        // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n        var keys = flatMap(['localAudioTrackStats', 'localVideoTrackStats', 'remoteAudioTrackStats', 'remoteVideoTrackStats'], function (prop) {\n          return report[prop].map(function (_a) {\n            var ssrc = _a.ssrc,\n              trackSid = _a.trackSid;\n            return trackSid + \"+\" + ssrc;\n          });\n        });\n        var movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n        movingAverageDeltaKeysToBeRemoved.forEach(function (key) {\n          return movingAverageDeltas.delete(key);\n        });\n        if (oddPublishCount) {\n          // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n          // payload are assigned default values until the Insights gateway\n          // accepts null values.\n          var activeIceCandidatePair = replaceNullsWithDefaults(response.activeIceCandidatePair, report.peerConnectionId);\n          transport.publishEvent('quality', 'active-ice-candidate-pair', 'info', activeIceCandidatePair);\n        }\n      });\n    }, function () {\n      // Do nothing.\n    });\n  }, intervalMs);\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\nfunction handleSubscriptions(room) {\n  var trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n  room._subscriptionFailures.forEach(function (error, trackSid) {\n    var trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n  trackSidsToTrackSignalings.forEach(function (trackSignaling) {\n    var trackId = room._subscribed.get(trackSignaling.sid);\n    if (!trackId || trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(function (trackReceiver) {\n        return trackSignaling.setTrackTransceiver(trackReceiver);\n      });\n    }\n  });\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var framesEncoded = trackResponse.framesEncoded,\n    packetsSent = trackResponse.packetsSent,\n    totalEncodeTime = trackResponse.totalEncodeTime,\n    totalPacketSendDelay = trackResponse.totalPacketSendDelay;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n  if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n    var trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay') || new MovingAverageDelta();\n    trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n    augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n  }\n  if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n    var trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay') || new MovingAverageDelta();\n    trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n    augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  var estimatedPlayoutTimestamp = trackResponse.estimatedPlayoutTimestamp,\n    framesDecoded = trackResponse.framesDecoded,\n    jitterBufferDelay = trackResponse.jitterBufferDelay,\n    jitterBufferEmittedCount = trackResponse.jitterBufferEmittedCount,\n    totalDecodeTime = trackResponse.totalDecodeTime;\n  var augmentedTrackStats = Object.assign({}, trackStats);\n  var key = trackStats.trackSid + \"+\" + trackStats.ssrc;\n  var trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n  if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n    var trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay') || new MovingAverageDelta();\n    trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n    augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n  }\n  if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n    var trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay') || new MovingAverageDelta();\n    trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n    augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, filterObject(activeIceCandidatePair || {}, null));\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n  return activeIceCandidatePair;\n}\nmodule.exports = RoomV2;","map":{"version":3,"names":["DominantSpeakerSignaling","require","NetworkQualityMonitor","NetworkQualitySignaling","RecordingV2","RoomSignaling","RemoteParticipantV2","StatsReport","TrackPrioritySignaling","TrackSwitchOffSignaling","RenderHintsSignaling","PublisherHintsSignaling","_a","DEFAULT_SESSION_TIMEOUT_SEC","constants","createBandwidthProfilePayload","defer","difference","filterObject","flatMap","oncePerTick","MovingAverageDelta","createTwilioError","STATS_PUBLISH_INTERVAL_MS","RoomV2","_super","__extends","localParticipant","initialState","transport","peerConnectionManager","options","_this","Object","assign","session_timeout","RecordingSignaling","bandwidthProfile","sessionTimeout","statsPublishIntervalMs","setBandwidthProfile","signalingRegion","signaling_region","_b","audio_processors","audioProcessors","setSignalingRegion","includes","push","setAudioProcessors","setIceReconnectTimeout","call","sid","name","getTrackReceiver","id","_getTrackReceiver","log","_log","defineProperties","_disconnectedParticipantRevisions","value","Map","_NetworkQualityMonitor","_lastBandwidthProfileRevision","bandwidthProfileRevision","writable","_mediaStatesWarningsRevision","_networkQualityMonitor","_networkQualityConfiguration","networkQualityConfiguration","_peerConnectionManager","_published","_publishedRevision","_RemoteParticipantV2","_subscribed","_subscribedRevision","_subscriptionFailures","_dominantSpeakerSignaling","_networkQualitySignaling","_renderHintsSignaling","_publisherHintsSignaling","_trackPrioritySignaling","_trackSwitchOffSignaling","_pendingSwitchOffStates","_transport","_trackReceiverDeferreds","mediaRegion","enumerable","media_region","_initTrackSwitchOffSignaling","_initDominantSpeakerSignaling","_initNetworkQualityMonitorSignaling","_initPublisherHintSignaling","handleLocalParticipantEvents","handlePeerConnectionEvents","handleTransportEvents","periodicallyPublishStats","_update","setEffectiveAdaptiveSimulcast","isSetup","defineProperty","prototype","get","connectionState","state","iceConnectionState","_deleteTrackReceiverDeferred","delete","_getOrCreateTrackReceiverDeferred","deferred","trackReceivers","getTrackReceivers","trackReceiver","find","readyState","resolve","set","_addTrackReceiver","_disconnect","error","didDisconnect","_teardownNetworkQualityMonitor","disconnect","close","tracks","forEach","track","publishFailed","Error","promise","then","_getInitialTrackSwitchOffState","trackSid","initiallySwitchedOff","warn","_getTrackSidsToTrackSignalings","trackSidsToTrackSignalings","participants","participant","Array","from","_getOrCreateRemoteParticipant","participantState","self","priority","sendTrackPriorityUpdate","hint","setTrackHint","clearTrackHint","on","stateChanged","removeListener","revision","connectParticipant","_getState","getState","_maybeAddBandwidthProfile","update","bandwidth_profile","_publishNewLocalParticipantState","publish","_publishPeerConnectionState","peerConnectionState","peer_connections","roomState","subscribed","trackState","has","subscribedTrackSids_1","Set","filter","map","trackId","participantsToKeep","disconnectedParticipantRevision","add","type","handleSubscriptions","recording","published","connect","identity","mediaSignaling","channel","media_signaling","setup","label","states","updateMediaStates","hints","Promise","all","setPublisherHint","encodings","result","hintResponses","sendHintResponse","handleReplaced","kind","trackTransceiver","sendTrackReplaced","values","tracksOff","tracksOn","debug","trackUpdates_1","isOn","setSwitchedOff","ex","setDominantSpeaker","loudestParticipantSid","networkQualityMonitor","setNetworkQualityLevel","level","levels","remoteLevels","start","stop","getStats","responses","__read","response","localAudioTrackStats","filterAndAddLocalTrackSids","localVideoTrackStats","remoteAudioTrackStats","filterAndAddRemoteTrackSids","remoteVideoTrackStats","filterAndAddTrackSids","idToSid","trackStats","reduce","trackStat","concat","roomV2","localTrackStats","remoteTrackStats","entries","localParticipantUpdated","renegotiate","trackSenders","trackV2","setTrackSenders","signalingConnectionState","reconnecting","onDescription","description","dequeue","onCandidates","candidates","bind","emit","networkQualityLevel","intervalMs","movingAverageDeltas","oddPublishCount","interval","setInterval","stats","report","publishEvent","audioTrackStats","i","addAVSyncMetricsToRemoteTrackStats","addAVSyncMetricsToLocalTrackStats","peerConnectionId","videoTrackStats","keys","prop","ssrc","movingAverageDeltaKeysToBeRemoved","key","activeIceCandidatePair","replaceNullsWithDefaults","onStateChanged","clearInterval","room","trackSignaling","subscribeFailed","code","message","isSubscribed","setTrackTransceiver","trackResponse","framesEncoded","packetsSent","totalEncodeTime","totalPacketSendDelay","augmentedTrackStats","trackMovingAverageDeltas","trackAvgEncodeDelayMovingAverageDelta","putSample","avgEncodeDelay","Math","round","trackAvgPacketSendDelayMovingAverageDelta","avgPacketSendDelay","estimatedPlayoutTimestamp","framesDecoded","jitterBufferDelay","jitterBufferEmittedCount","totalDecodeTime","trackAvgDecodeDelayMovingAverageDelta","avgDecodeDelay","trackAvgJitterBufferDelayMovingAverageDelta","avgJitterBufferDelay","availableIncomingBitrate","availableOutgoingBitrate","bytesReceived","bytesSent","consentRequestsSent","currentRoundTripTime","lastPacketReceivedTimestamp","lastPacketSentTimestamp","nominated","readable","requestsReceived","requestsSent","responsesReceived","responsesSent","retransmissionsReceived","retransmissionsSent","totalRoundTripTime","transportId","localCandidate","candidateType","deleted","ip","port","protocol","url","remoteCandidate","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/signaling/v2/room.js"],"sourcesContent":["/* eslint-disable no-console */\n'use strict';\n\nconst DominantSpeakerSignaling = require('./dominantspeakersignaling');\nconst NetworkQualityMonitor = require('./networkqualitymonitor');\nconst NetworkQualitySignaling = require('./networkqualitysignaling');\nconst RecordingV2 = require('./recording');\nconst RoomSignaling = require('../room');\nconst RemoteParticipantV2 = require('./remoteparticipant');\nconst StatsReport = require('../../stats/statsreport');\nconst TrackPrioritySignaling = require('./trackprioritysignaling');\nconst TrackSwitchOffSignaling = require('./trackswitchoffsignaling');\nconst RenderHintsSignaling = require('./renderhintssignaling');\nconst PublisherHintsSignaling = require('./publisherhintsignaling.js');\n\n\nconst {\n  constants: { DEFAULT_SESSION_TIMEOUT_SEC },\n  createBandwidthProfilePayload,\n  defer,\n  difference,\n  filterObject,\n  flatMap,\n  oncePerTick\n} = require('../../util');\n\nconst MovingAverageDelta = require('../../util/movingaveragedelta');\nconst { createTwilioError } = require('../../util/twilio-video-errors');\n\nconst STATS_PUBLISH_INTERVAL_MS = 10000;\n\n/**\n * @extends RoomSignaling\n */\nclass RoomV2 extends RoomSignaling {\n  constructor(localParticipant, initialState, transport, peerConnectionManager, options) {\n    initialState.options = Object.assign({\n      session_timeout: DEFAULT_SESSION_TIMEOUT_SEC\n    }, initialState.options);\n\n    options = Object.assign({\n      DominantSpeakerSignaling,\n      NetworkQualityMonitor,\n      NetworkQualitySignaling,\n      RecordingSignaling: RecordingV2,\n      RemoteParticipantV2,\n      TrackPrioritySignaling,\n      TrackSwitchOffSignaling,\n      bandwidthProfile: null,\n      sessionTimeout: initialState.options.session_timeout * 1000,\n      statsPublishIntervalMs: STATS_PUBLISH_INTERVAL_MS\n    }, options);\n\n    localParticipant.setBandwidthProfile(options.bandwidthProfile);\n\n    const { options: { signaling_region: signalingRegion, audio_processors: audioProcessors = [] } } = initialState;\n    localParticipant.setSignalingRegion(signalingRegion);\n\n\n    if (audioProcessors.includes('krisp')) {\n      // Note(mpatwardhan): we add rnnoise as allowed_processor to enable testing our pipeline e2e.\n      audioProcessors.push('rnnoise');\n    }\n\n    localParticipant.setAudioProcessors(audioProcessors);\n\n    peerConnectionManager.setIceReconnectTimeout(options.sessionTimeout);\n\n    super(localParticipant, initialState.sid, initialState.name, options);\n\n    const getTrackReceiver = id => this._getTrackReceiver(id);\n    const log = this._log;\n\n    Object.defineProperties(this, {\n      _disconnectedParticipantRevisions: {\n        value: new Map()\n      },\n      _NetworkQualityMonitor: {\n        value: options.NetworkQualityMonitor\n      },\n      _lastBandwidthProfileRevision: {\n        value: localParticipant.bandwidthProfileRevision,\n        writable: true\n      },\n      _mediaStatesWarningsRevision: {\n        value: 0,\n        writable: true\n      },\n      _networkQualityMonitor: {\n        value: null,\n        writable: true\n      },\n      _networkQualityConfiguration: {\n        value: localParticipant.networkQualityConfiguration\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _published: {\n        value: new Map()\n      },\n      _publishedRevision: {\n        value: 0,\n        writable: true\n      },\n      _RemoteParticipantV2: {\n        value: options.RemoteParticipantV2\n      },\n      _subscribed: {\n        value: new Map()\n      },\n      _subscribedRevision: {\n        value: 0,\n        writable: true\n      },\n      _subscriptionFailures: {\n        value: new Map()\n      },\n      _dominantSpeakerSignaling: {\n        value: new options.DominantSpeakerSignaling(getTrackReceiver, { log })\n      },\n      _networkQualitySignaling: {\n        value: new options.NetworkQualitySignaling(\n          getTrackReceiver,\n          localParticipant.networkQualityConfiguration,\n          { log }\n        )\n      },\n      _renderHintsSignaling: {\n        value: new RenderHintsSignaling(getTrackReceiver, { log }),\n      },\n      _publisherHintsSignaling: {\n        value: new PublisherHintsSignaling(getTrackReceiver, { log }),\n      },\n      _trackPrioritySignaling: {\n        value: new options.TrackPrioritySignaling(getTrackReceiver, { log }),\n      },\n      _trackSwitchOffSignaling: {\n        value: new options.TrackSwitchOffSignaling(getTrackReceiver, { log }),\n      },\n      _pendingSwitchOffStates: {\n        value: new Map()\n      },\n      _transport: {\n        value: transport\n      },\n      _trackReceiverDeferreds: {\n        value: new Map()\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: initialState.options.media_region || null\n      }\n    });\n\n    this._initTrackSwitchOffSignaling();\n    this._initDominantSpeakerSignaling();\n    this._initNetworkQualityMonitorSignaling();\n    this._initPublisherHintSignaling();\n\n    handleLocalParticipantEvents(this, localParticipant);\n    handlePeerConnectionEvents(this, peerConnectionManager);\n    handleTransportEvents(this, transport);\n    periodicallyPublishStats(this, transport, options.statsPublishIntervalMs);\n\n    this._update(initialState);\n\n    // NOTE(mpatwardhan) after initial state we know if publisher_hints are enabled or not\n    // if they are not enabled. we need to undo simulcast that was enabled with initial offer.\n    this._peerConnectionManager.setEffectiveAdaptiveSimulcast(this._publisherHintsSignaling.isSetup);\n  }\n\n  /**\n   * The PeerConnection state.\n   * @property {RTCPeerConnectionState}\n   */\n  get connectionState() {\n    return this._peerConnectionManager.connectionState;\n  }\n\n  /**\n   * The Signaling Connection State.\n   * @property {string} - \"connected\", \"reconnecting\", \"disconnected\"\n   */\n  get signalingConnectionState() {\n    return this._transport.state === 'syncing'\n      ? 'reconnecting'\n      : this._transport.state;\n  }\n\n  /**\n   * The Ice Connection State.\n   * @property {RTCIceConnectionState}\n   */\n  get iceConnectionState() {\n    return this._peerConnectionManager.iceConnectionState;\n  }\n\n  /**\n   * @private\n   */\n  _deleteTrackReceiverDeferred(id) {\n    return this._trackReceiverDeferreds.delete(id);\n  }\n\n  /**\n   * @private\n   */\n  _getOrCreateTrackReceiverDeferred(id) {\n    const deferred = this._trackReceiverDeferreds.get(id) || defer();\n    const trackReceivers = this._peerConnectionManager.getTrackReceivers();\n\n    // NOTE(mmalavalli): In Firefox, there can be instances where a MediaStreamTrack\n    // for the given Track ID already exists, for example, when a Track is removed\n    // and added back. If that is the case, then we should resolve 'deferred'.\n    const trackReceiver = trackReceivers.find(trackReceiver => trackReceiver.id === id && trackReceiver.readyState !== 'ended');\n\n    if (trackReceiver) {\n      deferred.resolve(trackReceiver);\n    } else {\n      // NOTE(mmalavalli): Only add the 'deferred' to the map if it's not\n      // resolved. This will prevent old copies of the MediaStreamTrack from\n      // being used when the remote peer removes and re-adds a MediaStreamTrack.\n      this._trackReceiverDeferreds.set(id, deferred);\n    }\n\n    return deferred;\n  }\n\n  /**\n   * @private\n   */\n  _addTrackReceiver(trackReceiver) {\n    const deferred = this._getOrCreateTrackReceiverDeferred(trackReceiver.id);\n    deferred.resolve(trackReceiver);\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _disconnect(error) {\n    const didDisconnect = super._disconnect.call(this, error);\n    if (didDisconnect) {\n      this._teardownNetworkQualityMonitor();\n      this._transport.disconnect();\n      this._peerConnectionManager.close();\n    }\n\n    this.localParticipant.tracks.forEach(track => {\n      track.publishFailed(error || new Error('LocalParticipant disconnected'));\n    });\n\n    return didDisconnect;\n  }\n\n  /**\n   * @private\n   */\n  _getTrackReceiver(id) {\n    return this._getOrCreateTrackReceiverDeferred(id).promise.then(trackReceiver => {\n      this._deleteTrackReceiverDeferred(id);\n      return trackReceiver;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _getInitialTrackSwitchOffState(trackSid) {\n    const initiallySwitchedOff = this._pendingSwitchOffStates.get(trackSid) || false;\n    this._pendingSwitchOffStates.delete(trackSid);\n    if (initiallySwitchedOff) {\n      this._log.warn(`[${trackSid}] was initially switched off! `);\n    }\n    return initiallySwitchedOff;\n  }\n\n\n  /**\n   * @private\n   */\n  _getTrackSidsToTrackSignalings() {\n    const trackSidsToTrackSignalings = flatMap(this.participants, participant => Array.from(participant.tracks));\n    return new Map(trackSidsToTrackSignalings);\n  }\n\n  /**\n   * @private\n   */\n  _getOrCreateRemoteParticipant(participantState) {\n    const RemoteParticipantV2 = this._RemoteParticipantV2;\n    let participant = this.participants.get(participantState.sid);\n    const self = this;\n    if (!participant) {\n      participant = new RemoteParticipantV2(\n        participantState,\n        trackSid => this._getInitialTrackSwitchOffState(trackSid),\n        (trackSid, priority) => this._trackPrioritySignaling.sendTrackPriorityUpdate(trackSid, 'subscribe', priority),\n        (trackSid, hint) => this._renderHintsSignaling.setTrackHint(trackSid, hint),\n        trackSid => this._renderHintsSignaling.clearTrackHint(trackSid)\n      );\n      participant.on('stateChanged', function stateChanged(state) {\n        if (state === 'disconnected') {\n          participant.removeListener('stateChanged', stateChanged);\n          self.participants.delete(participant.sid);\n          self._disconnectedParticipantRevisions.set(participant.sid, participant.revision);\n        }\n      });\n      this.connectParticipant(participant);\n    }\n    return participant;\n  }\n\n  /**\n   * @private\n   */\n  _getState() {\n    return {\n      participant: this.localParticipant.getState()\n    };\n  }\n\n  /**\n   * @private\n   */\n  _maybeAddBandwidthProfile(update) {\n    const { bandwidthProfile, bandwidthProfileRevision } = this.localParticipant;\n    if (bandwidthProfile && this._lastBandwidthProfileRevision < bandwidthProfileRevision) {\n      this._lastBandwidthProfileRevision = bandwidthProfileRevision;\n      return Object.assign({\n        bandwidth_profile: createBandwidthProfilePayload(bandwidthProfile)\n      }, update);\n    }\n    return update;\n  }\n  /**\n   * @private\n   */\n  _publishNewLocalParticipantState() {\n    this._transport.publish(this._maybeAddBandwidthProfile(this._getState()));\n  }\n\n  /**\n   * @private\n   */\n  _publishPeerConnectionState(peerConnectionState) {\n    /* eslint camelcase:0 */\n    this._transport.publish(Object.assign({\n      peer_connections: [peerConnectionState]\n    }, this._getState()));\n  }\n\n  /**\n   * @private\n   */\n  _update(roomState) {\n    if (roomState.subscribed && roomState.subscribed.revision > this._subscribedRevision) {\n      this._subscribedRevision = roomState.subscribed.revision;\n      roomState.subscribed.tracks.forEach(trackState => {\n        if (trackState.id) {\n          this._subscriptionFailures.delete(trackState.sid);\n          this._subscribed.set(trackState.sid, trackState.id);\n        } else if (trackState.error && !this._subscriptionFailures.has(trackState.sid)) {\n          this._subscriptionFailures.set(trackState.sid, trackState.error);\n        }\n      });\n\n      const subscribedTrackSids = new Set(roomState.subscribed.tracks\n        .filter(trackState => !!trackState.id)\n        .map(trackState => trackState.sid));\n\n      this._subscribed.forEach((trackId, trackSid) => {\n        if (!subscribedTrackSids.has(trackSid)) {\n          this._subscribed.delete(trackSid);\n        }\n      });\n    }\n\n    const participantsToKeep = new Set();\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    (roomState.participants || []).forEach(participantState => {\n      if (participantState.sid === this.localParticipant.sid) {\n        return;\n      }\n\n      // NOTE(mmalavalli): If the incoming revision for a disconnected Participant is less than or\n      // equal to the revision when it was disconnected, then the state is old and can be ignored.\n      // Otherwise, the Participant was most likely disconnected in a Large Group Room when it\n      // stopped publishing media, and hence needs to be re-added.\n      const disconnectedParticipantRevision = this._disconnectedParticipantRevisions.get(participantState.sid);\n      if (disconnectedParticipantRevision && participantState.revision <= disconnectedParticipantRevision) {\n        return;\n      }\n\n      if (disconnectedParticipantRevision) {\n        this._disconnectedParticipantRevisions.delete(participantState.sid);\n      }\n      const participant = this._getOrCreateRemoteParticipant(participantState);\n      participant.update(participantState);\n      participantsToKeep.add(participant);\n    });\n\n    if (roomState.type === 'synced') {\n      this.participants.forEach(participant => {\n        if (!participantsToKeep.has(participant)) {\n          participant.disconnect();\n        }\n      });\n    }\n\n    handleSubscriptions(this);\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO(mroberts): Remove me once the Server is fixed.\n    /* eslint camelcase:0 */\n    if (roomState.peer_connections) {\n      this._peerConnectionManager.update(roomState.peer_connections, roomState.type === 'synced');\n    }\n\n    if (roomState.recording) {\n      this.recording.update(roomState.recording);\n    }\n\n    if (roomState.published && roomState.published.revision > this._publishedRevision) {\n      this._publishedRevision = roomState.published.revision;\n      roomState.published.tracks.forEach(track => {\n        if (track.sid) {\n          this._published.set(track.id, track.sid);\n        }\n      });\n      this.localParticipant.update(roomState.published);\n    }\n\n    if (roomState.participant) {\n      this.localParticipant.connect(\n        roomState.participant.sid,\n        roomState.participant.identity);\n    }\n\n    [\n      this._dominantSpeakerSignaling,\n      this._networkQualitySignaling,\n      this._trackPrioritySignaling,\n      this._trackSwitchOffSignaling,\n      this._renderHintsSignaling,\n      this._publisherHintsSignaling\n    ].forEach(mediaSignaling => {\n      const channel = mediaSignaling.channel;\n      if (!mediaSignaling.isSetup\n        && roomState.media_signaling\n        && roomState.media_signaling[channel]\n        && roomState.media_signaling[channel].transport\n        && roomState.media_signaling[channel].transport.type === 'data-channel') {\n        mediaSignaling.setup(roomState.media_signaling[channel].transport.label);\n      }\n    });\n\n    if (roomState.type === 'warning' && roomState.states &&\n      roomState.states.revision > this._mediaStatesWarningsRevision) {\n      this._mediaStatesWarningsRevision = roomState.states.revision;\n      this.localParticipant.updateMediaStates(roomState.states);\n    }\n\n    return this;\n  }\n\n  _initPublisherHintSignaling() {\n    this._publisherHintsSignaling.on('updated', (hints, id) => {\n      Promise.all(hints.map(hint => {\n        return this.localParticipant.setPublisherHint(hint.track, hint.encodings).then(result => {\n          return { track: hint.track, result };\n        });\n      })).then(hintResponses => {\n        this._publisherHintsSignaling.sendHintResponse({ id, hints: hintResponses });\n      });\n    });\n\n    const handleReplaced = track => {\n      if (track.kind === 'video') {\n        track.trackTransceiver.on('replaced', () => {\n          this._publisherHintsSignaling.sendTrackReplaced({ trackSid: track.sid });\n        });\n      }\n    };\n\n    // hook up for any existing and new tracks getting replaced.\n    Array.from(this.localParticipant.tracks.values()).forEach(track => handleReplaced(track));\n    this.localParticipant.on('trackAdded', track => handleReplaced(track));\n  }\n\n  _initTrackSwitchOffSignaling() {\n    this._trackSwitchOffSignaling.on('updated', (tracksOff, tracksOn) => {\n      try {\n        this._log.debug('received trackSwitch: ', { tracksOn, tracksOff });\n        const trackUpdates = new Map();\n        tracksOn.forEach(trackSid => trackUpdates.set(trackSid, true));\n        tracksOff.forEach(trackSid => {\n          if (trackUpdates.get(trackSid)) {\n            // NOTE(mpatwardhan): This means that VIDEO-3762 has been reproduced.\n            this._log.warn(`${trackSid} is DUPLICATED in both tracksOff and tracksOn list`);\n          }\n          trackUpdates.set(trackSid, false);\n        });\n        this.participants.forEach(participant => {\n          participant.tracks.forEach(track => {\n            const isOn = trackUpdates.get(track.sid);\n            if (typeof isOn !== 'undefined') {\n              track.setSwitchedOff(!isOn);\n              trackUpdates.delete(track.sid);\n            }\n          });\n        });\n        // NOTE(mpatwardhan): Cache any notification about the tracks that we do not yet know about.\n        trackUpdates.forEach((isOn, trackSid) => this._pendingSwitchOffStates.set(trackSid, !isOn));\n      } catch (ex) {\n        this._log.error('error processing track switch off:', ex);\n      }\n    });\n  }\n\n  _initDominantSpeakerSignaling() {\n    this._dominantSpeakerSignaling.on('updated', () => this.setDominantSpeaker(this._dominantSpeakerSignaling.loudestParticipantSid));\n  }\n\n  _initNetworkQualityMonitorSignaling() {\n    this._networkQualitySignaling.on('ready', () => {\n      const networkQualityMonitor = new this._NetworkQualityMonitor(this._peerConnectionManager, this._networkQualitySignaling);\n      this._networkQualityMonitor = networkQualityMonitor;\n      networkQualityMonitor.on('updated', () => {\n        if (this.iceConnectionState === 'failed') {\n          return;\n        }\n        this.localParticipant.setNetworkQualityLevel(\n          networkQualityMonitor.level,\n          networkQualityMonitor.levels);\n        this.participants.forEach(participant => {\n          const levels = networkQualityMonitor.remoteLevels.get(participant.sid);\n          if (levels) {\n            participant.setNetworkQualityLevel(levels.level, levels);\n          }\n        });\n      });\n      networkQualityMonitor.start();\n    });\n    this._networkQualitySignaling.on('teardown', () => this._teardownNetworkQualityMonitor());\n  }\n\n  _teardownNetworkQualityMonitor() {\n    if (this._networkQualityMonitor) {\n      this._networkQualityMonitor.stop();\n      this._networkQualityMonitor = null;\n    }\n  }\n\n  /**\n   * Get the {@link RoomV2}'s media statistics.\n   * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n   */\n  getStats() {\n    return this._peerConnectionManager.getStats().then(responses =>\n      new Map(Array.from(responses).map(([id, response]) =>\n        [id, Object.assign({}, response, {\n          localAudioTrackStats: filterAndAddLocalTrackSids(this, response.localAudioTrackStats),\n          localVideoTrackStats: filterAndAddLocalTrackSids(this, response.localVideoTrackStats),\n          remoteAudioTrackStats: filterAndAddRemoteTrackSids(this, response.remoteAudioTrackStats),\n          remoteVideoTrackStats: filterAndAddRemoteTrackSids(this, response.remoteVideoTrackStats)\n        })]\n      ))\n    );\n  }\n}\n\n/**\n * Filter out {@link TrackStats} that aren't in the collection while also\n * stamping their Track SIDs.\n * @param {Map<ID, SID>} idToSid\n * @param {Array<TrackStats>} trackStats\n * @returns {Array<TrackStats>}\n */\nfunction filterAndAddTrackSids(idToSid, trackStats) {\n  return trackStats.reduce((trackStats, trackStat) => {\n    const trackSid = idToSid.get(trackStat.trackId);\n    return trackSid\n      ? [Object.assign({}, trackStat, { trackSid })].concat(trackStats)\n      : trackStats;\n  }, []);\n}\n\n/**\n * Filter out {@link LocalTrackStats} that aren't currently published while also\n * stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<LocalTrackStats>} localTrackStats\n * @returns {Array<LocalTrackStats>}\n */\nfunction filterAndAddLocalTrackSids(roomV2, localTrackStats) {\n  return filterAndAddTrackSids(roomV2._published, localTrackStats);\n}\n\n/**\n * Filter out {@link RemoteTrackStats} that aren't currently subscribed while\n * also stamping their Track SIDs.\n * @param {RoomV2} roomV2\n * @param {Array<RemoteTrackStats>} remoteTrackStats\n * @returns {Array<RemoteTrackStats>}\n */\nfunction filterAndAddRemoteTrackSids(roomV2, remoteTrackStats) {\n  const idToSid = new Map(Array.from(roomV2._subscribed.entries()).map(([sid, id]) => [id, sid]));\n  return filterAndAddTrackSids(idToSid, remoteTrackStats);\n}\n\n/**\n * @typedef {object} RoomV2#Representation\n * @property {string} name\n * @property {LocalParticipantV2#Representation} participant\n * @property {?Array<RemoteParticipantV2#Representation>} participants\n * @property {?Array<PeerConnectionV2#Representation>} peer_connections\n * @property {?RecordingV2#Representation} recording\n * @property {string} sid\n */\n\nfunction handleLocalParticipantEvents(roomV2, localParticipant) {\n  const localParticipantUpdated = oncePerTick(() => {\n    roomV2._publishNewLocalParticipantState();\n  });\n\n  const renegotiate = oncePerTick(() => {\n    const trackSenders = flatMap(localParticipant.tracks, trackV2 => trackV2.trackTransceiver);\n    roomV2._peerConnectionManager.setTrackSenders(trackSenders);\n  });\n\n  localParticipant.on('trackAdded', renegotiate);\n  localParticipant.on('trackRemoved', renegotiate);\n  localParticipant.on('updated', localParticipantUpdated);\n\n  roomV2.on('stateChanged', function stateChanged(state) {\n    if (state === 'disconnected') {\n      localParticipant.removeListener('trackAdded', renegotiate);\n      localParticipant.removeListener('trackRemoved', renegotiate);\n      localParticipant.removeListener('updated', localParticipantUpdated);\n      roomV2.removeListener('stateChanged', stateChanged);\n      localParticipant.disconnect();\n    }\n  });\n\n  roomV2.on('signalingConnectionStateChanged', () => {\n    const { localParticipant, signalingConnectionState } = roomV2;\n    const { identity, sid } = localParticipant;\n    switch (signalingConnectionState) {\n      case 'connected':\n        localParticipant.connect(sid, identity);\n        break;\n      case 'reconnecting':\n        localParticipant.reconnecting();\n        break;\n    }\n  });\n}\n\nfunction handlePeerConnectionEvents(roomV2, peerConnectionManager) {\n  peerConnectionManager.on('description', function onDescription(description) {\n    roomV2._publishPeerConnectionState(description);\n  });\n  peerConnectionManager.dequeue('description');\n\n  peerConnectionManager.on('candidates', function onCandidates(candidates) {\n    roomV2._publishPeerConnectionState(candidates);\n  });\n  peerConnectionManager.dequeue('candidates');\n\n  peerConnectionManager.on('trackAdded', roomV2._addTrackReceiver.bind(roomV2));\n  peerConnectionManager.dequeue('trackAdded');\n  peerConnectionManager.getTrackReceivers().forEach(roomV2._addTrackReceiver, roomV2);\n\n  peerConnectionManager.on('connectionStateChanged', () => {\n    roomV2.emit('connectionStateChanged');\n  });\n\n  peerConnectionManager.on('iceConnectionStateChanged', () => {\n    roomV2.emit('iceConnectionStateChanged');\n    if (roomV2.iceConnectionState === 'failed') {\n      if (roomV2.localParticipant.networkQualityLevel !== null) {\n        roomV2.localParticipant.setNetworkQualityLevel(0);\n      }\n      roomV2.participants.forEach(participant => {\n        if (participant.networkQualityLevel !== null) {\n          participant.setNetworkQualityLevel(0);\n        }\n      });\n    }\n  });\n}\n\nfunction handleTransportEvents(roomV2, transport) {\n  transport.on('message', roomV2._update.bind(roomV2));\n  transport.on('stateChanged', function stateChanged(state, error) {\n    if (state === 'disconnected') {\n      if (roomV2.state !== 'disconnected') {\n        roomV2._disconnect(error);\n      }\n      transport.removeListener('stateChanged', stateChanged);\n    }\n    roomV2.emit('signalingConnectionStateChanged');\n  });\n}\n\n/**\n * Periodically publish {@link StatsReport}s.\n * @private\n * @param {RoomV2} roomV2\n * @param {Transport} transport\n * @param {Number} intervalMs\n */\nfunction periodicallyPublishStats(roomV2, transport, intervalMs) {\n  const movingAverageDeltas = new Map();\n  let oddPublishCount = false;\n  const interval = setInterval(() => {\n    roomV2.getStats().then(stats => {\n      oddPublishCount = !oddPublishCount;\n      stats.forEach((response, id) => {\n        // NOTE(mmalavalli): A StatsReport is used to publish a \"stats-report\"\n        // event instead of using StandardizedStatsResponse directly because\n        // StatsReport will add zeros to properties that do not exist.\n        const report = new StatsReport(id, response, true /* prepareForInsights */);\n\n        // NOTE(mmalavalli): Since A/V sync metrics are not part of the StatsReport class,\n        // we add them to the insights payload here.\n        transport.publishEvent('quality', 'stats-report', 'info', {\n          audioTrackStats: report.remoteAudioTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteAudioTrackStats[i], movingAverageDeltas)),\n          localAudioTrackStats: report.localAudioTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToLocalTrackStats(trackStat, response.localAudioTrackStats[i], movingAverageDeltas)),\n          localVideoTrackStats: report.localVideoTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToLocalTrackStats(trackStat, response.localVideoTrackStats[i], movingAverageDeltas)),\n          peerConnectionId: report.peerConnectionId,\n          videoTrackStats: report.remoteVideoTrackStats.map((trackStat, i) =>\n            addAVSyncMetricsToRemoteTrackStats(trackStat, response.remoteVideoTrackStats[i], movingAverageDeltas)),\n        });\n\n        // NOTE(mmalavalli): Clean up entries for Tracks that are no longer published or subscribed to.\n        const keys = flatMap([\n          'localAudioTrackStats',\n          'localVideoTrackStats',\n          'remoteAudioTrackStats',\n          'remoteVideoTrackStats'\n        ], prop => report[prop].map(({ ssrc, trackSid }) => `${trackSid}+${ssrc}`));\n        const movingAverageDeltaKeysToBeRemoved = difference(Array.from(movingAverageDeltas.keys()), keys);\n        movingAverageDeltaKeysToBeRemoved.forEach(key => movingAverageDeltas.delete(key));\n\n        if (oddPublishCount) {\n          // NOTE(mmalavalli): null properties of the \"active-ice-candidate-pair\"\n          // payload are assigned default values until the Insights gateway\n          // accepts null values.\n          const activeIceCandidatePair = replaceNullsWithDefaults(\n            response.activeIceCandidatePair,\n            report.peerConnectionId);\n\n          transport.publishEvent(\n            'quality',\n            'active-ice-candidate-pair',\n            'info',\n            activeIceCandidatePair);\n        }\n      });\n    }, () => {\n      // Do nothing.\n    });\n  }, intervalMs);\n\n  roomV2.on('stateChanged', function onStateChanged(state) {\n    if (state === 'disconnected') {\n      clearInterval(interval);\n      roomV2.removeListener('stateChanged', onStateChanged);\n    }\n  });\n}\n\nfunction handleSubscriptions(room) {\n  const trackSidsToTrackSignalings = room._getTrackSidsToTrackSignalings();\n\n  room._subscriptionFailures.forEach((error, trackSid) => {\n    const trackSignaling = trackSidsToTrackSignalings.get(trackSid);\n    if (trackSignaling) {\n      room._subscriptionFailures.delete(trackSid);\n      trackSignaling.subscribeFailed(createTwilioError(error.code, error.message));\n    }\n  });\n\n  trackSidsToTrackSignalings.forEach(trackSignaling => {\n    const trackId = room._subscribed.get(trackSignaling.sid);\n    if (!trackId || (trackSignaling.isSubscribed && trackSignaling.trackTransceiver.id !== trackId)) {\n      trackSignaling.setTrackTransceiver(null);\n    }\n    if (trackId) {\n      room._getTrackReceiver(trackId).then(trackReceiver => trackSignaling.setTrackTransceiver(trackReceiver));\n    }\n  });\n}\n\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToLocalTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  const {\n    framesEncoded,\n    packetsSent,\n    totalEncodeTime,\n    totalPacketSendDelay\n  } = trackResponse;\n  const augmentedTrackStats = Object.assign({}, trackStats);\n  const key = `${trackStats.trackSid}+${trackStats.ssrc}`;\n  const trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof totalEncodeTime === 'number' && typeof framesEncoded === 'number') {\n    const trackAvgEncodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgEncodeDelay')\n      || new MovingAverageDelta();\n    trackAvgEncodeDelayMovingAverageDelta.putSample(totalEncodeTime * 1000, framesEncoded);\n    augmentedTrackStats.avgEncodeDelay = Math.round(trackAvgEncodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgEncodeDelay', trackAvgEncodeDelayMovingAverageDelta);\n  }\n  if (typeof totalPacketSendDelay === 'number' && typeof packetsSent === 'number') {\n    const trackAvgPacketSendDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgPacketSendDelay')\n      || new MovingAverageDelta();\n    trackAvgPacketSendDelayMovingAverageDelta.putSample(totalPacketSendDelay * 1000, packetsSent);\n    augmentedTrackStats.avgPacketSendDelay = Math.round(trackAvgPacketSendDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgPacketSendDelay', trackAvgPacketSendDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\n/**\n * NOTE(mmalavalli): Since A/V sync metrics are not part of the public StatsReport class, we add them\n * only for reporting purposes.\n * @private\n */\nfunction addAVSyncMetricsToRemoteTrackStats(trackStats, trackResponse, movingAverageDeltas) {\n  const {\n    estimatedPlayoutTimestamp,\n    framesDecoded,\n    jitterBufferDelay,\n    jitterBufferEmittedCount,\n    totalDecodeTime\n  } = trackResponse;\n  const augmentedTrackStats = Object.assign({}, trackStats);\n  const key = `${trackStats.trackSid}+${trackStats.ssrc}`;\n  const trackMovingAverageDeltas = movingAverageDeltas.get(key) || new Map();\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    augmentedTrackStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n  if (typeof framesDecoded === 'number' && typeof totalDecodeTime === 'number') {\n    const trackAvgDecodeDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgDecodeDelay')\n      || new MovingAverageDelta();\n    trackAvgDecodeDelayMovingAverageDelta.putSample(totalDecodeTime * 1000, framesDecoded);\n    augmentedTrackStats.avgDecodeDelay = Math.round(trackAvgDecodeDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgDecodeDelay', trackAvgDecodeDelayMovingAverageDelta);\n  }\n  if (typeof jitterBufferDelay === 'number' && typeof jitterBufferEmittedCount === 'number') {\n    const trackAvgJitterBufferDelayMovingAverageDelta = trackMovingAverageDeltas.get('avgJitterBufferDelay')\n      || new MovingAverageDelta();\n    trackAvgJitterBufferDelayMovingAverageDelta.putSample(jitterBufferDelay * 1000, jitterBufferEmittedCount);\n    augmentedTrackStats.avgJitterBufferDelay = Math.round(trackAvgJitterBufferDelayMovingAverageDelta.get());\n    trackMovingAverageDeltas.set('avgJitterBufferDelay', trackAvgJitterBufferDelayMovingAverageDelta);\n  }\n  movingAverageDeltas.set(key, trackMovingAverageDeltas);\n  return augmentedTrackStats;\n}\n\nfunction replaceNullsWithDefaults(activeIceCandidatePair, peerConnectionId) {\n  activeIceCandidatePair = Object.assign({\n    availableIncomingBitrate: 0,\n    availableOutgoingBitrate: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    consentRequestsSent: 0,\n    currentRoundTripTime: 0,\n    lastPacketReceivedTimestamp: 0,\n    lastPacketSentTimestamp: 0,\n    nominated: false,\n    peerConnectionId: peerConnectionId,\n    priority: 0,\n    readable: false,\n    requestsReceived: 0,\n    requestsSent: 0,\n    responsesReceived: 0,\n    responsesSent: 0,\n    retransmissionsReceived: 0,\n    retransmissionsSent: 0,\n    state: 'failed',\n    totalRoundTripTime: 0,\n    transportId: '',\n    writable: false\n  }, filterObject(activeIceCandidatePair || {}, null));\n\n  activeIceCandidatePair.localCandidate = Object.assign({\n    candidateType: 'host',\n    deleted: false,\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.localCandidate || {}, null));\n\n  activeIceCandidatePair.remoteCandidate = Object.assign({\n    candidateType: 'host',\n    ip: '',\n    port: 0,\n    priority: 0,\n    protocol: 'udp',\n    url: ''\n  }, filterObject(activeIceCandidatePair.remoteCandidate || {}, null));\n\n  return activeIceCandidatePair;\n}\n\nmodule.exports = RoomV2;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}