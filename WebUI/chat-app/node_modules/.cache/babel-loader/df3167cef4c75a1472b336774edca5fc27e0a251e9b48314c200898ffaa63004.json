{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar DataTrackTransceiver = require('./transceiver');\nvar DataTransport = require('./transport');\n/**\n * A {@link DataTrackReceiver} represents a {@link DataTrackTransceiver} over\n * which data can be received. Internally, it users a single RTCDataChannel to\n * receive data.\n * @extends DataTrackTransceiver\n * @emits DataTrackReceiver#message\n * @emits DataTrackReceiver#close\n */\nvar DataTrackReceiver = /** @class */function (_super) {\n  __extends(DataTrackReceiver, _super);\n  /**\n   * Construct an {@link DataTrackReceiver}.\n   * @param {RTCDataChannel} dataChannel\n   */\n  function DataTrackReceiver(dataChannel) {\n    var _this = _super.call(this, dataChannel.label, dataChannel.maxPacketLifeTime, dataChannel.maxRetransmits, dataChannel.ordered) || this;\n    Object.defineProperties(_this, {\n      _dataChannel: {\n        value: dataChannel\n      }\n    });\n    // NOTE(mmalavalli): In Firefox, the default value for \"binaryType\" is \"blob\".\n    // So, we set it to \"arraybuffer\" to ensure that it is consistent with Chrome\n    // and Safari.\n    dataChannel.binaryType = 'arraybuffer';\n    dataChannel.addEventListener('message', function (event) {\n      _this.emit('message', event.data);\n    });\n    dataChannel.addEventListener('close', function () {\n      _this.emit('close');\n    });\n    return _this;\n  }\n  DataTrackReceiver.prototype.stop = function () {\n    this._dataChannel.close();\n    _super.prototype.stop.call(this);\n  };\n  /**\n   * Create a {@link DataTransport} from the {@link DataTrackReceiver}.\n   * @returns {DataTransport}\n   */\n  DataTrackReceiver.prototype.toDataTransport = function () {\n    return new DataTransport(this._dataChannel);\n  };\n  return DataTrackReceiver;\n}(DataTrackTransceiver);\n/**\n * @event DataTrackReceiver#message\n * @param {string|ArrayBuffer} data\n */\n/**\n * @event DataTrackReceiver#close\n */\nmodule.exports = DataTrackReceiver;","map":{"version":3,"names":["DataTrackTransceiver","require","DataTransport","DataTrackReceiver","_super","__extends","dataChannel","_this","call","label","maxPacketLifeTime","maxRetransmits","ordered","Object","defineProperties","_dataChannel","value","binaryType","addEventListener","event","emit","data","prototype","stop","close","toDataTransport","module","exports"],"sources":["/home/denis/RiderProjects/ChatRoulette/WebUI/chat-app/node_modules/twilio-video/lib/data/receiver.js"],"sourcesContent":["'use strict';\n\nconst DataTrackTransceiver = require('./transceiver');\nconst DataTransport = require('./transport');\n\n/**\n * A {@link DataTrackReceiver} represents a {@link DataTrackTransceiver} over\n * which data can be received. Internally, it users a single RTCDataChannel to\n * receive data.\n * @extends DataTrackTransceiver\n * @emits DataTrackReceiver#message\n * @emits DataTrackReceiver#close\n */\nclass DataTrackReceiver extends DataTrackTransceiver {\n  /**\n   * Construct an {@link DataTrackReceiver}.\n   * @param {RTCDataChannel} dataChannel\n   */\n  constructor(dataChannel) {\n    super(\n      dataChannel.label,\n      dataChannel.maxPacketLifeTime,\n      dataChannel.maxRetransmits,\n      dataChannel.ordered\n    );\n\n    Object.defineProperties(this, {\n      _dataChannel: {\n        value: dataChannel\n      }\n    });\n\n    // NOTE(mmalavalli): In Firefox, the default value for \"binaryType\" is \"blob\".\n    // So, we set it to \"arraybuffer\" to ensure that it is consistent with Chrome\n    // and Safari.\n    dataChannel.binaryType = 'arraybuffer';\n\n    dataChannel.addEventListener('message', event => {\n      this.emit('message', event.data);\n    });\n\n    dataChannel.addEventListener('close', () => {\n      this.emit('close');\n    });\n  }\n\n  stop() {\n    this._dataChannel.close();\n    super.stop();\n  }\n\n  /**\n   * Create a {@link DataTransport} from the {@link DataTrackReceiver}.\n   * @returns {DataTransport}\n   */\n  toDataTransport() {\n    return new DataTransport(this._dataChannel);\n  }\n}\n\n/**\n * @event DataTrackReceiver#message\n * @param {string|ArrayBuffer} data\n */\n\n/**\n * @event DataTrackReceiver#close\n */\n\nmodule.exports = DataTrackReceiver;\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,eAAe,CAAC;AACrD,IAAMC,aAAa,GAAGD,OAAO,CAAC,aAAa,CAAC;AAE5C;;;;;;;;AAQA,IAAAE,iBAAA,0BAAAC,MAAA;EAAgCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAC9B;;;;EAIA,SAAAD,kBAAYG,WAAW;IAAvB,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OACEF,WAAW,CAACG,KAAK,EACjBH,WAAW,CAACI,iBAAiB,EAC7BJ,WAAW,CAACK,cAAc,EAC1BL,WAAW,CAACM,OAAO,CACpB;IAEDC,MAAM,CAACC,gBAAgB,CAACP,KAAI,EAAE;MAC5BQ,YAAY,EAAE;QACZC,KAAK,EAAEV;;KAEV,CAAC;IAEF;IACA;IACA;IACAA,WAAW,CAACW,UAAU,GAAG,aAAa;IAEtCX,WAAW,CAACY,gBAAgB,CAAC,SAAS,EAAE,UAAAC,KAAK;MAC3CZ,KAAI,CAACa,IAAI,CAAC,SAAS,EAAED,KAAK,CAACE,IAAI,CAAC;IAClC,CAAC,CAAC;IAEFf,WAAW,CAACY,gBAAgB,CAAC,OAAO,EAAE;MACpCX,KAAI,CAACa,IAAI,CAAC,OAAO,CAAC;IACpB,CAAC,CAAC;;EACJ;EAEAjB,iBAAA,CAAAmB,SAAA,CAAAC,IAAI,GAAJ;IACE,IAAI,CAACR,YAAY,CAACS,KAAK,EAAE;IACzBpB,MAAA,CAAAkB,SAAA,CAAMC,IAAI,CAAAf,IAAA,MAAE;EACd,CAAC;EAED;;;;EAIAL,iBAAA,CAAAmB,SAAA,CAAAG,eAAe,GAAf;IACE,OAAO,IAAIvB,aAAa,CAAC,IAAI,CAACa,YAAY,CAAC;EAC7C,CAAC;EACH,OAAAZ,iBAAC;AAAD,CAAC,CA7C+BH,oBAAoB;AA+CpD;;;;AAKA;;;AAIA0B,MAAM,CAACC,OAAO,GAAGxB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}